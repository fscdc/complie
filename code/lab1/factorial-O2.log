*** IR Dump Before Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'factorial.ll'
source_filename = "factorial.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %76, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %67, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %43, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %39, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %40, %20 ]
  %24 = phi i32 [ 0, %18 ], [ %41, %20 ]
  %25 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %26 = mul <4 x i32> %21, %23
  %27 = mul <4 x i32> %22, %25
  %28 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %29 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %30 = mul <4 x i32> %26, %28
  %31 = mul <4 x i32> %27, %29
  %32 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %33 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %34 = mul <4 x i32> %30, %32
  %35 = mul <4 x i32> %31, %33
  %36 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %37 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %38 = mul <4 x i32> %34, %36
  %39 = mul <4 x i32> %35, %37
  %40 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %41 = add i32 %24, 4
  %42 = icmp eq i32 %41, %19
  br i1 %42, label %43, label %20, !llvm.loop !9

43:                                               ; preds = %20, %10
  %44 = phi <4 x i32> [ undef, %10 ], [ %38, %20 ]
  %45 = phi <4 x i32> [ undef, %10 ], [ %39, %20 ]
  %46 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %20 ]
  %47 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %39, %20 ]
  %48 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %40, %20 ]
  %49 = icmp eq i32 %16, 0
  br i1 %49, label %61, label %50

50:                                               ; preds = %50, %43
  %51 = phi <4 x i32> [ %56, %50 ], [ %46, %43 ]
  %52 = phi <4 x i32> [ %57, %50 ], [ %47, %43 ]
  %53 = phi <4 x i32> [ %58, %50 ], [ %48, %43 ]
  %54 = phi i32 [ %59, %50 ], [ 0, %43 ]
  %55 = add <4 x i32> %53, <i32 4, i32 4, i32 4, i32 4>
  %56 = mul <4 x i32> %51, %53
  %57 = mul <4 x i32> %52, %55
  %58 = add <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %59 = add i32 %54, 1
  %60 = icmp eq i32 %59, %16
  br i1 %60, label %61, label %50, !llvm.loop !12

61:                                               ; preds = %50, %43
  %62 = phi <4 x i32> [ %44, %43 ], [ %56, %50 ]
  %63 = phi <4 x i32> [ %45, %43 ], [ %57, %50 ]
  %64 = mul <4 x i32> %63, %62
  %65 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %64)
  %66 = icmp eq i32 %8, %11
  br i1 %66, label %76, label %67

67:                                               ; preds = %61, %7
  %68 = phi i32 [ 1, %7 ], [ %65, %61 ]
  %69 = phi i32 [ 2, %7 ], [ %12, %61 ]
  br label %70

70:                                               ; preds = %70, %67
  %71 = phi i32 [ %73, %70 ], [ %68, %67 ]
  %72 = phi i32 [ %74, %70 ], [ %69, %67 ]
  %73 = mul nsw i32 %71, %72
  %74 = add nuw i32 %72, 1
  %75 = icmp eq i32 %72, %5
  br i1 %75, label %76, label %70, !llvm.loop !14

76:                                               ; preds = %70, %61, %0
  %77 = phi i32 [ 1, %0 ], [ %65, %61 ], [ %73, %70 ]
  %78 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %77)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noundef i32 @__isoc99_scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.mul.v4i32(<4 x i32>) #3

attributes #0 = { nofree nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly nofree nosync nounwind willreturn }
attributes #2 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nofree nosync nounwind readnone willreturn }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = distinct !{!9, !10, !11}
!10 = !{!"llvm.loop.mustprogress"}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = distinct !{!14, !10, !15, !11}
!15 = !{!"llvm.loop.unroll.runtime.disable"}
*** IR Dump After Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'factorial.ll'
source_filename = "factorial.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %76, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %67, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %43, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %39, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %40, %20 ]
  %24 = phi i32 [ 0, %18 ], [ %41, %20 ]
  %25 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %26 = mul <4 x i32> %21, %23
  %27 = mul <4 x i32> %22, %25
  %28 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %29 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %30 = mul <4 x i32> %26, %28
  %31 = mul <4 x i32> %27, %29
  %32 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %33 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %34 = mul <4 x i32> %30, %32
  %35 = mul <4 x i32> %31, %33
  %36 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %37 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %38 = mul <4 x i32> %34, %36
  %39 = mul <4 x i32> %35, %37
  %40 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %41 = add i32 %24, 4
  %42 = icmp eq i32 %41, %19
  br i1 %42, label %43, label %20, !llvm.loop !9

43:                                               ; preds = %20, %10
  %44 = phi <4 x i32> [ undef, %10 ], [ %38, %20 ]
  %45 = phi <4 x i32> [ undef, %10 ], [ %39, %20 ]
  %46 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %20 ]
  %47 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %39, %20 ]
  %48 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %40, %20 ]
  %49 = icmp eq i32 %16, 0
  br i1 %49, label %61, label %50

50:                                               ; preds = %50, %43
  %51 = phi <4 x i32> [ %56, %50 ], [ %46, %43 ]
  %52 = phi <4 x i32> [ %57, %50 ], [ %47, %43 ]
  %53 = phi <4 x i32> [ %58, %50 ], [ %48, %43 ]
  %54 = phi i32 [ %59, %50 ], [ 0, %43 ]
  %55 = add <4 x i32> %53, <i32 4, i32 4, i32 4, i32 4>
  %56 = mul <4 x i32> %51, %53
  %57 = mul <4 x i32> %52, %55
  %58 = add <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %59 = add i32 %54, 1
  %60 = icmp eq i32 %59, %16
  br i1 %60, label %61, label %50, !llvm.loop !12

61:                                               ; preds = %50, %43
  %62 = phi <4 x i32> [ %44, %43 ], [ %56, %50 ]
  %63 = phi <4 x i32> [ %45, %43 ], [ %57, %50 ]
  %64 = mul <4 x i32> %63, %62
  %65 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %64)
  %66 = icmp eq i32 %8, %11
  br i1 %66, label %76, label %67

67:                                               ; preds = %61, %7
  %68 = phi i32 [ 1, %7 ], [ %65, %61 ]
  %69 = phi i32 [ 2, %7 ], [ %12, %61 ]
  br label %70

70:                                               ; preds = %70, %67
  %71 = phi i32 [ %73, %70 ], [ %68, %67 ]
  %72 = phi i32 [ %74, %70 ], [ %69, %67 ]
  %73 = mul nsw i32 %71, %72
  %74 = add nuw i32 %72, 1
  %75 = icmp eq i32 %72, %5
  br i1 %75, label %76, label %70, !llvm.loop !14

76:                                               ; preds = %70, %61, %0
  %77 = phi i32 [ 1, %0 ], [ %65, %61 ], [ %73, %70 ]
  %78 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %77)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noundef i32 @__isoc99_scanf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nosync nounwind readnone willreturn
declare i32 @llvm.vector.reduce.mul.v4i32(<4 x i32>) #3

attributes #0 = { nofree nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { argmemonly nofree nosync nounwind willreturn }
attributes #2 = { nofree nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nofree nosync nounwind readnone willreturn }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = distinct !{!9, !10, !11}
!10 = !{!"llvm.loop.mustprogress"}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !13}
!13 = !{!"llvm.loop.unroll.disable"}
!14 = distinct !{!14, !10, !15, !11}
!15 = !{!"llvm.loop.unroll.runtime.disable"}
*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %76, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %67, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %43, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %39, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %40, %20 ]
  %24 = phi i32 [ 0, %18 ], [ %41, %20 ]
  %25 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %26 = mul <4 x i32> %21, %23
  %27 = mul <4 x i32> %22, %25
  %28 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %29 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %30 = mul <4 x i32> %26, %28
  %31 = mul <4 x i32> %27, %29
  %32 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %33 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %34 = mul <4 x i32> %30, %32
  %35 = mul <4 x i32> %31, %33
  %36 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %37 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %38 = mul <4 x i32> %34, %36
  %39 = mul <4 x i32> %35, %37
  %40 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %41 = add i32 %24, 4
  %42 = icmp eq i32 %41, %19
  br i1 %42, label %43, label %20, !llvm.loop !9

43:                                               ; preds = %20, %10
  %44 = phi <4 x i32> [ undef, %10 ], [ %38, %20 ]
  %45 = phi <4 x i32> [ undef, %10 ], [ %39, %20 ]
  %46 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %20 ]
  %47 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %39, %20 ]
  %48 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %40, %20 ]
  %49 = icmp eq i32 %16, 0
  br i1 %49, label %61, label %50

50:                                               ; preds = %50, %43
  %51 = phi <4 x i32> [ %56, %50 ], [ %46, %43 ]
  %52 = phi <4 x i32> [ %57, %50 ], [ %47, %43 ]
  %53 = phi <4 x i32> [ %58, %50 ], [ %48, %43 ]
  %54 = phi i32 [ %59, %50 ], [ 0, %43 ]
  %55 = add <4 x i32> %53, <i32 4, i32 4, i32 4, i32 4>
  %56 = mul <4 x i32> %51, %53
  %57 = mul <4 x i32> %52, %55
  %58 = add <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %59 = add i32 %54, 1
  %60 = icmp eq i32 %59, %16
  br i1 %60, label %61, label %50, !llvm.loop !12

61:                                               ; preds = %50, %43
  %62 = phi <4 x i32> [ %44, %43 ], [ %56, %50 ]
  %63 = phi <4 x i32> [ %45, %43 ], [ %57, %50 ]
  %64 = mul <4 x i32> %63, %62
  %65 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %64)
  %66 = icmp eq i32 %8, %11
  br i1 %66, label %76, label %67

67:                                               ; preds = %61, %7
  %68 = phi i32 [ 1, %7 ], [ %65, %61 ]
  %69 = phi i32 [ 2, %7 ], [ %12, %61 ]
  br label %70

70:                                               ; preds = %70, %67
  %71 = phi i32 [ %73, %70 ], [ %68, %67 ]
  %72 = phi i32 [ %74, %70 ], [ %69, %67 ]
  %73 = mul nsw i32 %71, %72
  %74 = add nuw i32 %72, 1
  %75 = icmp eq i32 %72, %5
  br i1 %75, label %76, label %70, !llvm.loop !14

76:                                               ; preds = %70, %61, %0
  %77 = phi i32 [ 1, %0 ], [ %65, %61 ], [ %73, %70 ]
  %78 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %77)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %76, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %67, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %43, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %39, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %40, %20 ]
  %24 = phi i32 [ 0, %18 ], [ %41, %20 ]
  %25 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %26 = mul <4 x i32> %21, %23
  %27 = mul <4 x i32> %22, %25
  %28 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %29 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %30 = mul <4 x i32> %26, %28
  %31 = mul <4 x i32> %27, %29
  %32 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %33 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %34 = mul <4 x i32> %30, %32
  %35 = mul <4 x i32> %31, %33
  %36 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %37 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %38 = mul <4 x i32> %34, %36
  %39 = mul <4 x i32> %35, %37
  %40 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %41 = add i32 %24, 4
  %42 = icmp eq i32 %41, %19
  br i1 %42, label %43, label %20, !llvm.loop !9

43:                                               ; preds = %20, %10
  %44 = phi <4 x i32> [ undef, %10 ], [ %38, %20 ]
  %45 = phi <4 x i32> [ undef, %10 ], [ %39, %20 ]
  %46 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %20 ]
  %47 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %39, %20 ]
  %48 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %40, %20 ]
  %49 = icmp eq i32 %16, 0
  br i1 %49, label %61, label %50

50:                                               ; preds = %50, %43
  %51 = phi <4 x i32> [ %56, %50 ], [ %46, %43 ]
  %52 = phi <4 x i32> [ %57, %50 ], [ %47, %43 ]
  %53 = phi <4 x i32> [ %58, %50 ], [ %48, %43 ]
  %54 = phi i32 [ %59, %50 ], [ 0, %43 ]
  %55 = add <4 x i32> %53, <i32 4, i32 4, i32 4, i32 4>
  %56 = mul <4 x i32> %51, %53
  %57 = mul <4 x i32> %52, %55
  %58 = add <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %59 = add i32 %54, 1
  %60 = icmp eq i32 %59, %16
  br i1 %60, label %61, label %50, !llvm.loop !12

61:                                               ; preds = %50, %43
  %62 = phi <4 x i32> [ %44, %43 ], [ %56, %50 ]
  %63 = phi <4 x i32> [ %45, %43 ], [ %57, %50 ]
  %64 = mul <4 x i32> %63, %62
  %65 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %64)
  %66 = icmp eq i32 %8, %11
  br i1 %66, label %76, label %67

67:                                               ; preds = %61, %7
  %68 = phi i32 [ 1, %7 ], [ %65, %61 ]
  %69 = phi i32 [ 2, %7 ], [ %12, %61 ]
  br label %70

70:                                               ; preds = %70, %67
  %71 = phi i32 [ %73, %70 ], [ %68, %67 ]
  %72 = phi i32 [ %74, %70 ], [ %69, %67 ]
  %73 = mul nsw i32 %71, %72
  %74 = add nuw i32 %72, 1
  %75 = icmp eq i32 %72, %5
  br i1 %75, label %76, label %70, !llvm.loop !14

76:                                               ; preds = %70, %61, %0
  %77 = phi i32 [ 1, %0 ], [ %65, %61 ], [ %73, %70 ]
  %78 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %77)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump Before Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %76, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %67, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %43, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %39, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %40, %20 ]
  %24 = phi i32 [ 0, %18 ], [ %41, %20 ]
  %25 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %26 = mul <4 x i32> %21, %23
  %27 = mul <4 x i32> %22, %25
  %28 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %29 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %30 = mul <4 x i32> %26, %28
  %31 = mul <4 x i32> %27, %29
  %32 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %33 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %34 = mul <4 x i32> %30, %32
  %35 = mul <4 x i32> %31, %33
  %36 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %37 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %38 = mul <4 x i32> %34, %36
  %39 = mul <4 x i32> %35, %37
  %40 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %41 = add i32 %24, 4
  %42 = icmp eq i32 %41, %19
  br i1 %42, label %43, label %20, !llvm.loop !9

43:                                               ; preds = %20, %10
  %44 = phi <4 x i32> [ undef, %10 ], [ %38, %20 ]
  %45 = phi <4 x i32> [ undef, %10 ], [ %39, %20 ]
  %46 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %20 ]
  %47 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %39, %20 ]
  %48 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %40, %20 ]
  %49 = icmp eq i32 %16, 0
  br i1 %49, label %61, label %50

50:                                               ; preds = %50, %43
  %51 = phi <4 x i32> [ %56, %50 ], [ %46, %43 ]
  %52 = phi <4 x i32> [ %57, %50 ], [ %47, %43 ]
  %53 = phi <4 x i32> [ %58, %50 ], [ %48, %43 ]
  %54 = phi i32 [ %59, %50 ], [ 0, %43 ]
  %55 = add <4 x i32> %53, <i32 4, i32 4, i32 4, i32 4>
  %56 = mul <4 x i32> %51, %53
  %57 = mul <4 x i32> %52, %55
  %58 = add <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %59 = add i32 %54, 1
  %60 = icmp eq i32 %59, %16
  br i1 %60, label %61, label %50, !llvm.loop !12

61:                                               ; preds = %50, %43
  %62 = phi <4 x i32> [ %44, %43 ], [ %56, %50 ]
  %63 = phi <4 x i32> [ %45, %43 ], [ %57, %50 ]
  %64 = mul <4 x i32> %63, %62
  %65 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %64)
  %66 = icmp eq i32 %8, %11
  br i1 %66, label %76, label %67

67:                                               ; preds = %61, %7
  %68 = phi i32 [ 1, %7 ], [ %65, %61 ]
  %69 = phi i32 [ 2, %7 ], [ %12, %61 ]
  br label %70

70:                                               ; preds = %70, %67
  %71 = phi i32 [ %73, %70 ], [ %68, %67 ]
  %72 = phi i32 [ %74, %70 ], [ %69, %67 ]
  %73 = mul nsw i32 %71, %72
  %74 = add nuw i32 %72, 1
  %75 = icmp eq i32 %72, %5
  br i1 %75, label %76, label %70, !llvm.loop !14

76:                                               ; preds = %70, %61, %0
  %77 = phi i32 [ 1, %0 ], [ %65, %61 ], [ %73, %70 ]
  %78 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %77)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump After Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %76, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %67, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %43, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %39, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %40, %20 ]
  %24 = phi i32 [ 0, %18 ], [ %41, %20 ]
  %25 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %26 = mul <4 x i32> %21, %23
  %27 = mul <4 x i32> %22, %25
  %28 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %29 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %30 = mul <4 x i32> %26, %28
  %31 = mul <4 x i32> %27, %29
  %32 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %33 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %34 = mul <4 x i32> %30, %32
  %35 = mul <4 x i32> %31, %33
  %36 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %37 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %38 = mul <4 x i32> %34, %36
  %39 = mul <4 x i32> %35, %37
  %40 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %41 = add i32 %24, 4
  %42 = icmp eq i32 %41, %19
  br i1 %42, label %43, label %20, !llvm.loop !9

43:                                               ; preds = %20, %10
  %44 = phi <4 x i32> [ undef, %10 ], [ %38, %20 ]
  %45 = phi <4 x i32> [ undef, %10 ], [ %39, %20 ]
  %46 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %20 ]
  %47 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %39, %20 ]
  %48 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %40, %20 ]
  %49 = icmp eq i32 %16, 0
  br i1 %49, label %61, label %50

50:                                               ; preds = %50, %43
  %51 = phi <4 x i32> [ %56, %50 ], [ %46, %43 ]
  %52 = phi <4 x i32> [ %57, %50 ], [ %47, %43 ]
  %53 = phi <4 x i32> [ %58, %50 ], [ %48, %43 ]
  %54 = phi i32 [ %59, %50 ], [ 0, %43 ]
  %55 = add <4 x i32> %53, <i32 4, i32 4, i32 4, i32 4>
  %56 = mul <4 x i32> %51, %53
  %57 = mul <4 x i32> %52, %55
  %58 = add <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %59 = add i32 %54, 1
  %60 = icmp eq i32 %59, %16
  br i1 %60, label %61, label %50, !llvm.loop !12

61:                                               ; preds = %50, %43
  %62 = phi <4 x i32> [ %44, %43 ], [ %56, %50 ]
  %63 = phi <4 x i32> [ %45, %43 ], [ %57, %50 ]
  %64 = mul <4 x i32> %63, %62
  %65 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %64)
  %66 = icmp eq i32 %8, %11
  br i1 %66, label %76, label %67

67:                                               ; preds = %61, %7
  %68 = phi i32 [ 1, %7 ], [ %65, %61 ]
  %69 = phi i32 [ 2, %7 ], [ %12, %61 ]
  br label %70

70:                                               ; preds = %70, %67
  %71 = phi i32 [ %73, %70 ], [ %68, %67 ]
  %72 = phi i32 [ %74, %70 ], [ %69, %67 ]
  %73 = mul nsw i32 %71, %72
  %74 = add nuw i32 %72, 1
  %75 = icmp eq i32 %72, %5
  br i1 %75, label %76, label %70, !llvm.loop !14

76:                                               ; preds = %70, %61, %0
  %77 = phi i32 [ 1, %0 ], [ %65, %61 ], [ %73, %70 ]
  %78 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %77)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump Before Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %76, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %67, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %43, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %39, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %40, %20 ]
  %24 = phi i32 [ 0, %18 ], [ %41, %20 ]
  %25 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %26 = mul <4 x i32> %21, %23
  %27 = mul <4 x i32> %22, %25
  %28 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %29 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %30 = mul <4 x i32> %26, %28
  %31 = mul <4 x i32> %27, %29
  %32 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %33 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %34 = mul <4 x i32> %30, %32
  %35 = mul <4 x i32> %31, %33
  %36 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %37 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %38 = mul <4 x i32> %34, %36
  %39 = mul <4 x i32> %35, %37
  %40 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %41 = add i32 %24, 4
  %42 = icmp eq i32 %41, %19
  br i1 %42, label %43, label %20, !llvm.loop !9

43:                                               ; preds = %20, %10
  %44 = phi <4 x i32> [ undef, %10 ], [ %38, %20 ]
  %45 = phi <4 x i32> [ undef, %10 ], [ %39, %20 ]
  %46 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %20 ]
  %47 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %39, %20 ]
  %48 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %40, %20 ]
  %49 = icmp eq i32 %16, 0
  br i1 %49, label %61, label %50

50:                                               ; preds = %50, %43
  %51 = phi <4 x i32> [ %56, %50 ], [ %46, %43 ]
  %52 = phi <4 x i32> [ %57, %50 ], [ %47, %43 ]
  %53 = phi <4 x i32> [ %58, %50 ], [ %48, %43 ]
  %54 = phi i32 [ %59, %50 ], [ 0, %43 ]
  %55 = add <4 x i32> %53, <i32 4, i32 4, i32 4, i32 4>
  %56 = mul <4 x i32> %51, %53
  %57 = mul <4 x i32> %52, %55
  %58 = add <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %59 = add i32 %54, 1
  %60 = icmp eq i32 %59, %16
  br i1 %60, label %61, label %50, !llvm.loop !12

61:                                               ; preds = %50, %43
  %62 = phi <4 x i32> [ %44, %43 ], [ %56, %50 ]
  %63 = phi <4 x i32> [ %45, %43 ], [ %57, %50 ]
  %64 = mul <4 x i32> %63, %62
  %65 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %64)
  %66 = icmp eq i32 %8, %11
  br i1 %66, label %76, label %67

67:                                               ; preds = %61, %7
  %68 = phi i32 [ 1, %7 ], [ %65, %61 ]
  %69 = phi i32 [ 2, %7 ], [ %12, %61 ]
  br label %70

70:                                               ; preds = %70, %67
  %71 = phi i32 [ %73, %70 ], [ %68, %67 ]
  %72 = phi i32 [ %74, %70 ], [ %69, %67 ]
  %73 = mul nsw i32 %71, %72
  %74 = add nuw i32 %72, 1
  %75 = icmp eq i32 %72, %5
  br i1 %75, label %76, label %70, !llvm.loop !14

76:                                               ; preds = %70, %61, %0
  %77 = phi i32 [ 1, %0 ], [ %65, %61 ], [ %73, %70 ]
  %78 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %77)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump After Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %76, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %67, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %43, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %39, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %40, %20 ]
  %24 = phi i32 [ 0, %18 ], [ %41, %20 ]
  %25 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %26 = mul <4 x i32> %21, %23
  %27 = mul <4 x i32> %22, %25
  %28 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %29 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %30 = mul <4 x i32> %26, %28
  %31 = mul <4 x i32> %27, %29
  %32 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %33 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %34 = mul <4 x i32> %30, %32
  %35 = mul <4 x i32> %31, %33
  %36 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %37 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %38 = mul <4 x i32> %34, %36
  %39 = mul <4 x i32> %35, %37
  %40 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %41 = add i32 %24, 4
  %42 = icmp eq i32 %41, %19
  br i1 %42, label %43, label %20, !llvm.loop !9

43:                                               ; preds = %20, %10
  %44 = phi <4 x i32> [ undef, %10 ], [ %38, %20 ]
  %45 = phi <4 x i32> [ undef, %10 ], [ %39, %20 ]
  %46 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %20 ]
  %47 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %39, %20 ]
  %48 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %40, %20 ]
  %49 = icmp eq i32 %16, 0
  br i1 %49, label %61, label %50

50:                                               ; preds = %50, %43
  %51 = phi <4 x i32> [ %56, %50 ], [ %46, %43 ]
  %52 = phi <4 x i32> [ %57, %50 ], [ %47, %43 ]
  %53 = phi <4 x i32> [ %58, %50 ], [ %48, %43 ]
  %54 = phi i32 [ %59, %50 ], [ 0, %43 ]
  %55 = add <4 x i32> %53, <i32 4, i32 4, i32 4, i32 4>
  %56 = mul <4 x i32> %51, %53
  %57 = mul <4 x i32> %52, %55
  %58 = add <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %59 = add i32 %54, 1
  %60 = icmp eq i32 %59, %16
  br i1 %60, label %61, label %50, !llvm.loop !12

61:                                               ; preds = %50, %43
  %62 = phi <4 x i32> [ %44, %43 ], [ %56, %50 ]
  %63 = phi <4 x i32> [ %45, %43 ], [ %57, %50 ]
  %64 = mul <4 x i32> %63, %62
  %65 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %64)
  %66 = icmp eq i32 %8, %11
  br i1 %66, label %76, label %67

67:                                               ; preds = %61, %7
  %68 = phi i32 [ 1, %7 ], [ %65, %61 ]
  %69 = phi i32 [ 2, %7 ], [ %12, %61 ]
  br label %70

70:                                               ; preds = %70, %67
  %71 = phi i32 [ %73, %70 ], [ %68, %67 ]
  %72 = phi i32 [ %74, %70 ], [ %69, %67 ]
  %73 = mul nsw i32 %71, %72
  %74 = add nuw i32 %72, 1
  %75 = icmp eq i32 %72, %5
  br i1 %75, label %76, label %70, !llvm.loop !14

76:                                               ; preds = %70, %61, %0
  %77 = phi i32 [ 1, %0 ], [ %65, %61 ], [ %73, %70 ]
  %78 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %77)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %76, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %67, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %43, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %39, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %40, %20 ]
  %24 = phi i32 [ 0, %18 ], [ %41, %20 ]
  %25 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %26 = mul <4 x i32> %21, %23
  %27 = mul <4 x i32> %22, %25
  %28 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %29 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %30 = mul <4 x i32> %26, %28
  %31 = mul <4 x i32> %27, %29
  %32 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %33 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %34 = mul <4 x i32> %30, %32
  %35 = mul <4 x i32> %31, %33
  %36 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %37 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %38 = mul <4 x i32> %34, %36
  %39 = mul <4 x i32> %35, %37
  %40 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %41 = add i32 %24, 4
  %42 = icmp eq i32 %41, %19
  br i1 %42, label %43, label %20, !llvm.loop !9

43:                                               ; preds = %20, %10
  %44 = phi <4 x i32> [ undef, %10 ], [ %38, %20 ]
  %45 = phi <4 x i32> [ undef, %10 ], [ %39, %20 ]
  %46 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %20 ]
  %47 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %39, %20 ]
  %48 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %40, %20 ]
  %49 = icmp eq i32 %16, 0
  br i1 %49, label %61, label %50

50:                                               ; preds = %50, %43
  %51 = phi <4 x i32> [ %56, %50 ], [ %46, %43 ]
  %52 = phi <4 x i32> [ %57, %50 ], [ %47, %43 ]
  %53 = phi <4 x i32> [ %58, %50 ], [ %48, %43 ]
  %54 = phi i32 [ %59, %50 ], [ 0, %43 ]
  %55 = add <4 x i32> %53, <i32 4, i32 4, i32 4, i32 4>
  %56 = mul <4 x i32> %51, %53
  %57 = mul <4 x i32> %52, %55
  %58 = add <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %59 = add i32 %54, 1
  %60 = icmp eq i32 %59, %16
  br i1 %60, label %61, label %50, !llvm.loop !12

61:                                               ; preds = %50, %43
  %62 = phi <4 x i32> [ %44, %43 ], [ %56, %50 ]
  %63 = phi <4 x i32> [ %45, %43 ], [ %57, %50 ]
  %64 = mul <4 x i32> %63, %62
  %65 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %64)
  %66 = icmp eq i32 %8, %11
  br i1 %66, label %76, label %67

67:                                               ; preds = %61, %7
  %68 = phi i32 [ 1, %7 ], [ %65, %61 ]
  %69 = phi i32 [ 2, %7 ], [ %12, %61 ]
  br label %70

70:                                               ; preds = %70, %67
  %71 = phi i32 [ %73, %70 ], [ %68, %67 ]
  %72 = phi i32 [ %74, %70 ], [ %69, %67 ]
  %73 = mul nsw i32 %71, %72
  %74 = add nuw i32 %72, 1
  %75 = icmp eq i32 %72, %5
  br i1 %75, label %76, label %70, !llvm.loop !14

76:                                               ; preds = %70, %61, %0
  %77 = phi i32 [ 1, %0 ], [ %65, %61 ], [ %73, %70 ]
  %78 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %77)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %76, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %67, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %43, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %39, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %40, %20 ]
  %24 = phi i32 [ 0, %18 ], [ %41, %20 ]
  %25 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %26 = mul <4 x i32> %21, %23
  %27 = mul <4 x i32> %22, %25
  %28 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %29 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %30 = mul <4 x i32> %26, %28
  %31 = mul <4 x i32> %27, %29
  %32 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %33 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %34 = mul <4 x i32> %30, %32
  %35 = mul <4 x i32> %31, %33
  %36 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %37 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %38 = mul <4 x i32> %34, %36
  %39 = mul <4 x i32> %35, %37
  %40 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %41 = add i32 %24, 4
  %42 = icmp eq i32 %41, %19
  br i1 %42, label %43, label %20, !llvm.loop !9

43:                                               ; preds = %20, %10
  %44 = phi <4 x i32> [ undef, %10 ], [ %38, %20 ]
  %45 = phi <4 x i32> [ undef, %10 ], [ %39, %20 ]
  %46 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %20 ]
  %47 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %39, %20 ]
  %48 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %40, %20 ]
  %49 = icmp eq i32 %16, 0
  br i1 %49, label %61, label %50

50:                                               ; preds = %50, %43
  %51 = phi <4 x i32> [ %56, %50 ], [ %46, %43 ]
  %52 = phi <4 x i32> [ %57, %50 ], [ %47, %43 ]
  %53 = phi <4 x i32> [ %58, %50 ], [ %48, %43 ]
  %54 = phi i32 [ %59, %50 ], [ 0, %43 ]
  %55 = add <4 x i32> %53, <i32 4, i32 4, i32 4, i32 4>
  %56 = mul <4 x i32> %51, %53
  %57 = mul <4 x i32> %52, %55
  %58 = add <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %59 = add i32 %54, 1
  %60 = icmp eq i32 %59, %16
  br i1 %60, label %61, label %50, !llvm.loop !12

61:                                               ; preds = %50, %43
  %62 = phi <4 x i32> [ %44, %43 ], [ %56, %50 ]
  %63 = phi <4 x i32> [ %45, %43 ], [ %57, %50 ]
  %64 = mul <4 x i32> %63, %62
  %65 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %64)
  %66 = icmp eq i32 %8, %11
  br i1 %66, label %76, label %67

67:                                               ; preds = %61, %7
  %68 = phi i32 [ 1, %7 ], [ %65, %61 ]
  %69 = phi i32 [ 2, %7 ], [ %12, %61 ]
  br label %70

70:                                               ; preds = %70, %67
  %71 = phi i32 [ %73, %70 ], [ %68, %67 ]
  %72 = phi i32 [ %74, %70 ], [ %69, %67 ]
  %73 = mul nsw i32 %71, %72
  %74 = add nuw i32 %72, 1
  %75 = icmp eq i32 %72, %5
  br i1 %75, label %76, label %70, !llvm.loop !14

76:                                               ; preds = %70, %61, %0
  %77 = phi i32 [ 1, %0 ], [ %65, %61 ], [ %73, %70 ]
  %78 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %77)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %76, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %67, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %43, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %39, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %40, %20 ]
  %24 = phi i32 [ 0, %18 ], [ %41, %20 ]
  %25 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %26 = mul <4 x i32> %21, %23
  %27 = mul <4 x i32> %22, %25
  %28 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %29 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %30 = mul <4 x i32> %26, %28
  %31 = mul <4 x i32> %27, %29
  %32 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %33 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %34 = mul <4 x i32> %30, %32
  %35 = mul <4 x i32> %31, %33
  %36 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %37 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %38 = mul <4 x i32> %34, %36
  %39 = mul <4 x i32> %35, %37
  %40 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %41 = add i32 %24, 4
  %42 = icmp eq i32 %41, %19
  br i1 %42, label %43, label %20, !llvm.loop !9

43:                                               ; preds = %20, %10
  %44 = phi <4 x i32> [ undef, %10 ], [ %38, %20 ]
  %45 = phi <4 x i32> [ undef, %10 ], [ %39, %20 ]
  %46 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %20 ]
  %47 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %39, %20 ]
  %48 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %40, %20 ]
  %49 = icmp eq i32 %16, 0
  br i1 %49, label %61, label %50

50:                                               ; preds = %50, %43
  %51 = phi <4 x i32> [ %56, %50 ], [ %46, %43 ]
  %52 = phi <4 x i32> [ %57, %50 ], [ %47, %43 ]
  %53 = phi <4 x i32> [ %58, %50 ], [ %48, %43 ]
  %54 = phi i32 [ %59, %50 ], [ 0, %43 ]
  %55 = add <4 x i32> %53, <i32 4, i32 4, i32 4, i32 4>
  %56 = mul <4 x i32> %51, %53
  %57 = mul <4 x i32> %52, %55
  %58 = add <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %59 = add i32 %54, 1
  %60 = icmp eq i32 %59, %16
  br i1 %60, label %61, label %50, !llvm.loop !12

61:                                               ; preds = %50, %43
  %62 = phi <4 x i32> [ %44, %43 ], [ %56, %50 ]
  %63 = phi <4 x i32> [ %45, %43 ], [ %57, %50 ]
  %64 = mul <4 x i32> %63, %62
  %65 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %64)
  %66 = icmp eq i32 %8, %11
  br i1 %66, label %76, label %67

67:                                               ; preds = %61, %7
  %68 = phi i32 [ 1, %7 ], [ %65, %61 ]
  %69 = phi i32 [ 2, %7 ], [ %12, %61 ]
  br label %70

70:                                               ; preds = %70, %67
  %71 = phi i32 [ %73, %70 ], [ %68, %67 ]
  %72 = phi i32 [ %74, %70 ], [ %69, %67 ]
  %73 = mul nsw i32 %71, %72
  %74 = add nuw i32 %72, 1
  %75 = icmp eq i32 %72, %5
  br i1 %75, label %76, label %70, !llvm.loop !14

76:                                               ; preds = %70, %61, %0
  %77 = phi i32 [ 1, %0 ], [ %65, %61 ], [ %73, %70 ]
  %78 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %77)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %76, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %67, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %43, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %39, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %40, %20 ]
  %24 = phi i32 [ 0, %18 ], [ %41, %20 ]
  %25 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %26 = mul <4 x i32> %21, %23
  %27 = mul <4 x i32> %22, %25
  %28 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %29 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %30 = mul <4 x i32> %26, %28
  %31 = mul <4 x i32> %27, %29
  %32 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %33 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %34 = mul <4 x i32> %30, %32
  %35 = mul <4 x i32> %31, %33
  %36 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %37 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %38 = mul <4 x i32> %34, %36
  %39 = mul <4 x i32> %35, %37
  %40 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %41 = add i32 %24, 4
  %42 = icmp eq i32 %41, %19
  br i1 %42, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %43

43:                                               ; preds = %.loopexit2, %10
  %44 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %45 = phi <4 x i32> [ undef, %10 ], [ %39, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %47 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %39, %.loopexit2 ]
  %48 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %40, %.loopexit2 ]
  %49 = icmp eq i32 %16, 0
  br i1 %49, label %61, label %.preheader

.preheader:                                       ; preds = %43
  br label %50

50:                                               ; preds = %.preheader, %50
  %51 = phi <4 x i32> [ %56, %50 ], [ %46, %.preheader ]
  %52 = phi <4 x i32> [ %57, %50 ], [ %47, %.preheader ]
  %53 = phi <4 x i32> [ %58, %50 ], [ %48, %.preheader ]
  %54 = phi i32 [ %59, %50 ], [ 0, %.preheader ]
  %55 = add <4 x i32> %53, <i32 4, i32 4, i32 4, i32 4>
  %56 = mul <4 x i32> %51, %53
  %57 = mul <4 x i32> %52, %55
  %58 = add <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %59 = add i32 %54, 1
  %60 = icmp eq i32 %59, %16
  br i1 %60, label %.loopexit1, label %50, !llvm.loop !12

.loopexit1:                                       ; preds = %50
  br label %61

61:                                               ; preds = %.loopexit1, %43
  %62 = phi <4 x i32> [ %44, %43 ], [ %56, %.loopexit1 ]
  %63 = phi <4 x i32> [ %45, %43 ], [ %57, %.loopexit1 ]
  %64 = mul <4 x i32> %63, %62
  %65 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %64)
  %66 = icmp eq i32 %8, %11
  br i1 %66, label %76, label %67

67:                                               ; preds = %61, %7
  %68 = phi i32 [ 1, %7 ], [ %65, %61 ]
  %69 = phi i32 [ 2, %7 ], [ %12, %61 ]
  br label %70

70:                                               ; preds = %70, %67
  %71 = phi i32 [ %73, %70 ], [ %68, %67 ]
  %72 = phi i32 [ %74, %70 ], [ %69, %67 ]
  %73 = mul nsw i32 %71, %72
  %74 = add nuw i32 %72, 1
  %75 = icmp eq i32 %72, %5
  br i1 %75, label %.loopexit, label %70, !llvm.loop !14

.loopexit:                                        ; preds = %70
  br label %76

76:                                               ; preds = %.loopexit, %61, %0
  %77 = phi i32 [ 1, %0 ], [ %65, %61 ], [ %73, %.loopexit ]
  %78 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %77)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump Before Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
67:                                               ; preds = %61, %7
  %68 = phi i32 [ 1, %7 ], [ %65, %61 ]
  %69 = phi i32 [ 2, %7 ], [ %12, %61 ]
  br label %70

; Loop:
70:                                               ; preds = %70, %67
  %71 = phi i32 [ %73, %70 ], [ %68, %67 ]
  %72 = phi i32 [ %74, %70 ], [ %69, %67 ]
  %73 = mul nsw i32 %71, %72
  %74 = add nuw i32 %72, 1
  %75 = icmp eq i32 %72, %5
  br i1 %75, label %.loopexit, label %70, !llvm.loop !14

; Exit blocks
.loopexit:                                        ; preds = %70
  br label %76
*** IR Dump After Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
67:                                               ; preds = %61, %7
  %68 = phi i32 [ 1, %7 ], [ %65, %61 ]
  %69 = phi i32 [ 2, %7 ], [ %12, %61 ]
  br label %70

; Loop:
70:                                               ; preds = %70, %67
  %71 = phi i32 [ %73, %70 ], [ %68, %67 ]
  %72 = phi i32 [ %74, %70 ], [ %69, %67 ]
  %73 = mul nsw i32 %71, %72
  %74 = add nuw i32 %72, 1
  %75 = icmp eq i32 %72, %5
  br i1 %75, label %.loopexit, label %70, !llvm.loop !14

; Exit blocks
.loopexit:                                        ; preds = %70
  br label %76
*** IR Dump Before Loop Strength Reduction (loop-reduce) ***
; Preheader:
67:                                               ; preds = %61, %7
  %68 = phi i32 [ 1, %7 ], [ %65, %61 ]
  %69 = phi i32 [ 2, %7 ], [ %12, %61 ]
  br label %70

; Loop:
70:                                               ; preds = %70, %67
  %71 = phi i32 [ %73, %70 ], [ %68, %67 ]
  %72 = phi i32 [ %74, %70 ], [ %69, %67 ]
  %73 = mul nsw i32 %71, %72
  %74 = add nuw i32 %72, 1
  %75 = icmp eq i32 %72, %5
  br i1 %75, label %.loopexit, label %70, !llvm.loop !14

; Exit blocks
.loopexit:                                        ; preds = %70
  br label %76
*** IR Dump After Loop Strength Reduction (loop-reduce) ***
; Preheader:
67:                                               ; preds = %61, %7
  %68 = phi i32 [ 1, %7 ], [ %65, %61 ]
  %69 = phi i32 [ 2, %7 ], [ %12, %61 ]
  %70 = add i32 %5, 1
  br label %71

; Loop:
71:                                               ; preds = %71, %67
  %72 = phi i32 [ %74, %71 ], [ %68, %67 ]
  %73 = phi i32 [ %75, %71 ], [ %69, %67 ]
  %74 = mul nsw i32 %72, %73
  %75 = add i32 %73, 1
  %76 = icmp eq i32 %70, %75
  br i1 %76, label %.loopexit, label %71, !llvm.loop !14

; Exit blocks
.loopexit:                                        ; preds = %71
  br label %77
*** IR Dump Before Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
.preheader:                                       ; preds = %43
  br label %50

; Loop:
50:                                               ; preds = %.preheader, %50
  %51 = phi <4 x i32> [ %56, %50 ], [ %46, %.preheader ]
  %52 = phi <4 x i32> [ %57, %50 ], [ %47, %.preheader ]
  %53 = phi <4 x i32> [ %58, %50 ], [ %48, %.preheader ]
  %54 = phi i32 [ %59, %50 ], [ 0, %.preheader ]
  %55 = add <4 x i32> %53, <i32 4, i32 4, i32 4, i32 4>
  %56 = mul <4 x i32> %51, %53
  %57 = mul <4 x i32> %52, %55
  %58 = add <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %59 = add i32 %54, 1
  %60 = icmp eq i32 %59, %16
  br i1 %60, label %.loopexit1, label %50, !llvm.loop !12

; Exit blocks
.loopexit1:                                       ; preds = %50
  br label %61
*** IR Dump After Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
.preheader:                                       ; preds = %43
  br label %50

; Loop:
50:                                               ; preds = %.preheader, %50
  %51 = phi <4 x i32> [ %56, %50 ], [ %46, %.preheader ]
  %52 = phi <4 x i32> [ %57, %50 ], [ %47, %.preheader ]
  %53 = phi <4 x i32> [ %58, %50 ], [ %48, %.preheader ]
  %54 = phi i32 [ %59, %50 ], [ 0, %.preheader ]
  %55 = add <4 x i32> %53, <i32 4, i32 4, i32 4, i32 4>
  %56 = mul <4 x i32> %51, %53
  %57 = mul <4 x i32> %52, %55
  %58 = add <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %59 = add i32 %54, 1
  %60 = icmp eq i32 %59, %16
  br i1 %60, label %.loopexit1, label %50, !llvm.loop !12

; Exit blocks
.loopexit1:                                       ; preds = %50
  br label %61
*** IR Dump Before Loop Strength Reduction (loop-reduce) ***
; Preheader:
.preheader:                                       ; preds = %43
  br label %50

; Loop:
50:                                               ; preds = %.preheader, %50
  %51 = phi <4 x i32> [ %56, %50 ], [ %46, %.preheader ]
  %52 = phi <4 x i32> [ %57, %50 ], [ %47, %.preheader ]
  %53 = phi <4 x i32> [ %58, %50 ], [ %48, %.preheader ]
  %54 = phi i32 [ %59, %50 ], [ 0, %.preheader ]
  %55 = add <4 x i32> %53, <i32 4, i32 4, i32 4, i32 4>
  %56 = mul <4 x i32> %51, %53
  %57 = mul <4 x i32> %52, %55
  %58 = add <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %59 = add i32 %54, 1
  %60 = icmp eq i32 %59, %16
  br i1 %60, label %.loopexit1, label %50, !llvm.loop !12

; Exit blocks
.loopexit1:                                       ; preds = %50
  br label %61
*** IR Dump After Loop Strength Reduction (loop-reduce) ***
; Preheader:
.preheader:                                       ; preds = %43
  br label %50

; Loop:
50:                                               ; preds = %.preheader, %50
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %50 ]
  %51 = phi <4 x i32> [ %55, %50 ], [ %46, %.preheader ]
  %52 = phi <4 x i32> [ %56, %50 ], [ %47, %.preheader ]
  %53 = phi <4 x i32> [ %57, %50 ], [ %48, %.preheader ]
  %54 = add <4 x i32> %53, <i32 4, i32 4, i32 4, i32 4>
  %55 = mul <4 x i32> %51, %53
  %56 = mul <4 x i32> %52, %54
  %57 = add <4 x i32> %53, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %58 = icmp eq i32 %lsr.iv.next, 0
  br i1 %58, label %.loopexit1, label %50, !llvm.loop !12

; Exit blocks
.loopexit1:                                       ; preds = %50
  br label %59
*** IR Dump Before Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

; Loop:
20:                                               ; preds = %20, %18
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %39, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %40, %20 ]
  %24 = phi i32 [ 0, %18 ], [ %41, %20 ]
  %25 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %26 = mul <4 x i32> %21, %23
  %27 = mul <4 x i32> %22, %25
  %28 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %29 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %30 = mul <4 x i32> %26, %28
  %31 = mul <4 x i32> %27, %29
  %32 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %33 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %34 = mul <4 x i32> %30, %32
  %35 = mul <4 x i32> %31, %33
  %36 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %37 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %38 = mul <4 x i32> %34, %36
  %39 = mul <4 x i32> %35, %37
  %40 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %41 = add i32 %24, 4
  %42 = icmp eq i32 %41, %19
  br i1 %42, label %.loopexit2, label %20, !llvm.loop !9

; Exit blocks
.loopexit2:                                       ; preds = %20
  br label %43
*** IR Dump After Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

; Loop:
20:                                               ; preds = %20, %18
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %39, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %40, %20 ]
  %24 = phi i32 [ 0, %18 ], [ %41, %20 ]
  %25 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %26 = mul <4 x i32> %21, %23
  %27 = mul <4 x i32> %22, %25
  %28 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %29 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %30 = mul <4 x i32> %26, %28
  %31 = mul <4 x i32> %27, %29
  %32 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %33 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %34 = mul <4 x i32> %30, %32
  %35 = mul <4 x i32> %31, %33
  %36 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %37 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %38 = mul <4 x i32> %34, %36
  %39 = mul <4 x i32> %35, %37
  %40 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %41 = add i32 %24, 4
  %42 = icmp eq i32 %41, %19
  br i1 %42, label %.loopexit2, label %20, !llvm.loop !9

; Exit blocks
.loopexit2:                                       ; preds = %20
  br label %43
*** IR Dump Before Loop Strength Reduction (loop-reduce) ***
; Preheader:
18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

; Loop:
20:                                               ; preds = %20, %18
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %39, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %40, %20 ]
  %24 = phi i32 [ 0, %18 ], [ %41, %20 ]
  %25 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %26 = mul <4 x i32> %21, %23
  %27 = mul <4 x i32> %22, %25
  %28 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %29 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %30 = mul <4 x i32> %26, %28
  %31 = mul <4 x i32> %27, %29
  %32 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %33 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %34 = mul <4 x i32> %30, %32
  %35 = mul <4 x i32> %31, %33
  %36 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %37 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %38 = mul <4 x i32> %34, %36
  %39 = mul <4 x i32> %35, %37
  %40 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %41 = add i32 %24, 4
  %42 = icmp eq i32 %41, %19
  br i1 %42, label %.loopexit2, label %20, !llvm.loop !9

; Exit blocks
.loopexit2:                                       ; preds = %20
  br label %43
*** IR Dump After Loop Strength Reduction (loop-reduce) ***
; Preheader:
18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

; Loop:
20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

; Exit blocks
.loopexit2:                                       ; preds = %20
  br label %41
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %61 = call i32 @llvm.vector.reduce.mul.v4i32(<4 x i32> %60)
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %rdx.shuf = shufflevector <4 x i32> %60, <4 x i32> poison, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = mul <4 x i32> %60, %rdx.shuf
  %rdx.shuf5 = shufflevector <4 x i32> %bin.rdx, <4 x i32> poison, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx6 = mul <4 x i32> %bin.rdx, %rdx.shuf5
  %61 = extractelement <4 x i32> %bin.rdx6, i32 0
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %rdx.shuf = shufflevector <4 x i32> %60, <4 x i32> poison, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = mul <4 x i32> %60, %rdx.shuf
  %rdx.shuf5 = shufflevector <4 x i32> %bin.rdx, <4 x i32> poison, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx6 = mul <4 x i32> %bin.rdx, %rdx.shuf5
  %61 = extractelement <4 x i32> %bin.rdx6, i32 0
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %rdx.shuf = shufflevector <4 x i32> %60, <4 x i32> poison, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = mul <4 x i32> %60, %rdx.shuf
  %rdx.shuf5 = shufflevector <4 x i32> %bin.rdx, <4 x i32> poison, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx6 = mul <4 x i32> %bin.rdx, %rdx.shuf5
  %61 = extractelement <4 x i32> %bin.rdx6, i32 0
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump Before X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %rdx.shuf = shufflevector <4 x i32> %60, <4 x i32> poison, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = mul <4 x i32> %60, %rdx.shuf
  %rdx.shuf5 = shufflevector <4 x i32> %bin.rdx, <4 x i32> poison, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx6 = mul <4 x i32> %bin.rdx, %rdx.shuf5
  %61 = extractelement <4 x i32> %bin.rdx6, i32 0
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump After X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %rdx.shuf = shufflevector <4 x i32> %60, <4 x i32> poison, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = mul <4 x i32> %60, %rdx.shuf
  %rdx.shuf5 = shufflevector <4 x i32> %bin.rdx, <4 x i32> poison, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx6 = mul <4 x i32> %bin.rdx, %rdx.shuf5
  %61 = extractelement <4 x i32> %bin.rdx6, i32 0
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump Before Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %rdx.shuf = shufflevector <4 x i32> %60, <4 x i32> poison, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = mul <4 x i32> %60, %rdx.shuf
  %rdx.shuf5 = shufflevector <4 x i32> %bin.rdx, <4 x i32> poison, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx6 = mul <4 x i32> %bin.rdx, %rdx.shuf5
  %61 = extractelement <4 x i32> %bin.rdx6, i32 0
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump After Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %rdx.shuf = shufflevector <4 x i32> %60, <4 x i32> poison, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = mul <4 x i32> %60, %rdx.shuf
  %rdx.shuf5 = shufflevector <4 x i32> %bin.rdx, <4 x i32> poison, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx6 = mul <4 x i32> %bin.rdx, %rdx.shuf5
  %61 = extractelement <4 x i32> %bin.rdx6, i32 0
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %.loopexit2, label %20, !llvm.loop !9

.loopexit2:                                       ; preds = %20
  br label %41

41:                                               ; preds = %.loopexit2, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %.loopexit2 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %.loopexit2 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %.loopexit2 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %.loopexit2 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %.loopexit2 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %.loopexit1, label %48, !llvm.loop !12

.loopexit1:                                       ; preds = %48
  br label %57

57:                                               ; preds = %.loopexit1, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %.loopexit1 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %.loopexit1 ]
  %60 = mul <4 x i32> %59, %58
  %rdx.shuf = shufflevector <4 x i32> %60, <4 x i32> poison, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = mul <4 x i32> %60, %rdx.shuf
  %rdx.shuf5 = shufflevector <4 x i32> %bin.rdx, <4 x i32> poison, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx6 = mul <4 x i32> %bin.rdx, %rdx.shuf5
  %61 = extractelement <4 x i32> %bin.rdx6, i32 0
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %.loopexit, label %67, !llvm.loop !14

.loopexit:                                        ; preds = %67
  br label %73

73:                                               ; preds = %.loopexit, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %.loopexit ]
  %75 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #4
  ret i32 0
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %41, label %20, !llvm.loop !9

41:                                               ; preds = %20, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %20 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %20 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %20 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %20 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %20 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %57, label %48, !llvm.loop !12

57:                                               ; preds = %48, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %48 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %48 ]
  %60 = mul <4 x i32> %59, %58
  %rdx.shuf = shufflevector <4 x i32> %60, <4 x i32> poison, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = mul <4 x i32> %60, %rdx.shuf
  %rdx.shuf5 = shufflevector <4 x i32> %bin.rdx, <4 x i32> poison, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx6 = mul <4 x i32> %bin.rdx, %rdx.shuf5
  %61 = extractelement <4 x i32> %bin.rdx6, i32 0
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %73, label %67, !llvm.loop !14

73:                                               ; preds = %67, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %67 ]
  %75 = bitcast i32* %1 to i8*
  %76 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %75) #4
  ret i32 0
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %41, label %20, !llvm.loop !9

41:                                               ; preds = %20, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %20 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %20 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %20 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %20 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %20 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %57, label %48, !llvm.loop !12

57:                                               ; preds = %48, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %48 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %48 ]
  %60 = mul <4 x i32> %59, %58
  %rdx.shuf = shufflevector <4 x i32> %60, <4 x i32> poison, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = mul <4 x i32> %60, %rdx.shuf
  %rdx.shuf5 = shufflevector <4 x i32> %bin.rdx, <4 x i32> poison, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx6 = mul <4 x i32> %bin.rdx, %rdx.shuf5
  %61 = extractelement <4 x i32> %bin.rdx6, i32 0
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %73, label %67, !llvm.loop !14

73:                                               ; preds = %67, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %67 ]
  %75 = bitcast i32* %1 to i8*
  %76 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %75) #4
  ret i32 0
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %41, label %20, !llvm.loop !9

41:                                               ; preds = %20, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %20 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %20 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %20 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %20 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %20 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %57, label %48, !llvm.loop !12

57:                                               ; preds = %48, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %48 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %48 ]
  %60 = mul <4 x i32> %59, %58
  %rdx.shuf = shufflevector <4 x i32> %60, <4 x i32> poison, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = mul <4 x i32> %60, %rdx.shuf
  %rdx.shuf5 = shufflevector <4 x i32> %bin.rdx, <4 x i32> poison, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx6 = mul <4 x i32> %bin.rdx, %rdx.shuf5
  %61 = extractelement <4 x i32> %bin.rdx6, i32 0
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %73, label %67, !llvm.loop !14

73:                                               ; preds = %67, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %67 ]
  %75 = bitcast i32* %1 to i8*
  %76 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %75) #4
  ret i32 0
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %41, label %20, !llvm.loop !9

41:                                               ; preds = %20, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %20 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %20 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %20 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %20 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %20 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %57, label %48, !llvm.loop !12

57:                                               ; preds = %48, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %48 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %48 ]
  %60 = mul <4 x i32> %59, %58
  %rdx.shuf = shufflevector <4 x i32> %60, <4 x i32> poison, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = mul <4 x i32> %60, %rdx.shuf
  %rdx.shuf5 = shufflevector <4 x i32> %bin.rdx, <4 x i32> poison, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx6 = mul <4 x i32> %bin.rdx, %rdx.shuf5
  %61 = extractelement <4 x i32> %bin.rdx6, i32 0
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %73, label %67, !llvm.loop !14

73:                                               ; preds = %67, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %67 ]
  %75 = bitcast i32* %1 to i8*
  %76 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %75) #4
  ret i32 0
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %41, label %20, !llvm.loop !9

41:                                               ; preds = %20, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %20 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %20 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %20 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %20 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %20 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %57, label %48, !llvm.loop !12

57:                                               ; preds = %48, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %48 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %48 ]
  %60 = mul <4 x i32> %59, %58
  %rdx.shuf = shufflevector <4 x i32> %60, <4 x i32> poison, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = mul <4 x i32> %60, %rdx.shuf
  %rdx.shuf5 = shufflevector <4 x i32> %bin.rdx, <4 x i32> poison, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx6 = mul <4 x i32> %bin.rdx, %rdx.shuf5
  %61 = extractelement <4 x i32> %bin.rdx6, i32 0
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %73, label %67, !llvm.loop !14

73:                                               ; preds = %67, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %67 ]
  %75 = bitcast i32* %1 to i8*
  %76 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %75) #4
  ret i32 0
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %41, label %20, !llvm.loop !9

41:                                               ; preds = %20, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %20 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %20 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %20 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %20 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %20 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %57, label %48, !llvm.loop !12

57:                                               ; preds = %48, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %48 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %48 ]
  %60 = mul <4 x i32> %59, %58
  %rdx.shuf = shufflevector <4 x i32> %60, <4 x i32> poison, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = mul <4 x i32> %60, %rdx.shuf
  %rdx.shuf5 = shufflevector <4 x i32> %bin.rdx, <4 x i32> poison, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx6 = mul <4 x i32> %bin.rdx, %rdx.shuf5
  %61 = extractelement <4 x i32> %bin.rdx6, i32 0
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %73, label %67, !llvm.loop !14

73:                                               ; preds = %67, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %67 ]
  %75 = bitcast i32* %1 to i8*
  %76 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %75) #4
  ret i32 0
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: nofree nounwind uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = tail call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef 1000)
  %3 = bitcast i32* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #4
  %4 = call i32 (i8*, ...) @__isoc99_scanf(i8* noundef getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32* noundef nonnull %1)
  %5 = load i32, i32* %1, align 4, !tbaa !5
  %6 = icmp slt i32 %5, 2
  br i1 %6, label %73, label %7

7:                                                ; preds = %0
  %8 = add i32 %5, -1
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %63, label %10

10:                                               ; preds = %7
  %11 = and i32 %8, -8
  %12 = or i32 %11, 2
  %13 = add i32 %11, -8
  %14 = lshr exact i32 %13, 3
  %15 = add nuw nsw i32 %14, 1
  %16 = and i32 %15, 3
  %17 = icmp ult i32 %13, 24
  br i1 %17, label %41, label %18

18:                                               ; preds = %10
  %19 = and i32 %15, 1073741820
  br label %20

20:                                               ; preds = %20, %18
  %lsr.iv3 = phi i32 [ %lsr.iv.next4, %20 ], [ %19, %18 ]
  %21 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %37, %20 ]
  %22 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %18 ], [ %38, %20 ]
  %23 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %18 ], [ %39, %20 ]
  %24 = add <4 x i32> %23, <i32 4, i32 4, i32 4, i32 4>
  %25 = mul <4 x i32> %21, %23
  %26 = mul <4 x i32> %22, %24
  %27 = add <4 x i32> %23, <i32 8, i32 8, i32 8, i32 8>
  %28 = add <4 x i32> %23, <i32 12, i32 12, i32 12, i32 12>
  %29 = mul <4 x i32> %25, %27
  %30 = mul <4 x i32> %26, %28
  %31 = add <4 x i32> %23, <i32 16, i32 16, i32 16, i32 16>
  %32 = add <4 x i32> %23, <i32 20, i32 20, i32 20, i32 20>
  %33 = mul <4 x i32> %29, %31
  %34 = mul <4 x i32> %30, %32
  %35 = add <4 x i32> %23, <i32 24, i32 24, i32 24, i32 24>
  %36 = add <4 x i32> %23, <i32 28, i32 28, i32 28, i32 28>
  %37 = mul <4 x i32> %33, %35
  %38 = mul <4 x i32> %34, %36
  %39 = add <4 x i32> %23, <i32 32, i32 32, i32 32, i32 32>
  %lsr.iv.next4 = add i32 %lsr.iv3, -4
  %40 = icmp eq i32 %lsr.iv.next4, 0
  br i1 %40, label %41, label %20, !llvm.loop !9

41:                                               ; preds = %20, %10
  %42 = phi <4 x i32> [ undef, %10 ], [ %37, %20 ]
  %43 = phi <4 x i32> [ undef, %10 ], [ %38, %20 ]
  %44 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %37, %20 ]
  %45 = phi <4 x i32> [ <i32 1, i32 1, i32 1, i32 1>, %10 ], [ %38, %20 ]
  %46 = phi <4 x i32> [ <i32 2, i32 3, i32 4, i32 5>, %10 ], [ %39, %20 ]
  %47 = icmp eq i32 %16, 0
  br i1 %47, label %57, label %.preheader

.preheader:                                       ; preds = %41
  br label %48

48:                                               ; preds = %.preheader, %48
  %lsr.iv = phi i32 [ %16, %.preheader ], [ %lsr.iv.next, %48 ]
  %49 = phi <4 x i32> [ %53, %48 ], [ %44, %.preheader ]
  %50 = phi <4 x i32> [ %54, %48 ], [ %45, %.preheader ]
  %51 = phi <4 x i32> [ %55, %48 ], [ %46, %.preheader ]
  %52 = add <4 x i32> %51, <i32 4, i32 4, i32 4, i32 4>
  %53 = mul <4 x i32> %49, %51
  %54 = mul <4 x i32> %50, %52
  %55 = add <4 x i32> %51, <i32 8, i32 8, i32 8, i32 8>
  %lsr.iv.next = add nsw i32 %lsr.iv, -1
  %56 = icmp eq i32 %lsr.iv.next, 0
  br i1 %56, label %57, label %48, !llvm.loop !12

57:                                               ; preds = %48, %41
  %58 = phi <4 x i32> [ %42, %41 ], [ %53, %48 ]
  %59 = phi <4 x i32> [ %43, %41 ], [ %54, %48 ]
  %60 = mul <4 x i32> %59, %58
  %rdx.shuf = shufflevector <4 x i32> %60, <4 x i32> poison, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %bin.rdx = mul <4 x i32> %60, %rdx.shuf
  %rdx.shuf5 = shufflevector <4 x i32> %bin.rdx, <4 x i32> poison, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %bin.rdx6 = mul <4 x i32> %bin.rdx, %rdx.shuf5
  %61 = extractelement <4 x i32> %bin.rdx6, i32 0
  %62 = icmp eq i32 %8, %11
  br i1 %62, label %73, label %63

63:                                               ; preds = %57, %7
  %64 = phi i32 [ 1, %7 ], [ %61, %57 ]
  %65 = phi i32 [ 2, %7 ], [ %12, %57 ]
  %66 = add i32 %5, 1
  br label %67

67:                                               ; preds = %67, %63
  %68 = phi i32 [ %70, %67 ], [ %64, %63 ]
  %69 = phi i32 [ %71, %67 ], [ %65, %63 ]
  %70 = mul nsw i32 %68, %69
  %71 = add i32 %69, 1
  %72 = icmp eq i32 %66, %71
  br i1 %72, label %73, label %67, !llvm.loop !14

73:                                               ; preds = %67, %57, %0
  %74 = phi i32 [ 1, %0 ], [ %61, %57 ], [ %70, %67 ]
  %75 = bitcast i32* %1 to i8*
  %76 = call i32 (i8*, ...) @printf(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 noundef %74)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %75) #4
  ret i32 0
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %44:gr32 = COPY $eax
  LIFETIME_START %stack.0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)


bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %124:gr32 = COPY $eax
  LIFETIME_END %stack.0
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %44:gr32 = COPY $eax
  LIFETIME_START %stack.0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)


bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %124:gr32 = COPY $eax
  LIFETIME_END %stack.0
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %44:gr32 = COPY $eax
  LIFETIME_START %stack.0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)


bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %124:gr32 = COPY $eax
  LIFETIME_END %stack.0
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %44:gr32 = COPY $eax
  LIFETIME_START %stack.0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)


bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %124:gr32 = COPY $eax
  LIFETIME_END %stack.0
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %44:gr32 = COPY $eax
  LIFETIME_START %stack.0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)


bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %124:gr32 = COPY $eax
  LIFETIME_END %stack.0
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %44:gr32 = COPY $eax
  LIFETIME_START %stack.0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)


bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %124:gr32 = COPY $eax
  LIFETIME_END %stack.0
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %44:gr32 = COPY $eax
  LIFETIME_START %stack.0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)


bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %124:gr32 = COPY $eax
  LIFETIME_END %stack.0
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %44:gr32 = COPY $eax
  LIFETIME_START %stack.0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)


bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %124:gr32 = COPY $eax
  LIFETIME_END %stack.0
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %44:gr32 = COPY $eax
  LIFETIME_START %stack.0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)


bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %124:gr32 = COPY $eax
  LIFETIME_END %stack.0
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %44:gr32 = COPY $eax
  LIFETIME_START %stack.0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)


bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %124:gr32 = COPY $eax
  LIFETIME_END %stack.0
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  %40:gr64 = MOV32ri64 @.str
48B	  %41:gr32 = MOV32r0 implicit-def dead $eflags
64B	  %42:gr8 = COPY %41.sub_8bit:gr32
80B	  %43:gr32 = MOV32ri 1000
96B	  $rdi = COPY %40:gr64
112B	  $esi = COPY %43:gr32
128B	  $al = COPY %42:gr8
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  %44:gr32 = COPY $eax
192B	  LIFETIME_START %stack.0
208B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  %45:gr64 = MOV32ri64 @.str.1
240B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
256B	  $rdi = COPY %45:gr64
272B	  $rsi = COPY %46:gr64
288B	  $al = COPY %42:gr8
304B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
320B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
336B	  %47:gr32 = COPY $eax
352B	  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
368B	  %39:gr32 = MOV32ri 1
384B	  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
400B	  JCC_1 %bb.11, 12, implicit $eflags
416B	  JMP_1 %bb.1

432B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

448B	  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
464B	  %50:gr32 = MOV32ri 2
480B	  %49:gr32 = MOV32ri 1
496B	  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
512B	  JCC_1 %bb.9, 2, implicit $eflags
528B	  JMP_1 %bb.2

544B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

560B	  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
576B	  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
592B	  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
608B	  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
624B	  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
656B	  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
672B	  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
688B	  %52:vr128 = IMPLICIT_DEF
704B	  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
720B	  JCC_1 %bb.5, 2, implicit $eflags
736B	  JMP_1 %bb.3

752B	bb.3 (%ir-block.18):
	; predecessors: %bb.2
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

768B	  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
784B	  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
800B	  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

816B	bb.4 (%ir-block.20):
	; predecessors: %bb.3, %bb.4
	  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

832B	  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
848B	  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
864B	  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
880B	  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
896B	  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
912B	  %61:vr128 = PSHUFDri %10:vr128, -11
928B	  %62:vr128 = PSHUFDri %8:vr128, -11
944B	  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
960B	  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
976B	  %65:vr128 = PSHUFDri %9:vr128, -11
992B	  %66:vr128 = PSHUFDri %60:vr128, -11
1008B	  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
1024B	  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
1040B	  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1056B	  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1072B	  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
1088B	  %72:vr128 = PSHUFDri %69:vr128, -11
1104B	  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
1120B	  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
1136B	  %75:vr128 = PSHUFDri %70:vr128, -11
1152B	  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
1168B	  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1184B	  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1200B	  %79:vr128 = PSHUFDri %77:vr128, -11
1216B	  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
1232B	  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
1248B	  %82:vr128 = PSHUFDri %78:vr128, -11
1264B	  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
1280B	  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
1296B	  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1312B	  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1328B	  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
1344B	  %88:vr128 = PSHUFDri killed %87:vr128, -24
1360B	  %89:vr128 = PSHUFDri %85:vr128, -11
1376B	  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
1392B	  %91:vr128 = PSHUFDri killed %90:vr128, -24
1408B	  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
1424B	  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
1440B	  %93:vr128 = PSHUFDri killed %92:vr128, -24
1456B	  %94:vr128 = PSHUFDri %86:vr128, -11
1472B	  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
1488B	  %96:vr128 = PSHUFDri killed %95:vr128, -24
1504B	  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
1520B	  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1536B	  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
1552B	  JCC_1 %bb.4, 5, implicit $eflags
1568B	  JMP_1 %bb.5

1584B	bb.5 (%ir-block.41):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

1600B	  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
1616B	  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
1632B	  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
1648B	  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
1664B	  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
1680B	  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
1696B	  JCC_1 %bb.8, 4, implicit $eflags
1712B	  JMP_1 %bb.6

1728B	bb.6..preheader:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)


1744B	bb.7 (%ir-block.48):
	; predecessors: %bb.6, %bb.7
	  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

1760B	  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
1776B	  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
1792B	  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
1808B	  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
1824B	  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1840B	  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
1856B	  %99:vr128 = PSHUFDri killed %98:vr128, -24
1872B	  %100:vr128 = PSHUFDri %23:vr128, -11
1888B	  %101:vr128 = PSHUFDri %21:vr128, -11
1904B	  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
1920B	  %103:vr128 = PSHUFDri killed %102:vr128, -24
1936B	  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
1952B	  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
1968B	  %105:vr128 = PSHUFDri killed %104:vr128, -24
1984B	  %106:vr128 = PSHUFDri %22:vr128, -11
2000B	  %107:vr128 = PSHUFDri %97:vr128, -11
2016B	  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
2032B	  %109:vr128 = PSHUFDri killed %108:vr128, -24
2048B	  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
2064B	  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
2080B	  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
2096B	  JCC_1 %bb.7, 5, implicit $eflags
2112B	  JMP_1 %bb.8

2128B	bb.8 (%ir-block.57):
	; predecessors: %bb.5, %bb.7
	  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

2144B	  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
2160B	  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
2176B	  %110:vr128 = PSHUFDri %28:vr128, -11
2192B	  %111:vr128 = PSHUFDri %29:vr128, -11
2208B	  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
2224B	  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
2240B	  %114:vr128 = PSHUFDri %113:vr128, -18
2256B	  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
2272B	  %116:vr128 = PSHUFDri %112:vr128, -86
2288B	  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
2304B	  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
2320B	  %30:gr32 = MOVPDI2DIrr killed %118:vr128
2336B	  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
2352B	  JCC_1 %bb.11, 4, implicit $eflags
2368B	  JMP_1 %bb.9

2384B	bb.9 (%ir-block.63):
	; predecessors: %bb.1, %bb.8
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

2400B	  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
2416B	  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
2432B	  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

2448B	bb.10 (%ir-block.67):
	; predecessors: %bb.9, %bb.10
	  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

2464B	  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
2480B	  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
2496B	  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
2512B	  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
2528B	  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
2544B	  JCC_1 %bb.10, 5, implicit $eflags
2560B	  JMP_1 %bb.11

2576B	bb.11 (%ir-block.73):
	; predecessors: %bb.0, %bb.8, %bb.10

2592B	  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
2608B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2624B	  %121:gr64 = MOV32ri64 @.str
2640B	  %122:gr32 = MOV32r0 implicit-def dead $eflags
2656B	  %123:gr8 = COPY %122.sub_8bit:gr32
2672B	  $rdi = COPY %121:gr64
2688B	  $esi = COPY %38:gr32
2704B	  $al = COPY %123:gr8
2720B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
2736B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2752B	  %124:gr32 = COPY $eax
2768B	  LIFETIME_END %stack.0
2784B	  $eax = COPY %122:gr32
2800B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  %40:gr64 = MOV32ri64 @.str
48B	  %41:gr32 = MOV32r0 implicit-def dead $eflags
64B	  %42:gr8 = COPY %41.sub_8bit:gr32
80B	  %43:gr32 = MOV32ri 1000
96B	  $rdi = COPY %40:gr64
112B	  $esi = COPY %43:gr32
128B	  $al = COPY %42:gr8
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  %44:gr32 = COPY $eax
192B	  LIFETIME_START %stack.0
208B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  %45:gr64 = MOV32ri64 @.str.1
240B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
256B	  $rdi = COPY %45:gr64
272B	  $rsi = COPY %46:gr64
288B	  $al = COPY %42:gr8
304B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
320B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
336B	  %47:gr32 = COPY $eax
352B	  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
368B	  %39:gr32 = MOV32ri 1
384B	  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
400B	  JCC_1 %bb.11, 12, implicit $eflags
416B	  JMP_1 %bb.1

432B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

448B	  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
464B	  %50:gr32 = MOV32ri 2
480B	  %49:gr32 = MOV32ri 1
496B	  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
512B	  JCC_1 %bb.9, 2, implicit $eflags
528B	  JMP_1 %bb.2

544B	bb.2 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

560B	  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
576B	  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
592B	  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
608B	  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
624B	  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
640B	  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
656B	  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
672B	  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
688B	  %52:vr128 = IMPLICIT_DEF
704B	  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
720B	  JCC_1 %bb.5, 2, implicit $eflags
736B	  JMP_1 %bb.3

752B	bb.3 (%ir-block.18):
	; predecessors: %bb.2
	  successors: %bb.4(0x80000000); %bb.4(100.00%)

768B	  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
784B	  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
800B	  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

816B	bb.4 (%ir-block.20):
	; predecessors: %bb.3, %bb.4
	  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

832B	  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
848B	  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
864B	  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
880B	  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
896B	  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
912B	  %61:vr128 = PSHUFDri %10:vr128, -11
928B	  %62:vr128 = PSHUFDri %8:vr128, -11
944B	  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
960B	  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
976B	  %65:vr128 = PSHUFDri %9:vr128, -11
992B	  %66:vr128 = PSHUFDri %60:vr128, -11
1008B	  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
1024B	  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
1040B	  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1056B	  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1072B	  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
1088B	  %72:vr128 = PSHUFDri %69:vr128, -11
1104B	  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
1120B	  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
1136B	  %75:vr128 = PSHUFDri %70:vr128, -11
1152B	  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
1168B	  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1184B	  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1200B	  %79:vr128 = PSHUFDri %77:vr128, -11
1216B	  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
1232B	  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
1248B	  %82:vr128 = PSHUFDri %78:vr128, -11
1264B	  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
1280B	  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
1296B	  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1312B	  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1328B	  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
1344B	  %88:vr128 = PSHUFDri killed %87:vr128, -24
1360B	  %89:vr128 = PSHUFDri %85:vr128, -11
1376B	  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
1392B	  %91:vr128 = PSHUFDri killed %90:vr128, -24
1408B	  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
1424B	  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
1440B	  %93:vr128 = PSHUFDri killed %92:vr128, -24
1456B	  %94:vr128 = PSHUFDri %86:vr128, -11
1472B	  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
1488B	  %96:vr128 = PSHUFDri killed %95:vr128, -24
1504B	  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
1520B	  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1536B	  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
1552B	  JCC_1 %bb.4, 5, implicit $eflags
1568B	  JMP_1 %bb.5

1584B	bb.5 (%ir-block.41):
	; predecessors: %bb.2, %bb.4
	  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

1600B	  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
1616B	  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
1632B	  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
1648B	  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
1664B	  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
1680B	  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
1696B	  JCC_1 %bb.8, 4, implicit $eflags
1712B	  JMP_1 %bb.6

1728B	bb.6..preheader:
	; predecessors: %bb.5
	  successors: %bb.7(0x80000000); %bb.7(100.00%)


1744B	bb.7 (%ir-block.48):
	; predecessors: %bb.6, %bb.7
	  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

1760B	  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
1776B	  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
1792B	  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
1808B	  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
1824B	  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1840B	  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
1856B	  %99:vr128 = PSHUFDri killed %98:vr128, -24
1872B	  %100:vr128 = PSHUFDri %23:vr128, -11
1888B	  %101:vr128 = PSHUFDri %21:vr128, -11
1904B	  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
1920B	  %103:vr128 = PSHUFDri killed %102:vr128, -24
1936B	  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
1952B	  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
1968B	  %105:vr128 = PSHUFDri killed %104:vr128, -24
1984B	  %106:vr128 = PSHUFDri %22:vr128, -11
2000B	  %107:vr128 = PSHUFDri %97:vr128, -11
2016B	  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
2032B	  %109:vr128 = PSHUFDri killed %108:vr128, -24
2048B	  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
2064B	  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
2080B	  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
2096B	  JCC_1 %bb.7, 5, implicit $eflags
2112B	  JMP_1 %bb.8

2128B	bb.8 (%ir-block.57):
	; predecessors: %bb.5, %bb.7
	  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

2144B	  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
2160B	  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
2176B	  %110:vr128 = PSHUFDri %28:vr128, -11
2192B	  %111:vr128 = PSHUFDri %29:vr128, -11
2208B	  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
2224B	  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
2240B	  %114:vr128 = PSHUFDri %113:vr128, -18
2256B	  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
2272B	  %116:vr128 = PSHUFDri %112:vr128, -86
2288B	  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
2304B	  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
2320B	  %30:gr32 = MOVPDI2DIrr killed %118:vr128
2336B	  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
2352B	  JCC_1 %bb.11, 4, implicit $eflags
2368B	  JMP_1 %bb.9

2384B	bb.9 (%ir-block.63):
	; predecessors: %bb.1, %bb.8
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

2400B	  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
2416B	  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
2432B	  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

2448B	bb.10 (%ir-block.67):
	; predecessors: %bb.9, %bb.10
	  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

2464B	  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
2480B	  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
2496B	  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
2512B	  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
2528B	  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
2544B	  JCC_1 %bb.10, 5, implicit $eflags
2560B	  JMP_1 %bb.11

2576B	bb.11 (%ir-block.73):
	; predecessors: %bb.0, %bb.8, %bb.10

2592B	  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
2608B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2624B	  %121:gr64 = MOV32ri64 @.str
2640B	  %122:gr32 = MOV32r0 implicit-def dead $eflags
2656B	  %123:gr8 = COPY %122.sub_8bit:gr32
2672B	  $rdi = COPY %121:gr64
2688B	  $esi = COPY %38:gr32
2704B	  $al = COPY %123:gr8
2720B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
2736B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
2752B	  %124:gr32 = COPY $eax
2768B	  LIFETIME_END %stack.0
2784B	  $eax = COPY %122:gr32
2800B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %44:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)


bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %124:gr32 = COPY $eax
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %44:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)


bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %124:gr32 = COPY $eax
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %44:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)


bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %124:gr32 = COPY $eax
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %44:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %47:gr32 = COPY $eax
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)


bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %124:gr32 = COPY $eax
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)


bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)


bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)


bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)


bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)


bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)


bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)


bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %70:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %78:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %86:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrm %10:vr128(tied-def 0), $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)


bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrm %23:vr128(tied-def 0), $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.9(0x40000000), %bb.2(0x40000000); %bb.9(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.9, 2, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.5(0x40000000), %bb.3(0x40000000); %bb.5(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.5, 2, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.2, %bb.4
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.2, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.2, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.2, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.2, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.2, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.9(0x40000000); %bb.11(50.00%), %bb.9(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags
  JMP_1 %bb.9

bb.9 (%ir-block.63):
; predecessors: %bb.1, %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.1, %30:gr32, %bb.8
  %32:gr32 = PHI %50:gr32, %bb.1, %3:gr32, %bb.8
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  %48:gr32 = SUB32ri8 %0:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  %51:gr32 = SUB32ri8 %1:gr32(tied-def 0), 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  %57:gr32 = SUB32ri8 %55:gr32(tied-def 0), 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  %119:gr32 = SUB32rr %1:gr32(tied-def 0), %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  %120:gr32 = SUB32rr %33:gr32(tied-def 0), %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %52:vr128 = IMPLICIT_DEF
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI undef %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI undef %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.11(0x40000000), %bb.1(0x40000000); %bb.11(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.11, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.12(0x40000000), %bb.2(0x40000000); %bb.12(50.00%), %bb.2(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.2, 3, implicit $eflags

bb.12:
; predecessors: %bb.1
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.9

bb.2 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.13(0x40000000), %bb.3(0x40000000); %bb.13(50.00%), %bb.3(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.13:
; predecessors: %bb.2
  successors: %bb.5(0x80000000); %bb.5(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  JMP_1 %bb.5

bb.3 (%ir-block.18):
; predecessors: %bb.2
  successors: %bb.4(0x80000000); %bb.4(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.4 (%ir-block.20):
; predecessors: %bb.3, %bb.4
  successors: %bb.5(0x04000000), %bb.4(0x7c000000); %bb.5(3.12%), %bb.4(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.3, %14:gr32, %bb.4
  %8:vr128 = PHI %58:vr128, %bb.3, %11:vr128, %bb.4
  %9:vr128 = PHI %58:vr128, %bb.3, %12:vr128, %bb.4
  %10:vr128 = PHI %59:vr128, %bb.3, %13:vr128, %bb.4
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.4, 5, implicit $eflags
  JMP_1 %bb.5

bb.5 (%ir-block.41):
; predecessors: %bb.4, %bb.13
  successors: %bb.8(0x30000000), %bb.6(0x50000000); %bb.8(37.50%), %bb.6(62.50%)

  %15:vr128 = PHI undef %52:vr128, %bb.13, %11:vr128, %bb.4
  %16:vr128 = PHI undef %52:vr128, %bb.13, %12:vr128, %bb.4
  %17:vr128 = PHI %53:vr128, %bb.13, %11:vr128, %bb.4
  %18:vr128 = PHI %53:vr128, %bb.13, %12:vr128, %bb.4
  %19:vr128 = PHI %54:vr128, %bb.13, %13:vr128, %bb.4
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.8, 4, implicit $eflags
  JMP_1 %bb.6

bb.6..preheader:
; predecessors: %bb.5
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.7 (%ir-block.48):
; predecessors: %bb.6, %bb.7
  successors: %bb.8(0x04000000), %bb.7(0x7c000000); %bb.8(3.12%), %bb.7(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.6, %27:gr32, %bb.7
  %21:vr128 = PHI %17:vr128, %bb.6, %24:vr128, %bb.7
  %22:vr128 = PHI %18:vr128, %bb.6, %25:vr128, %bb.7
  %23:vr128 = PHI %19:vr128, %bb.6, %26:vr128, %bb.7
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.7, 5, implicit $eflags
  JMP_1 %bb.8

bb.8 (%ir-block.57):
; predecessors: %bb.5, %bb.7
  successors: %bb.11(0x40000000), %bb.14(0x40000000); %bb.11(50.00%), %bb.14(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.5, %24:vr128, %bb.7
  %29:vr128 = PHI %16:vr128, %bb.5, %25:vr128, %bb.7
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 4, implicit $eflags

bb.14:
; predecessors: %bb.8
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.9 (%ir-block.63):
; predecessors: %bb.12, %bb.14
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.12, %30:gr32, %bb.14
  %32:gr32 = PHI %50:gr32, %bb.12, %3:gr32, %bb.14
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.10 (%ir-block.67):
; predecessors: %bb.9, %bb.10
  successors: %bb.11(0x04000000), %bb.10(0x7c000000); %bb.11(3.12%), %bb.10(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.9, %36:gr32, %bb.10
  %35:gr32 = PHI %32:gr32, %bb.9, %37:gr32, %bb.10
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.10, 5, implicit $eflags
  JMP_1 %bb.11

bb.11 (%ir-block.73):
; predecessors: %bb.0, %bb.8, %bb.10

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.8, %36:gr32, %bb.10
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.5, %14:gr32, %bb.6
  %8:vr128 = PHI %58:vr128, %bb.5, %11:vr128, %bb.6
  %9:vr128 = PHI %58:vr128, %bb.5, %12:vr128, %bb.6
  %10:vr128 = PHI %59:vr128, %bb.5, %13:vr128, %bb.6
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

  %15:vr128 = PHI undef %52:vr128, %bb.4, %11:vr128, %bb.6
  %16:vr128 = PHI undef %52:vr128, %bb.4, %12:vr128, %bb.6
  %17:vr128 = PHI %53:vr128, %bb.4, %11:vr128, %bb.6
  %18:vr128 = PHI %53:vr128, %bb.4, %12:vr128, %bb.6
  %19:vr128 = PHI %54:vr128, %bb.4, %13:vr128, %bb.6
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.8, %27:gr32, %bb.9
  %21:vr128 = PHI %17:vr128, %bb.8, %24:vr128, %bb.9
  %22:vr128 = PHI %18:vr128, %bb.8, %25:vr128, %bb.9
  %23:vr128 = PHI %19:vr128, %bb.8, %26:vr128, %bb.9
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.7, %24:vr128, %bb.9
  %29:vr128 = PHI %16:vr128, %bb.7, %25:vr128, %bb.9
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.2, %30:gr32, %bb.11
  %32:gr32 = PHI %50:gr32, %bb.2, %3:gr32, %bb.11
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.12, %36:gr32, %bb.13
  %35:gr32 = PHI %32:gr32, %bb.12, %37:gr32, %bb.13
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.10, %bb.13

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.10, %36:gr32, %bb.13
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY %40:gr64
  $esi = COPY %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %45:gr64
  $rsi = COPY %46:gr64
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %6:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.5, %14:gr32, %bb.6
  %8:vr128 = PHI %58:vr128, %bb.5, %11:vr128, %bb.6
  %9:vr128 = PHI %58:vr128, %bb.5, %12:vr128, %bb.6
  %10:vr128 = PHI %59:vr128, %bb.5, %13:vr128, %bb.6
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr %9:vr128(tied-def 0), %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri %69:vr128, -11
  %73:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri %70:vr128, -11
  %76:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr %71:vr128(tied-def 0), %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr %74:vr128(tied-def 0), %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri %85:vr128, -11
  %90:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri %86:vr128, -11
  %95:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

  %15:vr128 = PHI undef %52:vr128, %bb.4, %11:vr128, %bb.6
  %16:vr128 = PHI undef %52:vr128, %bb.4, %12:vr128, %bb.6
  %17:vr128 = PHI %53:vr128, %bb.4, %11:vr128, %bb.6
  %18:vr128 = PHI %53:vr128, %bb.4, %12:vr128, %bb.6
  %19:vr128 = PHI %54:vr128, %bb.4, %13:vr128, %bb.6
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.8, %27:gr32, %bb.9
  %21:vr128 = PHI %17:vr128, %bb.8, %24:vr128, %bb.9
  %22:vr128 = PHI %18:vr128, %bb.8, %25:vr128, %bb.9
  %23:vr128 = PHI %19:vr128, %bb.8, %26:vr128, %bb.9
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri %21:vr128, -11
  %102:vr128 = PMULUDQrr %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri %22:vr128, -11
  %107:vr128 = PSHUFDri %97:vr128, -11
  %108:vr128 = PMULUDQrr %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.7, %24:vr128, %bb.9
  %29:vr128 = PHI %16:vr128, %bb.7, %25:vr128, %bb.9
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr %29:vr128(tied-def 0), %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %3:gr32 = ADD32ri8_DB %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.2, %30:gr32, %bb.11
  %32:gr32 = PHI %50:gr32, %bb.2, %3:gr32, %bb.11
  %33:gr32 = ADD32ri8 %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.12, %36:gr32, %bb.13
  %35:gr32 = PHI %32:gr32, %bb.12, %37:gr32, %bb.13
  %36:gr32 = nsw IMUL32rr %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.10, %bb.13

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.10, %36:gr32, %bb.13
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY %121:gr64
  $esi = COPY %38:gr32
  $al = COPY %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY %122:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY killed %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY killed %40:gr64
  $esi = COPY killed %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY killed %45:gr64
  $rsi = COPY killed %46:gr64
  $al = COPY killed %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 killed %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %6:gr32 = AND32ri8 killed %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.5, %14:gr32, %bb.6
  %8:vr128 = PHI %58:vr128, %bb.5, %11:vr128, %bb.6
  %9:vr128 = PHI %58:vr128, %bb.5, %12:vr128, %bb.6
  %10:vr128 = PHI %59:vr128, %bb.5, %13:vr128, %bb.6
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr killed %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr killed %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr killed %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr killed %9:vr128(tied-def 0), killed %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr killed %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri killed %69:vr128, -11
  %73:vr128 = PMULUDQrr killed %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr killed %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri killed %70:vr128, -11
  %76:vr128 = PMULUDQrr killed %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr killed %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr killed %71:vr128(tied-def 0), killed %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr killed %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr killed %74:vr128(tied-def 0), killed %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr killed %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri killed %85:vr128, -11
  %90:vr128 = PMULUDQrr killed %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr killed %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr killed %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri killed %86:vr128, -11
  %95:vr128 = PMULUDQrr killed %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr killed %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr killed %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

  %15:vr128 = PHI undef %52:vr128, %bb.4, %11:vr128, %bb.6
  %16:vr128 = PHI undef %52:vr128, %bb.4, %12:vr128, %bb.6
  %17:vr128 = PHI %53:vr128, %bb.4, %11:vr128, %bb.6
  %18:vr128 = PHI %53:vr128, %bb.4, %12:vr128, %bb.6
  %19:vr128 = PHI %54:vr128, %bb.4, %13:vr128, %bb.6
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.8, %27:gr32, %bb.9
  %21:vr128 = PHI %17:vr128, %bb.8, %24:vr128, %bb.9
  %22:vr128 = PHI %18:vr128, %bb.8, %25:vr128, %bb.9
  %23:vr128 = PHI %19:vr128, %bb.8, %26:vr128, %bb.9
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri killed %21:vr128, -11
  %102:vr128 = PMULUDQrr killed %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr killed %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri killed %22:vr128, -11
  %107:vr128 = PSHUFDri killed %97:vr128, -11
  %108:vr128 = PMULUDQrr killed %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr killed %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr killed %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 killed %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.7, %24:vr128, %bb.9
  %29:vr128 = PHI %16:vr128, %bb.7, %25:vr128, %bb.9
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr killed %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr killed %29:vr128(tied-def 0), killed %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr killed %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr killed %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr killed %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr killed %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit killed $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %3:gr32 = ADD32ri8_DB killed %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.2, %30:gr32, %bb.11
  %32:gr32 = PHI %50:gr32, %bb.2, %3:gr32, %bb.11
  %33:gr32 = ADD32ri8 killed %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.12, %36:gr32, %bb.13
  %35:gr32 = PHI %32:gr32, %bb.12, %37:gr32, %bb.13
  %36:gr32 = nsw IMUL32rr killed %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 killed %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.10, %bb.13

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.10, %36:gr32, %bb.13
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY killed %121:gr64
  $esi = COPY killed %38:gr32
  $al = COPY killed %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY killed %122:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY killed %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY killed %40:gr64
  $esi = COPY killed %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY killed %45:gr64
  $rsi = COPY killed %46:gr64
  $al = COPY killed %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 killed %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %6:gr32 = AND32ri8 killed %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

  %7:gr32 = PHI %6:gr32, %bb.5, %14:gr32, %bb.6
  %8:vr128 = PHI %58:vr128, %bb.5, %11:vr128, %bb.6
  %9:vr128 = PHI %58:vr128, %bb.5, %12:vr128, %bb.6
  %10:vr128 = PHI %59:vr128, %bb.5, %13:vr128, %bb.6
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr killed %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr killed %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr killed %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr killed %9:vr128(tied-def 0), killed %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr killed %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri killed %69:vr128, -11
  %73:vr128 = PMULUDQrr killed %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr killed %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri killed %70:vr128, -11
  %76:vr128 = PMULUDQrr killed %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr killed %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr killed %71:vr128(tied-def 0), killed %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr killed %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr killed %74:vr128(tied-def 0), killed %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr killed %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri killed %85:vr128, -11
  %90:vr128 = PMULUDQrr killed %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr killed %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr killed %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri killed %86:vr128, -11
  %95:vr128 = PMULUDQrr killed %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr killed %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr killed %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

  %15:vr128 = PHI undef %52:vr128, %bb.4, %11:vr128, %bb.6
  %16:vr128 = PHI undef %52:vr128, %bb.4, %12:vr128, %bb.6
  %17:vr128 = PHI %53:vr128, %bb.4, %11:vr128, %bb.6
  %18:vr128 = PHI %53:vr128, %bb.4, %12:vr128, %bb.6
  %19:vr128 = PHI %54:vr128, %bb.4, %13:vr128, %bb.6
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

  %20:gr32 = PHI %5:gr32, %bb.8, %27:gr32, %bb.9
  %21:vr128 = PHI %17:vr128, %bb.8, %24:vr128, %bb.9
  %22:vr128 = PHI %18:vr128, %bb.8, %25:vr128, %bb.9
  %23:vr128 = PHI %19:vr128, %bb.8, %26:vr128, %bb.9
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri killed %21:vr128, -11
  %102:vr128 = PMULUDQrr killed %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr killed %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri killed %22:vr128, -11
  %107:vr128 = PSHUFDri killed %97:vr128, -11
  %108:vr128 = PMULUDQrr killed %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr killed %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr killed %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 killed %20:gr32(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)

  %28:vr128 = PHI %15:vr128, %bb.7, %24:vr128, %bb.9
  %29:vr128 = PHI %16:vr128, %bb.7, %25:vr128, %bb.9
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr killed %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr killed %29:vr128(tied-def 0), killed %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr killed %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr killed %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr killed %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr killed %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit killed $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %3:gr32 = ADD32ri8_DB killed %2:gr32(tied-def 0), 2, implicit-def dead $eflags

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %31:gr32 = PHI %49:gr32, %bb.2, %30:gr32, %bb.11
  %32:gr32 = PHI %50:gr32, %bb.2, %3:gr32, %bb.11
  %33:gr32 = ADD32ri8 killed %0:gr32(tied-def 0), 1, implicit-def dead $eflags

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

  %34:gr32 = PHI %31:gr32, %bb.12, %36:gr32, %bb.13
  %35:gr32 = PHI %32:gr32, %bb.12, %37:gr32, %bb.13
  %36:gr32 = nsw IMUL32rr killed %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 killed %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.10, %bb.13

  %38:gr32 = PHI %39:gr32, %bb.0, %30:gr32, %bb.10, %36:gr32, %bb.13
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY killed %121:gr64
  $esi = COPY killed %38:gr32
  $al = COPY killed %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY killed %122:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY killed %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY killed %40:gr64
  $esi = COPY killed %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY killed %45:gr64
  $rsi = COPY killed %46:gr64
  $al = COPY killed %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  %154:gr32 = COPY killed %39:gr32
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %150:gr32 = COPY killed %49:gr32
  %151:gr32 = COPY killed %50:gr32
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 killed %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %139:vr128 = IMPLICIT_DEF
  %140:vr128 = IMPLICIT_DEF
  %141:vr128 = COPY %53:vr128
  %142:vr128 = COPY killed %53:vr128
  %143:vr128 = COPY killed %54:vr128
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %6:gr32 = AND32ri8 killed %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %135:gr32 = COPY killed %6:gr32
  %136:vr128 = COPY %58:vr128
  %137:vr128 = COPY killed %58:vr128
  %138:vr128 = COPY killed %59:vr128

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

  %10:vr128 = COPY killed %138:vr128
  %9:vr128 = COPY killed %137:vr128
  %8:vr128 = COPY killed %136:vr128
  %7:gr32 = COPY killed %135:gr32
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr killed %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr killed %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr killed %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr killed %9:vr128(tied-def 0), killed %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr killed %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri killed %69:vr128, -11
  %73:vr128 = PMULUDQrr killed %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr killed %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri killed %70:vr128, -11
  %76:vr128 = PMULUDQrr killed %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr killed %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr killed %71:vr128(tied-def 0), killed %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr killed %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr killed %74:vr128(tied-def 0), killed %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr killed %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri killed %85:vr128, -11
  %90:vr128 = PMULUDQrr killed %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr killed %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr killed %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri killed %86:vr128, -11
  %95:vr128 = PMULUDQrr killed %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr killed %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr killed %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), -4, implicit-def $eflags
  %135:gr32 = COPY killed %14:gr32
  %136:vr128 = COPY %11:vr128
  %137:vr128 = COPY %12:vr128
  %138:vr128 = COPY %13:vr128
  %139:vr128 = COPY %11:vr128
  %140:vr128 = COPY %12:vr128
  %141:vr128 = COPY killed %11:vr128
  %142:vr128 = COPY killed %12:vr128
  %143:vr128 = COPY killed %13:vr128
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

  %19:vr128 = COPY killed %143:vr128
  %18:vr128 = COPY killed %142:vr128
  %17:vr128 = COPY killed %141:vr128
  %16:vr128 = COPY killed %140:vr128
  %15:vr128 = COPY killed %139:vr128
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  %148:vr128 = COPY killed %15:vr128
  %149:vr128 = COPY killed %16:vr128
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %144:gr32 = COPY killed %5:gr32
  %145:vr128 = COPY killed %17:vr128
  %146:vr128 = COPY killed %18:vr128
  %147:vr128 = COPY killed %19:vr128

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

  %23:vr128 = COPY killed %147:vr128
  %22:vr128 = COPY killed %146:vr128
  %21:vr128 = COPY killed %145:vr128
  %20:gr32 = COPY killed %144:gr32
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri killed %21:vr128, -11
  %102:vr128 = PMULUDQrr killed %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr killed %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri killed %22:vr128, -11
  %107:vr128 = PSHUFDri killed %97:vr128, -11
  %108:vr128 = PMULUDQrr killed %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr killed %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr killed %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 killed %20:gr32(tied-def 0), -1, implicit-def $eflags
  %144:gr32 = COPY killed %27:gr32
  %145:vr128 = COPY %24:vr128
  %146:vr128 = COPY %25:vr128
  %147:vr128 = COPY killed %26:vr128
  %148:vr128 = COPY killed %24:vr128
  %149:vr128 = COPY killed %25:vr128
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

  %29:vr128 = COPY killed %149:vr128
  %28:vr128 = COPY killed %148:vr128
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr killed %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr killed %29:vr128(tied-def 0), killed %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr killed %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr killed %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr killed %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr killed %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  %154:gr32 = COPY killed %30:gr32
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %3:gr32 = ADD32ri8_DB killed %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %150:gr32 = COPY killed %30:gr32
  %151:gr32 = COPY killed %3:gr32

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %32:gr32 = COPY killed %151:gr32
  %31:gr32 = COPY killed %150:gr32
  %33:gr32 = ADD32ri8 killed %0:gr32(tied-def 0), 1, implicit-def dead $eflags
  %152:gr32 = COPY killed %31:gr32
  %153:gr32 = COPY killed %32:gr32

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

  %35:gr32 = COPY killed %153:gr32
  %34:gr32 = COPY killed %152:gr32
  %36:gr32 = nsw IMUL32rr killed %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 killed %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  %152:gr32 = COPY %36:gr32
  %153:gr32 = COPY killed %37:gr32
  %154:gr32 = COPY killed %36:gr32
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15

  %38:gr32 = COPY killed %154:gr32
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY killed %121:gr64
  $esi = COPY killed %38:gr32
  $al = COPY killed %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY killed %122:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY killed %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY killed %40:gr64
  $esi = COPY killed %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY killed %45:gr64
  $rsi = COPY killed %46:gr64
  $al = COPY killed %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  %154:gr32 = COPY killed %39:gr32
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

  %1:gr32 = ADD32ri8 %0:gr32(tied-def 0), -1, implicit-def dead $eflags
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %150:gr32 = COPY killed %49:gr32
  %151:gr32 = COPY killed %50:gr32
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

  %2:gr32 = AND32ri8 %1:gr32(tied-def 0), -8, implicit-def dead $eflags
  %55:gr32 = ADD32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  %56:gr32 = exact SHR32ri %55:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = nuw nsw ADD32ri8 killed %56:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = AND32ri8 %4:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %139:vr128 = IMPLICIT_DEF
  %140:vr128 = IMPLICIT_DEF
  %141:vr128 = COPY %53:vr128
  %142:vr128 = COPY killed %53:vr128
  %143:vr128 = COPY killed %54:vr128
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %6:gr32 = AND32ri8 killed %4:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %135:gr32 = COPY killed %6:gr32
  %136:vr128 = COPY %58:vr128
  %137:vr128 = COPY killed %58:vr128
  %138:vr128 = COPY killed %59:vr128

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

  %10:vr128 = COPY killed %138:vr128
  %9:vr128 = COPY killed %137:vr128
  %8:vr128 = COPY killed %136:vr128
  %7:gr32 = COPY killed %135:gr32
  %60:vr128 = PADDDrr %10:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = PMULUDQrr killed %62:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = PMULUDQrr killed %8:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = PMULUDQrr killed %65:vr128(tied-def 0), killed %66:vr128
  %68:vr128 = PMULUDQrr killed %9:vr128(tied-def 0), killed %60:vr128
  %69:vr128 = PADDDrr %10:vr128(tied-def 0), %126:vr128
  %70:vr128 = PADDDrr %10:vr128(tied-def 0), %127:vr128
  %71:vr128 = PMULUDQrr killed %64:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri killed %69:vr128, -11
  %73:vr128 = PMULUDQrr killed %63:vr128(tied-def 0), killed %72:vr128
  %74:vr128 = PMULUDQrr killed %68:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri killed %70:vr128, -11
  %76:vr128 = PMULUDQrr killed %67:vr128(tied-def 0), killed %75:vr128
  %77:vr128 = PADDDrr %10:vr128(tied-def 0), %128:vr128
  %78:vr128 = PADDDrr %10:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = PMULUDQrr killed %73:vr128(tied-def 0), killed %79:vr128
  %81:vr128 = PMULUDQrr killed %71:vr128(tied-def 0), killed %77:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = PMULUDQrr killed %76:vr128(tied-def 0), killed %82:vr128
  %84:vr128 = PMULUDQrr killed %74:vr128(tied-def 0), killed %78:vr128
  %85:vr128 = PADDDrr %10:vr128(tied-def 0), %130:vr128
  %86:vr128 = PADDDrr %10:vr128(tied-def 0), %131:vr128
  %87:vr128 = PMULUDQrr killed %81:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri killed %85:vr128, -11
  %90:vr128 = PMULUDQrr killed %80:vr128(tied-def 0), killed %89:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = PUNPCKLDQrr killed %88:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = PMULUDQrr killed %84:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri killed %86:vr128, -11
  %95:vr128 = PMULUDQrr killed %83:vr128(tied-def 0), killed %94:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = PUNPCKLDQrr killed %93:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = PADDDrr killed %10:vr128(tied-def 0), %132:vr128
  %14:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), -4, implicit-def $eflags
  %135:gr32 = COPY killed %14:gr32
  %136:vr128 = COPY %11:vr128
  %137:vr128 = COPY %12:vr128
  %138:vr128 = COPY %13:vr128
  %139:vr128 = COPY %11:vr128
  %140:vr128 = COPY %12:vr128
  %141:vr128 = COPY killed %11:vr128
  %142:vr128 = COPY killed %12:vr128
  %143:vr128 = COPY killed %13:vr128
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

  %19:vr128 = COPY killed %143:vr128
  %18:vr128 = COPY killed %142:vr128
  %17:vr128 = COPY killed %141:vr128
  %16:vr128 = COPY killed %140:vr128
  %15:vr128 = COPY killed %139:vr128
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  %148:vr128 = COPY killed %15:vr128
  %149:vr128 = COPY killed %16:vr128
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %144:gr32 = COPY killed %5:gr32
  %145:vr128 = COPY killed %17:vr128
  %146:vr128 = COPY killed %18:vr128
  %147:vr128 = COPY killed %19:vr128

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

  %23:vr128 = COPY killed %147:vr128
  %22:vr128 = COPY killed %146:vr128
  %21:vr128 = COPY killed %145:vr128
  %20:gr32 = COPY killed %144:gr32
  %97:vr128 = PADDDrr %23:vr128(tied-def 0), %133:vr128
  %98:vr128 = PMULUDQrr %21:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %101:vr128 = PSHUFDri killed %21:vr128, -11
  %102:vr128 = PMULUDQrr killed %101:vr128(tied-def 0), killed %100:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = PUNPCKLDQrr killed %99:vr128(tied-def 0), killed %103:vr128
  %104:vr128 = PMULUDQrr %22:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %106:vr128 = PSHUFDri killed %22:vr128, -11
  %107:vr128 = PSHUFDri killed %97:vr128, -11
  %108:vr128 = PMULUDQrr killed %106:vr128(tied-def 0), killed %107:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = PUNPCKLDQrr killed %105:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = PADDDrr killed %23:vr128(tied-def 0), %134:vr128
  %27:gr32 = ADD32ri8 killed %20:gr32(tied-def 0), -1, implicit-def $eflags
  %144:gr32 = COPY killed %27:gr32
  %145:vr128 = COPY %24:vr128
  %146:vr128 = COPY %25:vr128
  %147:vr128 = COPY killed %26:vr128
  %148:vr128 = COPY killed %24:vr128
  %149:vr128 = COPY killed %25:vr128
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

  %29:vr128 = COPY killed %149:vr128
  %28:vr128 = COPY killed %148:vr128
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = PMULUDQrr killed %111:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = PMULUDQrr killed %29:vr128(tied-def 0), killed %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = PMULUDQrr killed %113:vr128(tied-def 0), killed %114:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = PMULUDQrr killed %112:vr128(tied-def 0), killed %116:vr128
  %118:vr128 = PMULUDQrr killed %115:vr128(tied-def 0), killed %117:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr killed %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  %154:gr32 = COPY killed %30:gr32
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %3:gr32 = ADD32ri8_DB killed %2:gr32(tied-def 0), 2, implicit-def dead $eflags
  %150:gr32 = COPY killed %30:gr32
  %151:gr32 = COPY killed %3:gr32

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %32:gr32 = COPY killed %151:gr32
  %31:gr32 = COPY killed %150:gr32
  %33:gr32 = ADD32ri8 killed %0:gr32(tied-def 0), 1, implicit-def dead $eflags
  %152:gr32 = COPY killed %31:gr32
  %153:gr32 = COPY killed %32:gr32

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

  %35:gr32 = COPY killed %153:gr32
  %34:gr32 = COPY killed %152:gr32
  %36:gr32 = nsw IMUL32rr killed %34:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = ADD32ri8 killed %35:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  %152:gr32 = COPY %36:gr32
  %153:gr32 = COPY killed %37:gr32
  %154:gr32 = COPY killed %36:gr32
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15

  %38:gr32 = COPY killed %154:gr32
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY killed %121:gr64
  $esi = COPY killed %38:gr32
  $al = COPY killed %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY killed %122:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY killed %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY killed %40:gr64
  $esi = COPY killed %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY killed %45:gr64
  $rsi = COPY killed %46:gr64
  $al = COPY killed %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  %154:gr32 = COPY killed %39:gr32
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

  undef %155.sub_32bit:gr64 = COPY %0:gr32
  %1:gr32 = LEA64_32r killed %155:gr64, 1, $noreg, -1, $noreg
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %150:gr32 = COPY killed %49:gr32
  %151:gr32 = COPY killed %50:gr32
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

  %2:gr32 = COPY %1:gr32
  %2:gr32 = AND32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  undef %156.sub_32bit:gr64 = COPY %2:gr32
  %55:gr32 = LEA64_32r killed %156:gr64, 1, $noreg, -8, $noreg
  %56:gr32 = COPY %55:gr32
  %56:gr32 = exact SHR32ri %56:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = COPY killed %56:gr32
  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = COPY %4:gr32
  %5:gr32 = AND32ri8 %5:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %139:vr128 = IMPLICIT_DEF
  %140:vr128 = IMPLICIT_DEF
  %141:vr128 = COPY %53:vr128
  %142:vr128 = COPY killed %53:vr128
  %143:vr128 = COPY killed %54:vr128
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %6:gr32 = COPY killed %4:gr32
  %6:gr32 = AND32ri8 %6:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %135:gr32 = COPY killed %6:gr32
  %136:vr128 = COPY %58:vr128
  %137:vr128 = COPY killed %58:vr128
  %138:vr128 = COPY killed %59:vr128

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

  %10:vr128 = COPY killed %138:vr128
  %9:vr128 = COPY killed %137:vr128
  %8:vr128 = COPY killed %136:vr128
  %7:gr32 = COPY killed %135:gr32
  %60:vr128 = COPY %10:vr128
  %60:vr128 = PADDDrr %60:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = COPY killed %62:vr128
  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = COPY killed %8:vr128
  %64:vr128 = PMULUDQrr %64:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = COPY killed %66:vr128
  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %65:vr128
  %68:vr128 = COPY killed %60:vr128
  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), killed %9:vr128
  %69:vr128 = COPY %10:vr128
  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
  %70:vr128 = COPY %10:vr128
  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
  %71:vr128 = COPY killed %64:vr128
  %71:vr128 = PMULUDQrr %71:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri killed %69:vr128, -11
  %73:vr128 = COPY killed %72:vr128
  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %63:vr128
  %74:vr128 = COPY killed %68:vr128
  %74:vr128 = PMULUDQrr %74:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri killed %70:vr128, -11
  %76:vr128 = COPY killed %75:vr128
  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %67:vr128
  %77:vr128 = COPY %10:vr128
  %77:vr128 = PADDDrr %77:vr128(tied-def 0), %128:vr128
  %78:vr128 = COPY %10:vr128
  %78:vr128 = PADDDrr %78:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = COPY killed %79:vr128
  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %73:vr128
  %81:vr128 = COPY killed %77:vr128
  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), killed %71:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = COPY killed %82:vr128
  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %76:vr128
  %84:vr128 = COPY killed %78:vr128
  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), killed %74:vr128
  %85:vr128 = COPY %10:vr128
  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
  %86:vr128 = COPY %10:vr128
  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
  %87:vr128 = COPY killed %81:vr128
  %87:vr128 = PMULUDQrr %87:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri killed %85:vr128, -11
  %90:vr128 = COPY killed %89:vr128
  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), killed %80:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = COPY killed %88:vr128
  %11:vr128 = PUNPCKLDQrr %11:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = COPY killed %84:vr128
  %92:vr128 = PMULUDQrr %92:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri killed %86:vr128, -11
  %95:vr128 = COPY killed %94:vr128
  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), killed %83:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = COPY killed %93:vr128
  %12:vr128 = PUNPCKLDQrr %12:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = COPY killed %10:vr128
  %13:vr128 = PADDDrr %13:vr128(tied-def 0), %132:vr128
  %14:gr32 = COPY killed %7:gr32
  %14:gr32 = ADD32ri8 %14:gr32(tied-def 0), -4, implicit-def $eflags
  %135:gr32 = COPY killed %14:gr32
  %136:vr128 = COPY %11:vr128
  %137:vr128 = COPY %12:vr128
  %138:vr128 = COPY %13:vr128
  %139:vr128 = COPY %11:vr128
  %140:vr128 = COPY %12:vr128
  %141:vr128 = COPY killed %11:vr128
  %142:vr128 = COPY killed %12:vr128
  %143:vr128 = COPY killed %13:vr128
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

  %19:vr128 = COPY killed %143:vr128
  %18:vr128 = COPY killed %142:vr128
  %17:vr128 = COPY killed %141:vr128
  %16:vr128 = COPY killed %140:vr128
  %15:vr128 = COPY killed %139:vr128
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  %148:vr128 = COPY killed %15:vr128
  %149:vr128 = COPY killed %16:vr128
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %144:gr32 = COPY killed %5:gr32
  %145:vr128 = COPY killed %17:vr128
  %146:vr128 = COPY killed %18:vr128
  %147:vr128 = COPY killed %19:vr128

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

  %23:vr128 = COPY killed %147:vr128
  %22:vr128 = COPY killed %146:vr128
  %21:vr128 = COPY killed %145:vr128
  %20:gr32 = COPY killed %144:gr32
  %97:vr128 = COPY %23:vr128
  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
  %101:vr128 = PSHUFDri %21:vr128, -11
  %98:vr128 = COPY killed %21:vr128
  %98:vr128 = PMULUDQrr %98:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %102:vr128 = COPY killed %100:vr128
  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), killed %101:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = COPY killed %99:vr128
  %24:vr128 = PUNPCKLDQrr %24:vr128(tied-def 0), killed %103:vr128
  %106:vr128 = PSHUFDri %22:vr128, -11
  %104:vr128 = COPY killed %22:vr128
  %104:vr128 = PMULUDQrr %104:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %107:vr128 = PSHUFDri killed %97:vr128, -11
  %108:vr128 = COPY killed %107:vr128
  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), killed %106:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = COPY killed %105:vr128
  %25:vr128 = PUNPCKLDQrr %25:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = COPY killed %23:vr128
  %26:vr128 = PADDDrr %26:vr128(tied-def 0), %134:vr128
  %27:gr32 = COPY killed %20:gr32
  %27:gr32 = ADD32ri8 %27:gr32(tied-def 0), -1, implicit-def $eflags
  %144:gr32 = COPY killed %27:gr32
  %145:vr128 = COPY %24:vr128
  %146:vr128 = COPY %25:vr128
  %147:vr128 = COPY killed %26:vr128
  %148:vr128 = COPY killed %24:vr128
  %149:vr128 = COPY killed %25:vr128
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

  %29:vr128 = COPY killed %149:vr128
  %28:vr128 = COPY killed %148:vr128
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = COPY killed %111:vr128
  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = COPY killed %29:vr128
  %113:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = COPY killed %114:vr128
  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %113:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = COPY killed %116:vr128
  %117:vr128 = PMULUDQrr %117:vr128(tied-def 0), killed %112:vr128
  %118:vr128 = COPY killed %117:vr128
  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), killed %115:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr killed %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  %154:gr32 = COPY killed %30:gr32
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %3:gr32 = COPY killed %2:gr32
  %3:gr32 = ADD32ri8_DB %3:gr32(tied-def 0), 2, implicit-def dead $eflags
  %150:gr32 = COPY killed %30:gr32
  %151:gr32 = COPY killed %3:gr32

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %32:gr32 = COPY killed %151:gr32
  %31:gr32 = COPY killed %150:gr32
  %33:gr32 = COPY killed %0:gr32
  %33:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def dead $eflags
  %152:gr32 = COPY killed %31:gr32
  %153:gr32 = COPY killed %32:gr32

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

  %35:gr32 = COPY killed %153:gr32
  %34:gr32 = COPY killed %152:gr32
  %36:gr32 = COPY killed %34:gr32
  %36:gr32 = nsw IMUL32rr %36:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = COPY killed %35:gr32
  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  %152:gr32 = COPY %36:gr32
  %153:gr32 = COPY killed %37:gr32
  %154:gr32 = COPY killed %36:gr32
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15

  %38:gr32 = COPY killed %154:gr32
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY killed %121:gr64
  $esi = COPY killed %38:gr32
  $al = COPY killed %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY killed %122:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %40:gr64 = MOV32ri64 @.str
  %41:gr32 = MOV32r0 implicit-def dead $eflags
  %42:gr8 = COPY killed %41.sub_8bit:gr32
  %43:gr32 = MOV32ri 1000
  $rdi = COPY killed %40:gr64
  $esi = COPY killed %43:gr32
  $al = COPY %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %45:gr64 = MOV32ri64 @.str.1
  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY killed %45:gr64
  $rsi = COPY killed %46:gr64
  $al = COPY killed %42:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %39:gr32 = MOV32ri 1
  CMP32ri8 %0:gr32, 2, implicit-def $eflags
  %154:gr32 = COPY killed %39:gr32
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

  undef %155.sub_32bit:gr64 = COPY %0:gr32
  %1:gr32 = LEA64_32r killed %155:gr64, 1, $noreg, -1, $noreg
  CMP32ri8 %1:gr32, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %50:gr32 = MOV32ri 2
  %49:gr32 = MOV32ri 1
  %150:gr32 = COPY killed %49:gr32
  %151:gr32 = COPY killed %50:gr32
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

  %2:gr32 = COPY %1:gr32
  %2:gr32 = AND32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
  undef %156.sub_32bit:gr64 = COPY %2:gr32
  %55:gr32 = LEA64_32r killed %156:gr64, 1, $noreg, -8, $noreg
  %56:gr32 = COPY %55:gr32
  %56:gr32 = exact SHR32ri %56:gr32(tied-def 0), 3, implicit-def dead $eflags
  %4:gr32 = COPY killed %56:gr32
  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
  %5:gr32 = COPY %4:gr32
  %5:gr32 = AND32ri8 %5:gr32(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed %55:gr32, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)

  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %139:vr128 = IMPLICIT_DEF
  %140:vr128 = IMPLICIT_DEF
  %141:vr128 = COPY %53:vr128
  %142:vr128 = COPY killed %53:vr128
  %143:vr128 = COPY killed %54:vr128
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)

  %6:gr32 = COPY killed %4:gr32
  %6:gr32 = AND32ri8 %6:gr32(tied-def 0), -4, implicit-def dead $eflags
  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  %135:gr32 = COPY killed %6:gr32
  %136:vr128 = COPY %58:vr128
  %137:vr128 = COPY killed %58:vr128
  %138:vr128 = COPY killed %59:vr128

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

  %10:vr128 = COPY killed %138:vr128
  %9:vr128 = COPY killed %137:vr128
  %8:vr128 = COPY killed %136:vr128
  %7:gr32 = COPY killed %135:gr32
  %60:vr128 = COPY %10:vr128
  %60:vr128 = PADDDrr %60:vr128(tied-def 0), %125:vr128
  %61:vr128 = PSHUFDri %10:vr128, -11
  %62:vr128 = PSHUFDri %8:vr128, -11
  %63:vr128 = COPY killed %62:vr128
  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %61:vr128
  %64:vr128 = COPY killed %8:vr128
  %64:vr128 = PMULUDQrr %64:vr128(tied-def 0), %10:vr128
  %65:vr128 = PSHUFDri %9:vr128, -11
  %66:vr128 = PSHUFDri %60:vr128, -11
  %67:vr128 = COPY killed %66:vr128
  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %65:vr128
  %68:vr128 = COPY killed %60:vr128
  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), killed %9:vr128
  %69:vr128 = COPY %10:vr128
  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
  %70:vr128 = COPY %10:vr128
  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
  %71:vr128 = COPY killed %64:vr128
  %71:vr128 = PMULUDQrr %71:vr128(tied-def 0), %69:vr128
  %72:vr128 = PSHUFDri killed %69:vr128, -11
  %73:vr128 = COPY killed %72:vr128
  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %63:vr128
  %74:vr128 = COPY killed %68:vr128
  %74:vr128 = PMULUDQrr %74:vr128(tied-def 0), %70:vr128
  %75:vr128 = PSHUFDri killed %70:vr128, -11
  %76:vr128 = COPY killed %75:vr128
  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %67:vr128
  %77:vr128 = COPY %10:vr128
  %77:vr128 = PADDDrr %77:vr128(tied-def 0), %128:vr128
  %78:vr128 = COPY %10:vr128
  %78:vr128 = PADDDrr %78:vr128(tied-def 0), %129:vr128
  %79:vr128 = PSHUFDri %77:vr128, -11
  %80:vr128 = COPY killed %79:vr128
  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %73:vr128
  %81:vr128 = COPY killed %77:vr128
  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), killed %71:vr128
  %82:vr128 = PSHUFDri %78:vr128, -11
  %83:vr128 = COPY killed %82:vr128
  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %76:vr128
  %84:vr128 = COPY killed %78:vr128
  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), killed %74:vr128
  %85:vr128 = COPY %10:vr128
  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
  %86:vr128 = COPY %10:vr128
  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
  %87:vr128 = COPY killed %81:vr128
  %87:vr128 = PMULUDQrr %87:vr128(tied-def 0), %85:vr128
  %88:vr128 = PSHUFDri killed %87:vr128, -24
  %89:vr128 = PSHUFDri killed %85:vr128, -11
  %90:vr128 = COPY killed %89:vr128
  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), killed %80:vr128
  %91:vr128 = PSHUFDri killed %90:vr128, -24
  %11:vr128 = COPY killed %88:vr128
  %11:vr128 = PUNPCKLDQrr %11:vr128(tied-def 0), killed %91:vr128
  %92:vr128 = COPY killed %84:vr128
  %92:vr128 = PMULUDQrr %92:vr128(tied-def 0), %86:vr128
  %93:vr128 = PSHUFDri killed %92:vr128, -24
  %94:vr128 = PSHUFDri killed %86:vr128, -11
  %95:vr128 = COPY killed %94:vr128
  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), killed %83:vr128
  %96:vr128 = PSHUFDri killed %95:vr128, -24
  %12:vr128 = COPY killed %93:vr128
  %12:vr128 = PUNPCKLDQrr %12:vr128(tied-def 0), killed %96:vr128
  %13:vr128 = COPY killed %10:vr128
  %13:vr128 = PADDDrr %13:vr128(tied-def 0), %132:vr128
  %14:gr32 = COPY killed %7:gr32
  %14:gr32 = ADD32ri8 %14:gr32(tied-def 0), -4, implicit-def $eflags
  %135:gr32 = COPY killed %14:gr32
  %136:vr128 = COPY %11:vr128
  %137:vr128 = COPY %12:vr128
  %138:vr128 = COPY %13:vr128
  %139:vr128 = COPY %11:vr128
  %140:vr128 = COPY %12:vr128
  %141:vr128 = COPY killed %11:vr128
  %142:vr128 = COPY killed %12:vr128
  %143:vr128 = COPY killed %13:vr128
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

  %19:vr128 = COPY killed %143:vr128
  %18:vr128 = COPY killed %142:vr128
  %17:vr128 = COPY killed %141:vr128
  %16:vr128 = COPY killed %140:vr128
  %15:vr128 = COPY killed %139:vr128
  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
  %148:vr128 = COPY killed %15:vr128
  %149:vr128 = COPY killed %16:vr128
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)

  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  %144:gr32 = COPY killed %5:gr32
  %145:vr128 = COPY killed %17:vr128
  %146:vr128 = COPY killed %18:vr128
  %147:vr128 = COPY killed %19:vr128

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

  %23:vr128 = COPY killed %147:vr128
  %22:vr128 = COPY killed %146:vr128
  %21:vr128 = COPY killed %145:vr128
  %20:gr32 = COPY killed %144:gr32
  %97:vr128 = COPY %23:vr128
  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
  %101:vr128 = PSHUFDri %21:vr128, -11
  %98:vr128 = COPY killed %21:vr128
  %98:vr128 = PMULUDQrr %98:vr128(tied-def 0), %23:vr128
  %99:vr128 = PSHUFDri killed %98:vr128, -24
  %100:vr128 = PSHUFDri %23:vr128, -11
  %102:vr128 = COPY killed %100:vr128
  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), killed %101:vr128
  %103:vr128 = PSHUFDri killed %102:vr128, -24
  %24:vr128 = COPY killed %99:vr128
  %24:vr128 = PUNPCKLDQrr %24:vr128(tied-def 0), killed %103:vr128
  %106:vr128 = PSHUFDri %22:vr128, -11
  %104:vr128 = COPY killed %22:vr128
  %104:vr128 = PMULUDQrr %104:vr128(tied-def 0), %97:vr128
  %105:vr128 = PSHUFDri killed %104:vr128, -24
  %107:vr128 = PSHUFDri killed %97:vr128, -11
  %108:vr128 = COPY killed %107:vr128
  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), killed %106:vr128
  %109:vr128 = PSHUFDri killed %108:vr128, -24
  %25:vr128 = COPY killed %105:vr128
  %25:vr128 = PUNPCKLDQrr %25:vr128(tied-def 0), killed %109:vr128
  %26:vr128 = COPY killed %23:vr128
  %26:vr128 = PADDDrr %26:vr128(tied-def 0), %134:vr128
  %27:gr32 = COPY killed %20:gr32
  %27:gr32 = ADD32ri8 %27:gr32(tied-def 0), -1, implicit-def $eflags
  %144:gr32 = COPY killed %27:gr32
  %145:vr128 = COPY %24:vr128
  %146:vr128 = COPY %25:vr128
  %147:vr128 = COPY killed %26:vr128
  %148:vr128 = COPY killed %24:vr128
  %149:vr128 = COPY killed %25:vr128
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

  %29:vr128 = COPY killed %149:vr128
  %28:vr128 = COPY killed %148:vr128
  %110:vr128 = PSHUFDri %28:vr128, -11
  %111:vr128 = PSHUFDri %29:vr128, -11
  %112:vr128 = COPY killed %111:vr128
  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %110:vr128
  %113:vr128 = COPY killed %29:vr128
  %113:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %28:vr128
  %114:vr128 = PSHUFDri %113:vr128, -18
  %115:vr128 = COPY killed %114:vr128
  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %113:vr128
  %116:vr128 = PSHUFDri %112:vr128, -86
  %117:vr128 = COPY killed %116:vr128
  %117:vr128 = PMULUDQrr %117:vr128(tied-def 0), killed %112:vr128
  %118:vr128 = COPY killed %117:vr128
  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), killed %115:vr128
  %30:gr32 = MOVPDI2DIrr killed %118:vr128
  CMP32rr killed %1:gr32, %2:gr32, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)

  %154:gr32 = COPY killed %30:gr32
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  %3:gr32 = COPY killed %2:gr32
  %3:gr32 = ADD32ri8_DB %3:gr32(tied-def 0), 2, implicit-def dead $eflags
  %150:gr32 = COPY killed %30:gr32
  %151:gr32 = COPY killed %3:gr32

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)

  %32:gr32 = COPY killed %151:gr32
  %31:gr32 = COPY killed %150:gr32
  %33:gr32 = COPY killed %0:gr32
  %33:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def dead $eflags
  %152:gr32 = COPY killed %31:gr32
  %153:gr32 = COPY killed %32:gr32

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

  %35:gr32 = COPY killed %153:gr32
  %34:gr32 = COPY killed %152:gr32
  %36:gr32 = COPY killed %34:gr32
  %36:gr32 = nsw IMUL32rr %36:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
  %37:gr32 = COPY killed %35:gr32
  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
  %152:gr32 = COPY %36:gr32
  %153:gr32 = COPY killed %37:gr32
  %154:gr32 = COPY killed %36:gr32
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15

  %38:gr32 = COPY killed %154:gr32
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %121:gr64 = MOV32ri64 @.str
  %122:gr32 = MOV32r0 implicit-def dead $eflags
  %123:gr8 = COPY %122.sub_8bit:gr32
  $rdi = COPY killed %121:gr64
  $esi = COPY killed %38:gr32
  $al = COPY killed %123:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = COPY killed %122:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  %40:gr64 = MOV32ri64 @.str
48B	  %41:gr32 = MOV32r0 implicit-def dead $eflags
64B	  %42:gr8 = COPY killed %41.sub_8bit:gr32
80B	  %43:gr32 = MOV32ri 1000
96B	  $rdi = COPY killed %40:gr64
112B	  $esi = COPY killed %43:gr32
128B	  $al = COPY %42:gr8
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  %45:gr64 = MOV32ri64 @.str.1
208B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = COPY killed %45:gr64
240B	  $rsi = COPY killed %46:gr64
256B	  $al = COPY killed %42:gr8
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  %39:gr32 = MOV32ri 1
336B	  CMP32ri8 %0:gr32, 2, implicit-def $eflags
352B	  %154:gr32 = COPY killed %39:gr32
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

416B	  undef %155.sub_32bit:gr64 = COPY %0:gr32
432B	  %1:gr32 = LEA64_32r killed %155:gr64, 1, $noreg, -1, $noreg
448B	  CMP32ri8 %1:gr32, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

496B	  %50:gr32 = MOV32ri 2
512B	  %49:gr32 = MOV32ri 1
528B	  %150:gr32 = COPY killed %49:gr32
544B	  %151:gr32 = COPY killed %50:gr32
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

592B	  %2:gr32 = COPY %1:gr32
608B	  %2:gr32 = AND32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
624B	  undef %156.sub_32bit:gr64 = COPY %2:gr32
640B	  %55:gr32 = LEA64_32r killed %156:gr64, 1, $noreg, -8, $noreg
656B	  %56:gr32 = COPY %55:gr32
672B	  %56:gr32 = exact SHR32ri %56:gr32(tied-def 0), 3, implicit-def dead $eflags
688B	  %4:gr32 = COPY killed %56:gr32
704B	  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  %5:gr32 = COPY %4:gr32
736B	  %5:gr32 = AND32ri8 %5:gr32(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 killed %55:gr32, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
832B	  %139:vr128 = IMPLICIT_DEF
848B	  %140:vr128 = IMPLICIT_DEF
864B	  %141:vr128 = COPY %53:vr128
880B	  %142:vr128 = COPY killed %53:vr128
896B	  %143:vr128 = COPY killed %54:vr128
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

944B	  %6:gr32 = COPY killed %4:gr32
960B	  %6:gr32 = AND32ri8 %6:gr32(tied-def 0), -4, implicit-def dead $eflags
976B	  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1008B	  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1024B	  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1136B	  %135:gr32 = COPY killed %6:gr32
1152B	  %136:vr128 = COPY %58:vr128
1168B	  %137:vr128 = COPY killed %58:vr128
1184B	  %138:vr128 = COPY killed %59:vr128

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

1216B	  %10:vr128 = COPY killed %138:vr128
1232B	  %9:vr128 = COPY killed %137:vr128
1248B	  %8:vr128 = COPY killed %136:vr128
1264B	  %7:gr32 = COPY killed %135:gr32
1280B	  %60:vr128 = COPY %10:vr128
1296B	  %60:vr128 = PADDDrr %60:vr128(tied-def 0), %125:vr128
1312B	  %61:vr128 = PSHUFDri %10:vr128, -11
1328B	  %62:vr128 = PSHUFDri %8:vr128, -11
1344B	  %63:vr128 = COPY killed %62:vr128
1360B	  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %61:vr128
1376B	  %64:vr128 = COPY killed %8:vr128
1392B	  %64:vr128 = PMULUDQrr %64:vr128(tied-def 0), %10:vr128
1408B	  %65:vr128 = PSHUFDri %9:vr128, -11
1424B	  %66:vr128 = PSHUFDri %60:vr128, -11
1440B	  %67:vr128 = COPY killed %66:vr128
1456B	  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %65:vr128
1472B	  %68:vr128 = COPY killed %60:vr128
1488B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), killed %9:vr128
1504B	  %69:vr128 = COPY %10:vr128
1520B	  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
1536B	  %70:vr128 = COPY %10:vr128
1552B	  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
1568B	  %71:vr128 = COPY killed %64:vr128
1584B	  %71:vr128 = PMULUDQrr %71:vr128(tied-def 0), %69:vr128
1600B	  %72:vr128 = PSHUFDri killed %69:vr128, -11
1616B	  %73:vr128 = COPY killed %72:vr128
1632B	  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %63:vr128
1648B	  %74:vr128 = COPY killed %68:vr128
1664B	  %74:vr128 = PMULUDQrr %74:vr128(tied-def 0), %70:vr128
1680B	  %75:vr128 = PSHUFDri killed %70:vr128, -11
1696B	  %76:vr128 = COPY killed %75:vr128
1712B	  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %67:vr128
1728B	  %77:vr128 = COPY %10:vr128
1744B	  %77:vr128 = PADDDrr %77:vr128(tied-def 0), %128:vr128
1760B	  %78:vr128 = COPY %10:vr128
1776B	  %78:vr128 = PADDDrr %78:vr128(tied-def 0), %129:vr128
1792B	  %79:vr128 = PSHUFDri %77:vr128, -11
1808B	  %80:vr128 = COPY killed %79:vr128
1824B	  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %73:vr128
1840B	  %81:vr128 = COPY killed %77:vr128
1856B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), killed %71:vr128
1872B	  %82:vr128 = PSHUFDri %78:vr128, -11
1888B	  %83:vr128 = COPY killed %82:vr128
1904B	  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %76:vr128
1920B	  %84:vr128 = COPY killed %78:vr128
1936B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), killed %74:vr128
1952B	  %85:vr128 = COPY %10:vr128
1968B	  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
1984B	  %86:vr128 = COPY %10:vr128
2000B	  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
2016B	  %87:vr128 = COPY killed %81:vr128
2032B	  %87:vr128 = PMULUDQrr %87:vr128(tied-def 0), %85:vr128
2048B	  %88:vr128 = PSHUFDri killed %87:vr128, -24
2064B	  %89:vr128 = PSHUFDri killed %85:vr128, -11
2080B	  %90:vr128 = COPY killed %89:vr128
2096B	  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), killed %80:vr128
2112B	  %91:vr128 = PSHUFDri killed %90:vr128, -24
2128B	  %11:vr128 = COPY killed %88:vr128
2144B	  %11:vr128 = PUNPCKLDQrr %11:vr128(tied-def 0), killed %91:vr128
2160B	  %92:vr128 = COPY killed %84:vr128
2176B	  %92:vr128 = PMULUDQrr %92:vr128(tied-def 0), %86:vr128
2192B	  %93:vr128 = PSHUFDri killed %92:vr128, -24
2208B	  %94:vr128 = PSHUFDri killed %86:vr128, -11
2224B	  %95:vr128 = COPY killed %94:vr128
2240B	  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), killed %83:vr128
2256B	  %96:vr128 = PSHUFDri killed %95:vr128, -24
2272B	  %12:vr128 = COPY killed %93:vr128
2288B	  %12:vr128 = PUNPCKLDQrr %12:vr128(tied-def 0), killed %96:vr128
2304B	  %13:vr128 = COPY killed %10:vr128
2320B	  %13:vr128 = PADDDrr %13:vr128(tied-def 0), %132:vr128
2336B	  %14:gr32 = COPY killed %7:gr32
2352B	  %14:gr32 = ADD32ri8 %14:gr32(tied-def 0), -4, implicit-def $eflags
2368B	  %135:gr32 = COPY killed %14:gr32
2384B	  %136:vr128 = COPY %11:vr128
2400B	  %137:vr128 = COPY %12:vr128
2416B	  %138:vr128 = COPY %13:vr128
2432B	  %139:vr128 = COPY %11:vr128
2448B	  %140:vr128 = COPY %12:vr128
2464B	  %141:vr128 = COPY killed %11:vr128
2480B	  %142:vr128 = COPY killed %12:vr128
2496B	  %143:vr128 = COPY killed %13:vr128
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

2560B	  %19:vr128 = COPY killed %143:vr128
2576B	  %18:vr128 = COPY killed %142:vr128
2592B	  %17:vr128 = COPY killed %141:vr128
2608B	  %16:vr128 = COPY killed %140:vr128
2624B	  %15:vr128 = COPY killed %139:vr128
2640B	  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
2656B	  %148:vr128 = COPY killed %15:vr128
2672B	  %149:vr128 = COPY killed %16:vr128
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
2768B	  %144:gr32 = COPY killed %5:gr32
2784B	  %145:vr128 = COPY killed %17:vr128
2800B	  %146:vr128 = COPY killed %18:vr128
2816B	  %147:vr128 = COPY killed %19:vr128

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

2848B	  %23:vr128 = COPY killed %147:vr128
2864B	  %22:vr128 = COPY killed %146:vr128
2880B	  %21:vr128 = COPY killed %145:vr128
2896B	  %20:gr32 = COPY killed %144:gr32
2912B	  %97:vr128 = COPY %23:vr128
2928B	  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
2944B	  %101:vr128 = PSHUFDri %21:vr128, -11
2960B	  %98:vr128 = COPY killed %21:vr128
2976B	  %98:vr128 = PMULUDQrr %98:vr128(tied-def 0), %23:vr128
2992B	  %99:vr128 = PSHUFDri killed %98:vr128, -24
3008B	  %100:vr128 = PSHUFDri %23:vr128, -11
3024B	  %102:vr128 = COPY killed %100:vr128
3040B	  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), killed %101:vr128
3056B	  %103:vr128 = PSHUFDri killed %102:vr128, -24
3072B	  %24:vr128 = COPY killed %99:vr128
3088B	  %24:vr128 = PUNPCKLDQrr %24:vr128(tied-def 0), killed %103:vr128
3104B	  %106:vr128 = PSHUFDri %22:vr128, -11
3120B	  %104:vr128 = COPY killed %22:vr128
3136B	  %104:vr128 = PMULUDQrr %104:vr128(tied-def 0), %97:vr128
3152B	  %105:vr128 = PSHUFDri killed %104:vr128, -24
3168B	  %107:vr128 = PSHUFDri killed %97:vr128, -11
3184B	  %108:vr128 = COPY killed %107:vr128
3200B	  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), killed %106:vr128
3216B	  %109:vr128 = PSHUFDri killed %108:vr128, -24
3232B	  %25:vr128 = COPY killed %105:vr128
3248B	  %25:vr128 = PUNPCKLDQrr %25:vr128(tied-def 0), killed %109:vr128
3264B	  %26:vr128 = COPY killed %23:vr128
3280B	  %26:vr128 = PADDDrr %26:vr128(tied-def 0), %134:vr128
3296B	  %27:gr32 = COPY killed %20:gr32
3312B	  %27:gr32 = ADD32ri8 %27:gr32(tied-def 0), -1, implicit-def $eflags
3328B	  %144:gr32 = COPY killed %27:gr32
3344B	  %145:vr128 = COPY %24:vr128
3360B	  %146:vr128 = COPY %25:vr128
3376B	  %147:vr128 = COPY killed %26:vr128
3392B	  %148:vr128 = COPY killed %24:vr128
3408B	  %149:vr128 = COPY killed %25:vr128
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

3472B	  %29:vr128 = COPY killed %149:vr128
3488B	  %28:vr128 = COPY killed %148:vr128
3504B	  %110:vr128 = PSHUFDri %28:vr128, -11
3520B	  %111:vr128 = PSHUFDri %29:vr128, -11
3536B	  %112:vr128 = COPY killed %111:vr128
3552B	  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %110:vr128
3568B	  %113:vr128 = COPY killed %29:vr128
3584B	  %113:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %28:vr128
3600B	  %114:vr128 = PSHUFDri %113:vr128, -18
3616B	  %115:vr128 = COPY killed %114:vr128
3632B	  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %113:vr128
3648B	  %116:vr128 = PSHUFDri %112:vr128, -86
3664B	  %117:vr128 = COPY killed %116:vr128
3680B	  %117:vr128 = PMULUDQrr %117:vr128(tied-def 0), killed %112:vr128
3696B	  %118:vr128 = COPY killed %117:vr128
3712B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), killed %115:vr128
3728B	  %30:gr32 = MOVPDI2DIrr killed %118:vr128
3744B	  CMP32rr killed %1:gr32, %2:gr32, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3792B	  %154:gr32 = COPY killed %30:gr32
3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3840B	  %3:gr32 = COPY killed %2:gr32
3856B	  %3:gr32 = ADD32ri8_DB %3:gr32(tied-def 0), 2, implicit-def dead $eflags
3872B	  %150:gr32 = COPY killed %30:gr32
3888B	  %151:gr32 = COPY killed %3:gr32

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3920B	  %32:gr32 = COPY killed %151:gr32
3936B	  %31:gr32 = COPY killed %150:gr32
3952B	  %33:gr32 = COPY killed %0:gr32
3968B	  %33:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def dead $eflags
3984B	  %152:gr32 = COPY killed %31:gr32
4000B	  %153:gr32 = COPY killed %32:gr32

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

4032B	  %35:gr32 = COPY killed %153:gr32
4048B	  %34:gr32 = COPY killed %152:gr32
4064B	  %36:gr32 = COPY killed %34:gr32
4080B	  %36:gr32 = nsw IMUL32rr %36:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
4096B	  %37:gr32 = COPY killed %35:gr32
4112B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
4128B	  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
4144B	  %152:gr32 = COPY %36:gr32
4160B	  %153:gr32 = COPY killed %37:gr32
4176B	  %154:gr32 = COPY killed %36:gr32
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15

4240B	  %38:gr32 = COPY killed %154:gr32
4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4272B	  %121:gr64 = MOV32ri64 @.str
4288B	  %122:gr32 = MOV32r0 implicit-def dead $eflags
4304B	  %123:gr8 = COPY %122.sub_8bit:gr32
4320B	  $rdi = COPY killed %121:gr64
4336B	  $esi = COPY killed %38:gr32
4352B	  $al = COPY killed %123:gr8
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = COPY killed %122:gr32
4416B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  %40:gr64 = MOV32ri64 @.str
48B	  %41:gr32 = MOV32r0 implicit-def dead $eflags
64B	  %42:gr8 = COPY killed %41.sub_8bit:gr32
80B	  %43:gr32 = MOV32ri 1000
96B	  $rdi = COPY killed %40:gr64
112B	  $esi = COPY killed %43:gr32
128B	  $al = COPY %42:gr8
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  %45:gr64 = MOV32ri64 @.str.1
208B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = COPY killed %45:gr64
240B	  $rsi = COPY killed %46:gr64
256B	  $al = COPY killed %42:gr8
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  %39:gr32 = MOV32ri 1
336B	  CMP32ri8 %0:gr32, 2, implicit-def $eflags
352B	  %154:gr32 = COPY killed %39:gr32
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

416B	  undef %155.sub_32bit:gr64 = COPY %0:gr32
432B	  %1:gr32 = LEA64_32r killed %155:gr64, 1, $noreg, -1, $noreg
448B	  CMP32ri8 %1:gr32, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

496B	  %50:gr32 = MOV32ri 2
512B	  %49:gr32 = MOV32ri 1
528B	  %150:gr32 = COPY killed %49:gr32
544B	  %151:gr32 = COPY killed %50:gr32
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

592B	  %2:gr32 = COPY %1:gr32
608B	  %2:gr32 = AND32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
624B	  undef %156.sub_32bit:gr64 = COPY %2:gr32
640B	  %55:gr32 = LEA64_32r killed %156:gr64, 1, $noreg, -8, $noreg
656B	  %56:gr32 = COPY %55:gr32
672B	  %56:gr32 = exact SHR32ri %56:gr32(tied-def 0), 3, implicit-def dead $eflags
688B	  %4:gr32 = COPY killed %56:gr32
704B	  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  %5:gr32 = COPY %4:gr32
736B	  %5:gr32 = AND32ri8 %5:gr32(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 killed %55:gr32, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
832B	  %139:vr128 = IMPLICIT_DEF
848B	  %140:vr128 = IMPLICIT_DEF
864B	  %141:vr128 = COPY %53:vr128
880B	  %142:vr128 = COPY killed %53:vr128
896B	  %143:vr128 = COPY killed %54:vr128
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

944B	  %6:gr32 = COPY killed %4:gr32
960B	  %6:gr32 = AND32ri8 %6:gr32(tied-def 0), -4, implicit-def dead $eflags
976B	  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1008B	  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1024B	  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1136B	  %135:gr32 = COPY killed %6:gr32
1152B	  %136:vr128 = COPY %58:vr128
1168B	  %137:vr128 = COPY killed %58:vr128
1184B	  %138:vr128 = COPY killed %59:vr128

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

1216B	  %10:vr128 = COPY killed %138:vr128
1232B	  %9:vr128 = COPY killed %137:vr128
1248B	  %8:vr128 = COPY killed %136:vr128
1264B	  %7:gr32 = COPY killed %135:gr32
1280B	  %60:vr128 = COPY %10:vr128
1296B	  %60:vr128 = PADDDrr %60:vr128(tied-def 0), %125:vr128
1312B	  %61:vr128 = PSHUFDri %10:vr128, -11
1328B	  %62:vr128 = PSHUFDri %8:vr128, -11
1344B	  %63:vr128 = COPY killed %62:vr128
1360B	  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), killed %61:vr128
1376B	  %64:vr128 = COPY killed %8:vr128
1392B	  %64:vr128 = PMULUDQrr %64:vr128(tied-def 0), %10:vr128
1408B	  %65:vr128 = PSHUFDri %9:vr128, -11
1424B	  %66:vr128 = PSHUFDri %60:vr128, -11
1440B	  %67:vr128 = COPY killed %66:vr128
1456B	  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), killed %65:vr128
1472B	  %68:vr128 = COPY killed %60:vr128
1488B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), killed %9:vr128
1504B	  %69:vr128 = COPY %10:vr128
1520B	  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
1536B	  %70:vr128 = COPY %10:vr128
1552B	  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
1568B	  %71:vr128 = COPY killed %64:vr128
1584B	  %71:vr128 = PMULUDQrr %71:vr128(tied-def 0), %69:vr128
1600B	  %72:vr128 = PSHUFDri killed %69:vr128, -11
1616B	  %73:vr128 = COPY killed %72:vr128
1632B	  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), killed %63:vr128
1648B	  %74:vr128 = COPY killed %68:vr128
1664B	  %74:vr128 = PMULUDQrr %74:vr128(tied-def 0), %70:vr128
1680B	  %75:vr128 = PSHUFDri killed %70:vr128, -11
1696B	  %76:vr128 = COPY killed %75:vr128
1712B	  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), killed %67:vr128
1728B	  %77:vr128 = COPY %10:vr128
1744B	  %77:vr128 = PADDDrr %77:vr128(tied-def 0), %128:vr128
1760B	  %78:vr128 = COPY %10:vr128
1776B	  %78:vr128 = PADDDrr %78:vr128(tied-def 0), %129:vr128
1792B	  %79:vr128 = PSHUFDri %77:vr128, -11
1808B	  %80:vr128 = COPY killed %79:vr128
1824B	  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), killed %73:vr128
1840B	  %81:vr128 = COPY killed %77:vr128
1856B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), killed %71:vr128
1872B	  %82:vr128 = PSHUFDri %78:vr128, -11
1888B	  %83:vr128 = COPY killed %82:vr128
1904B	  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), killed %76:vr128
1920B	  %84:vr128 = COPY killed %78:vr128
1936B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), killed %74:vr128
1952B	  %85:vr128 = COPY %10:vr128
1968B	  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
1984B	  %86:vr128 = COPY %10:vr128
2000B	  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
2016B	  %87:vr128 = COPY killed %81:vr128
2032B	  %87:vr128 = PMULUDQrr %87:vr128(tied-def 0), %85:vr128
2048B	  %88:vr128 = PSHUFDri killed %87:vr128, -24
2064B	  %89:vr128 = PSHUFDri killed %85:vr128, -11
2080B	  %90:vr128 = COPY killed %89:vr128
2096B	  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), killed %80:vr128
2112B	  %91:vr128 = PSHUFDri killed %90:vr128, -24
2128B	  %11:vr128 = COPY killed %88:vr128
2144B	  %11:vr128 = PUNPCKLDQrr %11:vr128(tied-def 0), killed %91:vr128
2160B	  %92:vr128 = COPY killed %84:vr128
2176B	  %92:vr128 = PMULUDQrr %92:vr128(tied-def 0), %86:vr128
2192B	  %93:vr128 = PSHUFDri killed %92:vr128, -24
2208B	  %94:vr128 = PSHUFDri killed %86:vr128, -11
2224B	  %95:vr128 = COPY killed %94:vr128
2240B	  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), killed %83:vr128
2256B	  %96:vr128 = PSHUFDri killed %95:vr128, -24
2272B	  %12:vr128 = COPY killed %93:vr128
2288B	  %12:vr128 = PUNPCKLDQrr %12:vr128(tied-def 0), killed %96:vr128
2304B	  %13:vr128 = COPY killed %10:vr128
2320B	  %13:vr128 = PADDDrr %13:vr128(tied-def 0), %132:vr128
2336B	  %14:gr32 = COPY killed %7:gr32
2352B	  %14:gr32 = ADD32ri8 %14:gr32(tied-def 0), -4, implicit-def $eflags
2368B	  %135:gr32 = COPY killed %14:gr32
2384B	  %136:vr128 = COPY %11:vr128
2400B	  %137:vr128 = COPY %12:vr128
2416B	  %138:vr128 = COPY %13:vr128
2432B	  %139:vr128 = COPY %11:vr128
2448B	  %140:vr128 = COPY %12:vr128
2464B	  %141:vr128 = COPY killed %11:vr128
2480B	  %142:vr128 = COPY killed %12:vr128
2496B	  %143:vr128 = COPY killed %13:vr128
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

2560B	  %19:vr128 = COPY killed %143:vr128
2576B	  %18:vr128 = COPY killed %142:vr128
2592B	  %17:vr128 = COPY killed %141:vr128
2608B	  %16:vr128 = COPY killed %140:vr128
2624B	  %15:vr128 = COPY killed %139:vr128
2640B	  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
2656B	  %148:vr128 = COPY killed %15:vr128
2672B	  %149:vr128 = COPY killed %16:vr128
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
2768B	  %144:gr32 = COPY killed %5:gr32
2784B	  %145:vr128 = COPY killed %17:vr128
2800B	  %146:vr128 = COPY killed %18:vr128
2816B	  %147:vr128 = COPY killed %19:vr128

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

2848B	  %23:vr128 = COPY killed %147:vr128
2864B	  %22:vr128 = COPY killed %146:vr128
2880B	  %21:vr128 = COPY killed %145:vr128
2896B	  %20:gr32 = COPY killed %144:gr32
2912B	  %97:vr128 = COPY %23:vr128
2928B	  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
2944B	  %101:vr128 = PSHUFDri %21:vr128, -11
2960B	  %98:vr128 = COPY killed %21:vr128
2976B	  %98:vr128 = PMULUDQrr %98:vr128(tied-def 0), %23:vr128
2992B	  %99:vr128 = PSHUFDri killed %98:vr128, -24
3008B	  %100:vr128 = PSHUFDri %23:vr128, -11
3024B	  %102:vr128 = COPY killed %100:vr128
3040B	  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), killed %101:vr128
3056B	  %103:vr128 = PSHUFDri killed %102:vr128, -24
3072B	  %24:vr128 = COPY killed %99:vr128
3088B	  %24:vr128 = PUNPCKLDQrr %24:vr128(tied-def 0), killed %103:vr128
3104B	  %106:vr128 = PSHUFDri %22:vr128, -11
3120B	  %104:vr128 = COPY killed %22:vr128
3136B	  %104:vr128 = PMULUDQrr %104:vr128(tied-def 0), %97:vr128
3152B	  %105:vr128 = PSHUFDri killed %104:vr128, -24
3168B	  %107:vr128 = PSHUFDri killed %97:vr128, -11
3184B	  %108:vr128 = COPY killed %107:vr128
3200B	  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), killed %106:vr128
3216B	  %109:vr128 = PSHUFDri killed %108:vr128, -24
3232B	  %25:vr128 = COPY killed %105:vr128
3248B	  %25:vr128 = PUNPCKLDQrr %25:vr128(tied-def 0), killed %109:vr128
3264B	  %26:vr128 = COPY killed %23:vr128
3280B	  %26:vr128 = PADDDrr %26:vr128(tied-def 0), %134:vr128
3296B	  %27:gr32 = COPY killed %20:gr32
3312B	  %27:gr32 = ADD32ri8 %27:gr32(tied-def 0), -1, implicit-def $eflags
3328B	  %144:gr32 = COPY killed %27:gr32
3344B	  %145:vr128 = COPY %24:vr128
3360B	  %146:vr128 = COPY %25:vr128
3376B	  %147:vr128 = COPY killed %26:vr128
3392B	  %148:vr128 = COPY killed %24:vr128
3408B	  %149:vr128 = COPY killed %25:vr128
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

3472B	  %29:vr128 = COPY killed %149:vr128
3488B	  %28:vr128 = COPY killed %148:vr128
3504B	  %110:vr128 = PSHUFDri %28:vr128, -11
3520B	  %111:vr128 = PSHUFDri %29:vr128, -11
3536B	  %112:vr128 = COPY killed %111:vr128
3552B	  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), killed %110:vr128
3568B	  %113:vr128 = COPY killed %29:vr128
3584B	  %113:vr128 = PMULUDQrr %113:vr128(tied-def 0), killed %28:vr128
3600B	  %114:vr128 = PSHUFDri %113:vr128, -18
3616B	  %115:vr128 = COPY killed %114:vr128
3632B	  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), killed %113:vr128
3648B	  %116:vr128 = PSHUFDri %112:vr128, -86
3664B	  %117:vr128 = COPY killed %116:vr128
3680B	  %117:vr128 = PMULUDQrr %117:vr128(tied-def 0), killed %112:vr128
3696B	  %118:vr128 = COPY killed %117:vr128
3712B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), killed %115:vr128
3728B	  %30:gr32 = MOVPDI2DIrr killed %118:vr128
3744B	  CMP32rr killed %1:gr32, %2:gr32, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3792B	  %154:gr32 = COPY killed %30:gr32
3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3840B	  %3:gr32 = COPY killed %2:gr32
3856B	  %3:gr32 = ADD32ri8_DB %3:gr32(tied-def 0), 2, implicit-def dead $eflags
3872B	  %150:gr32 = COPY killed %30:gr32
3888B	  %151:gr32 = COPY killed %3:gr32

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3920B	  %32:gr32 = COPY killed %151:gr32
3936B	  %31:gr32 = COPY killed %150:gr32
3952B	  %33:gr32 = COPY killed %0:gr32
3968B	  %33:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def dead $eflags
3984B	  %152:gr32 = COPY killed %31:gr32
4000B	  %153:gr32 = COPY killed %32:gr32

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

4032B	  %35:gr32 = COPY killed %153:gr32
4048B	  %34:gr32 = COPY killed %152:gr32
4064B	  %36:gr32 = COPY killed %34:gr32
4080B	  %36:gr32 = nsw IMUL32rr %36:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
4096B	  %37:gr32 = COPY killed %35:gr32
4112B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
4128B	  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
4144B	  %152:gr32 = COPY %36:gr32
4160B	  %153:gr32 = COPY killed %37:gr32
4176B	  %154:gr32 = COPY killed %36:gr32
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15

4240B	  %38:gr32 = COPY killed %154:gr32
4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4272B	  %121:gr64 = MOV32ri64 @.str
4288B	  %122:gr32 = MOV32r0 implicit-def dead $eflags
4304B	  %123:gr8 = COPY %122.sub_8bit:gr32
4320B	  $rdi = COPY killed %121:gr64
4336B	  $esi = COPY killed %38:gr32
4352B	  $al = COPY killed %123:gr8
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = COPY killed %122:gr32
4416B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  %40:gr64 = MOV32ri64 @.str
48B	  %41:gr32 = MOV32r0 implicit-def dead $eflags
64B	  %42:gr8 = COPY %41.sub_8bit:gr32
80B	  %43:gr32 = MOV32ri 1000
96B	  $rdi = COPY %40:gr64
112B	  $esi = COPY %43:gr32
128B	  $al = COPY %42:gr8
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  %45:gr64 = MOV32ri64 @.str.1
208B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = COPY %45:gr64
240B	  $rsi = COPY %46:gr64
256B	  $al = COPY %42:gr8
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  %39:gr32 = MOV32ri 1
336B	  CMP32ri8 %0:gr32, 2, implicit-def $eflags
352B	  %154:gr32 = COPY %39:gr32
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

416B	  undef %155.sub_32bit:gr64 = COPY %0:gr32
432B	  %1:gr32 = LEA64_32r %155:gr64, 1, $noreg, -1, $noreg
448B	  CMP32ri8 %1:gr32, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

496B	  %50:gr32 = MOV32ri 2
512B	  %49:gr32 = MOV32ri 1
528B	  %150:gr32 = COPY %49:gr32
544B	  %151:gr32 = COPY %50:gr32
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

592B	  %2:gr32 = COPY %1:gr32
608B	  %2:gr32 = AND32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
624B	  undef %156.sub_32bit:gr64 = COPY %2:gr32
640B	  %55:gr32 = LEA64_32r %156:gr64, 1, $noreg, -8, $noreg
656B	  %56:gr32 = COPY %55:gr32
672B	  %56:gr32 = exact SHR32ri %56:gr32(tied-def 0), 3, implicit-def dead $eflags
688B	  %4:gr32 = COPY %56:gr32
704B	  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  %5:gr32 = COPY %4:gr32
736B	  %5:gr32 = AND32ri8 %5:gr32(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 %55:gr32, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
832B	  %139:vr128 = IMPLICIT_DEF
848B	  %140:vr128 = IMPLICIT_DEF
864B	  %141:vr128 = COPY %53:vr128
880B	  %142:vr128 = COPY %53:vr128
896B	  %143:vr128 = COPY %54:vr128
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

944B	  %6:gr32 = COPY %4:gr32
960B	  %6:gr32 = AND32ri8 %6:gr32(tied-def 0), -4, implicit-def dead $eflags
976B	  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1008B	  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1024B	  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1136B	  %135:gr32 = COPY %6:gr32
1152B	  %136:vr128 = COPY %58:vr128
1168B	  %137:vr128 = COPY %58:vr128
1184B	  %138:vr128 = COPY %59:vr128

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

1216B	  %10:vr128 = COPY %138:vr128
1232B	  %9:vr128 = COPY %137:vr128
1248B	  %8:vr128 = COPY %136:vr128
1264B	  %7:gr32 = COPY %135:gr32
1280B	  %60:vr128 = COPY %10:vr128
1296B	  %60:vr128 = PADDDrr %60:vr128(tied-def 0), %125:vr128
1312B	  %61:vr128 = PSHUFDri %10:vr128, -11
1328B	  %62:vr128 = PSHUFDri %8:vr128, -11
1344B	  %63:vr128 = COPY %62:vr128
1360B	  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), %61:vr128
1376B	  %64:vr128 = COPY %8:vr128
1392B	  %64:vr128 = PMULUDQrr %64:vr128(tied-def 0), %10:vr128
1408B	  %65:vr128 = PSHUFDri %9:vr128, -11
1424B	  %66:vr128 = PSHUFDri %60:vr128, -11
1440B	  %67:vr128 = COPY %66:vr128
1456B	  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), %65:vr128
1472B	  %68:vr128 = COPY %60:vr128
1488B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %9:vr128
1504B	  %69:vr128 = COPY %10:vr128
1520B	  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
1536B	  %70:vr128 = COPY %10:vr128
1552B	  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
1568B	  %71:vr128 = COPY %64:vr128
1584B	  %71:vr128 = PMULUDQrr %71:vr128(tied-def 0), %69:vr128
1600B	  %72:vr128 = PSHUFDri %69:vr128, -11
1616B	  %73:vr128 = COPY %72:vr128
1632B	  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), %63:vr128
1648B	  %74:vr128 = COPY %68:vr128
1664B	  %74:vr128 = PMULUDQrr %74:vr128(tied-def 0), %70:vr128
1680B	  %75:vr128 = PSHUFDri %70:vr128, -11
1696B	  %76:vr128 = COPY %75:vr128
1712B	  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), %67:vr128
1728B	  %77:vr128 = COPY %10:vr128
1744B	  %77:vr128 = PADDDrr %77:vr128(tied-def 0), %128:vr128
1760B	  %78:vr128 = COPY %10:vr128
1776B	  %78:vr128 = PADDDrr %78:vr128(tied-def 0), %129:vr128
1792B	  %79:vr128 = PSHUFDri %77:vr128, -11
1808B	  %80:vr128 = COPY %79:vr128
1824B	  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), %73:vr128
1840B	  %81:vr128 = COPY %77:vr128
1856B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %71:vr128
1872B	  %82:vr128 = PSHUFDri %78:vr128, -11
1888B	  %83:vr128 = COPY %82:vr128
1904B	  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), %76:vr128
1920B	  %84:vr128 = COPY %78:vr128
1936B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %74:vr128
1952B	  %85:vr128 = COPY %10:vr128
1968B	  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
1984B	  %86:vr128 = COPY %10:vr128
2000B	  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
2016B	  %87:vr128 = COPY %81:vr128
2032B	  %87:vr128 = PMULUDQrr %87:vr128(tied-def 0), %85:vr128
2048B	  %88:vr128 = PSHUFDri %87:vr128, -24
2064B	  %89:vr128 = PSHUFDri %85:vr128, -11
2080B	  %90:vr128 = COPY %89:vr128
2096B	  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), %80:vr128
2112B	  %91:vr128 = PSHUFDri %90:vr128, -24
2128B	  %11:vr128 = COPY %88:vr128
2144B	  %11:vr128 = PUNPCKLDQrr %11:vr128(tied-def 0), %91:vr128
2160B	  %92:vr128 = COPY %84:vr128
2176B	  %92:vr128 = PMULUDQrr %92:vr128(tied-def 0), %86:vr128
2192B	  %93:vr128 = PSHUFDri %92:vr128, -24
2208B	  %94:vr128 = PSHUFDri %86:vr128, -11
2224B	  %95:vr128 = COPY %94:vr128
2240B	  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), %83:vr128
2256B	  %96:vr128 = PSHUFDri %95:vr128, -24
2272B	  %12:vr128 = COPY %93:vr128
2288B	  %12:vr128 = PUNPCKLDQrr %12:vr128(tied-def 0), %96:vr128
2304B	  %13:vr128 = COPY %10:vr128
2320B	  %13:vr128 = PADDDrr %13:vr128(tied-def 0), %132:vr128
2336B	  %14:gr32 = COPY %7:gr32
2352B	  %14:gr32 = ADD32ri8 %14:gr32(tied-def 0), -4, implicit-def $eflags
2368B	  %135:gr32 = COPY %14:gr32
2384B	  %136:vr128 = COPY %11:vr128
2400B	  %137:vr128 = COPY %12:vr128
2416B	  %138:vr128 = COPY %13:vr128
2432B	  %139:vr128 = COPY %11:vr128
2448B	  %140:vr128 = COPY %12:vr128
2464B	  %141:vr128 = COPY %11:vr128
2480B	  %142:vr128 = COPY %12:vr128
2496B	  %143:vr128 = COPY %13:vr128
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

2560B	  %19:vr128 = COPY %143:vr128
2576B	  %18:vr128 = COPY %142:vr128
2592B	  %17:vr128 = COPY %141:vr128
2608B	  %16:vr128 = COPY %140:vr128
2624B	  %15:vr128 = COPY %139:vr128
2640B	  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
2656B	  %148:vr128 = COPY %15:vr128
2672B	  %149:vr128 = COPY %16:vr128
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
2768B	  %144:gr32 = COPY %5:gr32
2784B	  %145:vr128 = COPY %17:vr128
2800B	  %146:vr128 = COPY %18:vr128
2816B	  %147:vr128 = COPY %19:vr128

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

2848B	  %23:vr128 = COPY %147:vr128
2864B	  %22:vr128 = COPY %146:vr128
2880B	  %21:vr128 = COPY %145:vr128
2896B	  %20:gr32 = COPY %144:gr32
2912B	  %97:vr128 = COPY %23:vr128
2928B	  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
2944B	  %101:vr128 = PSHUFDri %21:vr128, -11
2960B	  %98:vr128 = COPY %21:vr128
2976B	  %98:vr128 = PMULUDQrr %98:vr128(tied-def 0), %23:vr128
2992B	  %99:vr128 = PSHUFDri %98:vr128, -24
3008B	  %100:vr128 = PSHUFDri %23:vr128, -11
3024B	  %102:vr128 = COPY %100:vr128
3040B	  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), %101:vr128
3056B	  %103:vr128 = PSHUFDri %102:vr128, -24
3072B	  %24:vr128 = COPY %99:vr128
3088B	  %24:vr128 = PUNPCKLDQrr %24:vr128(tied-def 0), %103:vr128
3104B	  %106:vr128 = PSHUFDri %22:vr128, -11
3120B	  %104:vr128 = COPY %22:vr128
3136B	  %104:vr128 = PMULUDQrr %104:vr128(tied-def 0), %97:vr128
3152B	  %105:vr128 = PSHUFDri %104:vr128, -24
3168B	  %107:vr128 = PSHUFDri %97:vr128, -11
3184B	  %108:vr128 = COPY %107:vr128
3200B	  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), %106:vr128
3216B	  %109:vr128 = PSHUFDri %108:vr128, -24
3232B	  %25:vr128 = COPY %105:vr128
3248B	  %25:vr128 = PUNPCKLDQrr %25:vr128(tied-def 0), %109:vr128
3264B	  %26:vr128 = COPY %23:vr128
3280B	  %26:vr128 = PADDDrr %26:vr128(tied-def 0), %134:vr128
3296B	  %27:gr32 = COPY %20:gr32
3312B	  %27:gr32 = ADD32ri8 %27:gr32(tied-def 0), -1, implicit-def $eflags
3328B	  %144:gr32 = COPY %27:gr32
3344B	  %145:vr128 = COPY %24:vr128
3360B	  %146:vr128 = COPY %25:vr128
3376B	  %147:vr128 = COPY %26:vr128
3392B	  %148:vr128 = COPY %24:vr128
3408B	  %149:vr128 = COPY %25:vr128
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

3472B	  %29:vr128 = COPY %149:vr128
3488B	  %28:vr128 = COPY %148:vr128
3504B	  %110:vr128 = PSHUFDri %28:vr128, -11
3520B	  %111:vr128 = PSHUFDri %29:vr128, -11
3536B	  %112:vr128 = COPY %111:vr128
3552B	  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), %110:vr128
3568B	  %113:vr128 = COPY %29:vr128
3584B	  %113:vr128 = PMULUDQrr %113:vr128(tied-def 0), %28:vr128
3600B	  %114:vr128 = PSHUFDri %113:vr128, -18
3616B	  %115:vr128 = COPY %114:vr128
3632B	  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), %113:vr128
3648B	  %116:vr128 = PSHUFDri %112:vr128, -86
3664B	  %117:vr128 = COPY %116:vr128
3680B	  %117:vr128 = PMULUDQrr %117:vr128(tied-def 0), %112:vr128
3696B	  %118:vr128 = COPY %117:vr128
3712B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %115:vr128
3728B	  %30:gr32 = MOVPDI2DIrr %118:vr128
3744B	  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3792B	  %154:gr32 = COPY %30:gr32
3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3840B	  %3:gr32 = COPY %2:gr32
3856B	  %3:gr32 = ADD32ri8_DB %3:gr32(tied-def 0), 2, implicit-def dead $eflags
3872B	  %150:gr32 = COPY %30:gr32
3888B	  %151:gr32 = COPY %3:gr32

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3920B	  %32:gr32 = COPY %151:gr32
3936B	  %31:gr32 = COPY %150:gr32
3952B	  %33:gr32 = COPY %0:gr32
3968B	  %33:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def dead $eflags
3984B	  %152:gr32 = COPY %31:gr32
4000B	  %153:gr32 = COPY %32:gr32

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

4032B	  %35:gr32 = COPY %153:gr32
4048B	  %34:gr32 = COPY %152:gr32
4064B	  %36:gr32 = COPY %34:gr32
4080B	  %36:gr32 = nsw IMUL32rr %36:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
4096B	  %37:gr32 = COPY %35:gr32
4112B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
4128B	  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
4144B	  %152:gr32 = COPY %36:gr32
4160B	  %153:gr32 = COPY %37:gr32
4176B	  %154:gr32 = COPY %36:gr32
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15

4240B	  %38:gr32 = COPY %154:gr32
4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4272B	  %121:gr64 = MOV32ri64 @.str
4288B	  %122:gr32 = MOV32r0 implicit-def dead $eflags
4304B	  %123:gr8 = COPY %122.sub_8bit:gr32
4320B	  $rdi = COPY %121:gr64
4336B	  $esi = COPY %38:gr32
4352B	  $al = COPY %123:gr8
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = COPY %122:gr32
4416B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  %40:gr64 = MOV32ri64 @.str
48B	  %41:gr32 = MOV32r0 implicit-def dead $eflags
64B	  %42:gr8 = COPY %41.sub_8bit:gr32
80B	  %43:gr32 = MOV32ri 1000
96B	  $rdi = COPY %40:gr64
112B	  $esi = COPY %43:gr32
128B	  $al = COPY %42:gr8
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  %45:gr64 = MOV32ri64 @.str.1
208B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = COPY %45:gr64
240B	  $rsi = COPY %46:gr64
256B	  $al = COPY %42:gr8
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %0:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  %39:gr32 = MOV32ri 1
336B	  CMP32ri8 %0:gr32, 2, implicit-def $eflags
352B	  %154:gr32 = COPY %39:gr32
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

416B	  undef %155.sub_32bit:gr64 = COPY %0:gr32
432B	  %1:gr32 = LEA64_32r %155:gr64, 1, $noreg, -1, $noreg
448B	  CMP32ri8 %1:gr32, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

496B	  %50:gr32 = MOV32ri 2
512B	  %49:gr32 = MOV32ri 1
528B	  %150:gr32 = COPY %49:gr32
544B	  %151:gr32 = COPY %50:gr32
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

592B	  %2:gr32 = COPY %1:gr32
608B	  %2:gr32 = AND32ri8 %2:gr32(tied-def 0), -8, implicit-def dead $eflags
624B	  undef %156.sub_32bit:gr64 = COPY %2:gr32
640B	  %55:gr32 = LEA64_32r %156:gr64, 1, $noreg, -8, $noreg
656B	  %56:gr32 = COPY %55:gr32
672B	  %56:gr32 = exact SHR32ri %56:gr32(tied-def 0), 3, implicit-def dead $eflags
688B	  %4:gr32 = COPY %56:gr32
704B	  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  %5:gr32 = COPY %4:gr32
736B	  %5:gr32 = AND32ri8 %5:gr32(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 %55:gr32, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %54:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  %53:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
832B	  %139:vr128 = IMPLICIT_DEF
848B	  %140:vr128 = IMPLICIT_DEF
864B	  %141:vr128 = COPY %53:vr128
880B	  %142:vr128 = COPY %53:vr128
896B	  %143:vr128 = COPY %54:vr128
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

944B	  %6:gr32 = COPY %4:gr32
960B	  %6:gr32 = AND32ri8 %6:gr32(tied-def 0), -4, implicit-def dead $eflags
976B	  %59:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  %58:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1008B	  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1024B	  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1136B	  %135:gr32 = COPY %6:gr32
1152B	  %136:vr128 = COPY %58:vr128
1168B	  %137:vr128 = COPY %58:vr128
1184B	  %138:vr128 = COPY %59:vr128

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

1216B	  %10:vr128 = COPY %138:vr128
1232B	  %9:vr128 = COPY %137:vr128
1248B	  %8:vr128 = COPY %136:vr128
1264B	  %7:gr32 = COPY %135:gr32
1280B	  %60:vr128 = COPY %10:vr128
1296B	  %60:vr128 = PADDDrr %60:vr128(tied-def 0), %125:vr128
1312B	  %61:vr128 = PSHUFDri %10:vr128, -11
1328B	  %62:vr128 = PSHUFDri %8:vr128, -11
1344B	  %63:vr128 = COPY %62:vr128
1360B	  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), %61:vr128
1376B	  %64:vr128 = COPY %8:vr128
1392B	  %64:vr128 = PMULUDQrr %64:vr128(tied-def 0), %10:vr128
1408B	  %65:vr128 = PSHUFDri %9:vr128, -11
1424B	  %66:vr128 = PSHUFDri %60:vr128, -11
1440B	  %67:vr128 = COPY %66:vr128
1456B	  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), %65:vr128
1472B	  %68:vr128 = COPY %60:vr128
1488B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %9:vr128
1504B	  %69:vr128 = COPY %10:vr128
1520B	  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
1536B	  %70:vr128 = COPY %10:vr128
1552B	  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
1568B	  %71:vr128 = COPY %64:vr128
1584B	  %71:vr128 = PMULUDQrr %71:vr128(tied-def 0), %69:vr128
1600B	  %72:vr128 = PSHUFDri %69:vr128, -11
1616B	  %73:vr128 = COPY %72:vr128
1632B	  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), %63:vr128
1648B	  %74:vr128 = COPY %68:vr128
1664B	  %74:vr128 = PMULUDQrr %74:vr128(tied-def 0), %70:vr128
1680B	  %75:vr128 = PSHUFDri %70:vr128, -11
1696B	  %76:vr128 = COPY %75:vr128
1712B	  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), %67:vr128
1728B	  %77:vr128 = COPY %10:vr128
1744B	  %77:vr128 = PADDDrr %77:vr128(tied-def 0), %128:vr128
1760B	  %78:vr128 = COPY %10:vr128
1776B	  %78:vr128 = PADDDrr %78:vr128(tied-def 0), %129:vr128
1792B	  %79:vr128 = PSHUFDri %77:vr128, -11
1808B	  %80:vr128 = COPY %79:vr128
1824B	  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), %73:vr128
1840B	  %81:vr128 = COPY %77:vr128
1856B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %71:vr128
1872B	  %82:vr128 = PSHUFDri %78:vr128, -11
1888B	  %83:vr128 = COPY %82:vr128
1904B	  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), %76:vr128
1920B	  %84:vr128 = COPY %78:vr128
1936B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %74:vr128
1952B	  %85:vr128 = COPY %10:vr128
1968B	  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
1984B	  %86:vr128 = COPY %10:vr128
2000B	  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
2016B	  %87:vr128 = COPY %81:vr128
2032B	  %87:vr128 = PMULUDQrr %87:vr128(tied-def 0), %85:vr128
2048B	  %88:vr128 = PSHUFDri %87:vr128, -24
2064B	  %89:vr128 = PSHUFDri %85:vr128, -11
2080B	  %90:vr128 = COPY %89:vr128
2096B	  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), %80:vr128
2112B	  %91:vr128 = PSHUFDri %90:vr128, -24
2128B	  %11:vr128 = COPY %88:vr128
2144B	  %11:vr128 = PUNPCKLDQrr %11:vr128(tied-def 0), %91:vr128
2160B	  %92:vr128 = COPY %84:vr128
2176B	  %92:vr128 = PMULUDQrr %92:vr128(tied-def 0), %86:vr128
2192B	  %93:vr128 = PSHUFDri %92:vr128, -24
2208B	  %94:vr128 = PSHUFDri %86:vr128, -11
2224B	  %95:vr128 = COPY %94:vr128
2240B	  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), %83:vr128
2256B	  %96:vr128 = PSHUFDri %95:vr128, -24
2272B	  %12:vr128 = COPY %93:vr128
2288B	  %12:vr128 = PUNPCKLDQrr %12:vr128(tied-def 0), %96:vr128
2304B	  %13:vr128 = COPY %10:vr128
2320B	  %13:vr128 = PADDDrr %13:vr128(tied-def 0), %132:vr128
2336B	  %14:gr32 = COPY %7:gr32
2352B	  %14:gr32 = ADD32ri8 %14:gr32(tied-def 0), -4, implicit-def $eflags
2368B	  %135:gr32 = COPY %14:gr32
2384B	  %136:vr128 = COPY %11:vr128
2400B	  %137:vr128 = COPY %12:vr128
2416B	  %138:vr128 = COPY %13:vr128
2432B	  %139:vr128 = COPY %11:vr128
2448B	  %140:vr128 = COPY %12:vr128
2464B	  %141:vr128 = COPY %11:vr128
2480B	  %142:vr128 = COPY %12:vr128
2496B	  %143:vr128 = COPY %13:vr128
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

2560B	  %19:vr128 = COPY %143:vr128
2576B	  %18:vr128 = COPY %142:vr128
2592B	  %17:vr128 = COPY %141:vr128
2608B	  %16:vr128 = COPY %140:vr128
2624B	  %15:vr128 = COPY %139:vr128
2640B	  TEST32rr %5:gr32, %5:gr32, implicit-def $eflags
2656B	  %148:vr128 = COPY %15:vr128
2672B	  %149:vr128 = COPY %16:vr128
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
2768B	  %144:gr32 = COPY %5:gr32
2784B	  %145:vr128 = COPY %17:vr128
2800B	  %146:vr128 = COPY %18:vr128
2816B	  %147:vr128 = COPY %19:vr128

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

2848B	  %23:vr128 = COPY %147:vr128
2864B	  %22:vr128 = COPY %146:vr128
2880B	  %21:vr128 = COPY %145:vr128
2896B	  %20:gr32 = COPY %144:gr32
2912B	  %97:vr128 = COPY %23:vr128
2928B	  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
2944B	  %101:vr128 = PSHUFDri %21:vr128, -11
2960B	  %98:vr128 = COPY %21:vr128
2976B	  %98:vr128 = PMULUDQrr %98:vr128(tied-def 0), %23:vr128
2992B	  %99:vr128 = PSHUFDri %98:vr128, -24
3008B	  %100:vr128 = PSHUFDri %23:vr128, -11
3024B	  %102:vr128 = COPY %100:vr128
3040B	  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), %101:vr128
3056B	  %103:vr128 = PSHUFDri %102:vr128, -24
3072B	  %24:vr128 = COPY %99:vr128
3088B	  %24:vr128 = PUNPCKLDQrr %24:vr128(tied-def 0), %103:vr128
3104B	  %106:vr128 = PSHUFDri %22:vr128, -11
3120B	  %104:vr128 = COPY %22:vr128
3136B	  %104:vr128 = PMULUDQrr %104:vr128(tied-def 0), %97:vr128
3152B	  %105:vr128 = PSHUFDri %104:vr128, -24
3168B	  %107:vr128 = PSHUFDri %97:vr128, -11
3184B	  %108:vr128 = COPY %107:vr128
3200B	  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), %106:vr128
3216B	  %109:vr128 = PSHUFDri %108:vr128, -24
3232B	  %25:vr128 = COPY %105:vr128
3248B	  %25:vr128 = PUNPCKLDQrr %25:vr128(tied-def 0), %109:vr128
3264B	  %26:vr128 = COPY %23:vr128
3280B	  %26:vr128 = PADDDrr %26:vr128(tied-def 0), %134:vr128
3296B	  %27:gr32 = COPY %20:gr32
3312B	  %27:gr32 = ADD32ri8 %27:gr32(tied-def 0), -1, implicit-def $eflags
3328B	  %144:gr32 = COPY %27:gr32
3344B	  %145:vr128 = COPY %24:vr128
3360B	  %146:vr128 = COPY %25:vr128
3376B	  %147:vr128 = COPY %26:vr128
3392B	  %148:vr128 = COPY %24:vr128
3408B	  %149:vr128 = COPY %25:vr128
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

3472B	  %29:vr128 = COPY %149:vr128
3488B	  %28:vr128 = COPY %148:vr128
3504B	  %110:vr128 = PSHUFDri %28:vr128, -11
3520B	  %111:vr128 = PSHUFDri %29:vr128, -11
3536B	  %112:vr128 = COPY %111:vr128
3552B	  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), %110:vr128
3568B	  %113:vr128 = COPY %29:vr128
3584B	  %113:vr128 = PMULUDQrr %113:vr128(tied-def 0), %28:vr128
3600B	  %114:vr128 = PSHUFDri %113:vr128, -18
3616B	  %115:vr128 = COPY %114:vr128
3632B	  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), %113:vr128
3648B	  %116:vr128 = PSHUFDri %112:vr128, -86
3664B	  %117:vr128 = COPY %116:vr128
3680B	  %117:vr128 = PMULUDQrr %117:vr128(tied-def 0), %112:vr128
3696B	  %118:vr128 = COPY %117:vr128
3712B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %115:vr128
3728B	  %30:gr32 = MOVPDI2DIrr %118:vr128
3744B	  CMP32rr %1:gr32, %2:gr32, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3792B	  %154:gr32 = COPY %30:gr32
3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3840B	  %3:gr32 = COPY %2:gr32
3856B	  %3:gr32 = ADD32ri8_DB %3:gr32(tied-def 0), 2, implicit-def dead $eflags
3872B	  %150:gr32 = COPY %30:gr32
3888B	  %151:gr32 = COPY %3:gr32

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3920B	  %32:gr32 = COPY %151:gr32
3936B	  %31:gr32 = COPY %150:gr32
3952B	  %33:gr32 = COPY %0:gr32
3968B	  %33:gr32 = ADD32ri8 %33:gr32(tied-def 0), 1, implicit-def dead $eflags
3984B	  %152:gr32 = COPY %31:gr32
4000B	  %153:gr32 = COPY %32:gr32

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

4032B	  %35:gr32 = COPY %153:gr32
4048B	  %34:gr32 = COPY %152:gr32
4064B	  %36:gr32 = COPY %34:gr32
4080B	  %36:gr32 = nsw IMUL32rr %36:gr32(tied-def 0), %35:gr32, implicit-def dead $eflags
4096B	  %37:gr32 = COPY %35:gr32
4112B	  %37:gr32 = ADD32ri8 %37:gr32(tied-def 0), 1, implicit-def dead $eflags
4128B	  CMP32rr %33:gr32, %37:gr32, implicit-def $eflags
4144B	  %152:gr32 = COPY %36:gr32
4160B	  %153:gr32 = COPY %37:gr32
4176B	  %154:gr32 = COPY %36:gr32
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15

4240B	  %38:gr32 = COPY %154:gr32
4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4272B	  %121:gr64 = MOV32ri64 @.str
4288B	  %122:gr32 = MOV32r0 implicit-def dead $eflags
4304B	  %123:gr8 = COPY %122.sub_8bit:gr32
4320B	  $rdi = COPY %121:gr64
4336B	  $esi = COPY %38:gr32
4352B	  $al = COPY %123:gr8
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = COPY %122:gr32
4416B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
240B	  $rsi = COPY %46:gr64
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  undef %155.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  %154:gr32 = MOV32ri 1
336B	  CMP32ri8 %155.sub_32bit:gr64_with_sub_8bit, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

432B	  %1:gr32 = LEA64_32r %155:gr64_with_sub_8bit, 1, $noreg, -1, $noreg
448B	  CMP32ri8 %1:gr32, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

496B	  undef %156.sub_32bit:gr64_with_sub_8bit = MOV32ri 2
512B	  %154:gr32 = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

592B	  undef %156.sub_32bit:gr64_with_sub_8bit = COPY %1:gr32
608B	  %156.sub_32bit:gr64_with_sub_8bit = AND32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), -8, implicit-def dead $eflags
640B	  %55:gr32 = LEA64_32r %156:gr64_with_sub_8bit, 1, $noreg, -8, $noreg
656B	  %4:gr32 = COPY %55:gr32
672B	  %4:gr32 = exact SHR32ri %4:gr32(tied-def 0), 3, implicit-def dead $eflags
704B	  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  %144:gr32 = COPY %4:gr32
736B	  %144:gr32 = AND32ri8 %144:gr32(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 %55:gr32, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  %146:vr128 = COPY %136:vr128
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

960B	  %4:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
976B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1008B	  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1024B	  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  %146:vr128 = COPY %136:vr128

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

1280B	  %68:vr128 = COPY %143:vr128
1296B	  %68:vr128 = PADDDrr %68:vr128(tied-def 0), %125:vr128
1312B	  %61:vr128 = PSHUFDri %143:vr128, -11
1328B	  %63:vr128 = PSHUFDri %136:vr128, -11
1360B	  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), %61:vr128
1392B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
1408B	  %65:vr128 = PSHUFDri %146:vr128, -11
1424B	  %67:vr128 = PSHUFDri %68:vr128, -11
1456B	  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), %65:vr128
1488B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %146:vr128
1504B	  %69:vr128 = COPY %143:vr128
1520B	  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
1536B	  %70:vr128 = COPY %143:vr128
1552B	  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
1584B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %69:vr128
1600B	  %73:vr128 = PSHUFDri %69:vr128, -11
1632B	  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), %63:vr128
1664B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
1680B	  %76:vr128 = PSHUFDri %70:vr128, -11
1712B	  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), %67:vr128
1728B	  %81:vr128 = COPY %143:vr128
1744B	  %81:vr128 = PADDDrr %81:vr128(tied-def 0), %128:vr128
1760B	  %84:vr128 = COPY %143:vr128
1776B	  %84:vr128 = PADDDrr %84:vr128(tied-def 0), %129:vr128
1792B	  %80:vr128 = PSHUFDri %81:vr128, -11
1824B	  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), %73:vr128
1856B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %136:vr128
1872B	  %83:vr128 = PSHUFDri %84:vr128, -11
1904B	  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), %76:vr128
1936B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %68:vr128
1952B	  %85:vr128 = COPY %143:vr128
1968B	  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
1984B	  %86:vr128 = COPY %143:vr128
2000B	  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
2032B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
2048B	  %136:vr128 = PSHUFDri %81:vr128, -24
2064B	  %90:vr128 = PSHUFDri %85:vr128, -11
2096B	  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), %80:vr128
2112B	  %91:vr128 = PSHUFDri %90:vr128, -24
2144B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %91:vr128
2176B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
2192B	  %146:vr128 = PSHUFDri %84:vr128, -24
2208B	  %95:vr128 = PSHUFDri %86:vr128, -11
2240B	  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), %83:vr128
2256B	  %96:vr128 = PSHUFDri %95:vr128, -24
2288B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %96:vr128
2320B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %132:vr128
2352B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

2640B	  TEST32rr %144:gr32, %144:gr32, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

2912B	  %97:vr128 = COPY %143:vr128
2928B	  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
2944B	  %101:vr128 = PSHUFDri %136:vr128, -11
2976B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
2992B	  %136:vr128 = PSHUFDri %136:vr128, -24
3008B	  %102:vr128 = PSHUFDri %143:vr128, -11
3040B	  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), %101:vr128
3056B	  %103:vr128 = PSHUFDri %102:vr128, -24
3088B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %103:vr128
3104B	  %106:vr128 = PSHUFDri %146:vr128, -11
3136B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %97:vr128
3152B	  %146:vr128 = PSHUFDri %146:vr128, -24
3168B	  %108:vr128 = PSHUFDri %97:vr128, -11
3200B	  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), %106:vr128
3216B	  %109:vr128 = PSHUFDri %108:vr128, -24
3248B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %109:vr128
3280B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %134:vr128
3312B	  %144:gr32 = ADD32ri8 %144:gr32(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

3504B	  %110:vr128 = PSHUFDri %136:vr128, -11
3520B	  %112:vr128 = PSHUFDri %146:vr128, -11
3552B	  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), %110:vr128
3584B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %136:vr128
3600B	  %115:vr128 = PSHUFDri %146:vr128, -18
3632B	  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), %146:vr128
3648B	  %118:vr128 = PSHUFDri %112:vr128, -86
3680B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %112:vr128
3712B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %115:vr128
3728B	  %154:gr32 = MOVPDI2DIrr %118:vr128
3744B	  CMP32rr %1:gr32, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3856B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8_DB %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3968B	  %155.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %155.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

4080B	  %154:gr32 = nsw IMUL32rr %154:gr32(tied-def 0), %156.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
4112B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags
4128B	  CMP32rr %155.sub_32bit:gr64_with_sub_8bit, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15

4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4336B	  $esi = COPY %154:gr32
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
240B	  $rsi = COPY %46:gr64
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  undef %155.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  %154:gr32 = MOV32ri 1
336B	  CMP32ri8 %155.sub_32bit:gr64_with_sub_8bit, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

432B	  %1:gr32 = LEA64_32r %155:gr64_with_sub_8bit, 1, $noreg, -1, $noreg
448B	  CMP32ri8 %1:gr32, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

496B	  undef %156.sub_32bit:gr64_with_sub_8bit = MOV32ri 2
512B	  %154:gr32 = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

592B	  undef %156.sub_32bit:gr64_with_sub_8bit = COPY %1:gr32
608B	  %156.sub_32bit:gr64_with_sub_8bit = AND32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), -8, implicit-def dead $eflags
640B	  %55:gr32 = LEA64_32r %156:gr64_with_sub_8bit, 1, $noreg, -8, $noreg
656B	  %4:gr32 = COPY %55:gr32
672B	  %4:gr32 = exact SHR32ri %4:gr32(tied-def 0), 3, implicit-def dead $eflags
704B	  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  %144:gr32 = COPY %4:gr32
736B	  %144:gr32 = AND32ri8 %144:gr32(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 %55:gr32, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  %146:vr128 = COPY %136:vr128
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

960B	  %4:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
976B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1008B	  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1024B	  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  %146:vr128 = COPY %136:vr128

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

1280B	  %68:vr128 = COPY %143:vr128
1296B	  %68:vr128 = PADDDrr %68:vr128(tied-def 0), %125:vr128
1312B	  %61:vr128 = PSHUFDri %143:vr128, -11
1328B	  %63:vr128 = PSHUFDri %136:vr128, -11
1360B	  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), %61:vr128
1392B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
1408B	  %65:vr128 = PSHUFDri %146:vr128, -11
1424B	  %67:vr128 = PSHUFDri %68:vr128, -11
1456B	  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), %65:vr128
1488B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %146:vr128
1504B	  %69:vr128 = COPY %143:vr128
1520B	  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
1536B	  %70:vr128 = COPY %143:vr128
1552B	  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
1584B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %69:vr128
1600B	  %73:vr128 = PSHUFDri %69:vr128, -11
1632B	  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), %63:vr128
1664B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
1680B	  %76:vr128 = PSHUFDri %70:vr128, -11
1712B	  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), %67:vr128
1728B	  %81:vr128 = COPY %143:vr128
1744B	  %81:vr128 = PADDDrr %81:vr128(tied-def 0), %128:vr128
1760B	  %84:vr128 = COPY %143:vr128
1776B	  %84:vr128 = PADDDrr %84:vr128(tied-def 0), %129:vr128
1792B	  %80:vr128 = PSHUFDri %81:vr128, -11
1824B	  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), %73:vr128
1856B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %136:vr128
1872B	  %83:vr128 = PSHUFDri %84:vr128, -11
1904B	  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), %76:vr128
1936B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %68:vr128
1952B	  %85:vr128 = COPY %143:vr128
1968B	  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
1984B	  %86:vr128 = COPY %143:vr128
2000B	  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
2032B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
2048B	  %136:vr128 = PSHUFDri %81:vr128, -24
2064B	  %90:vr128 = PSHUFDri %85:vr128, -11
2096B	  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), %80:vr128
2112B	  %91:vr128 = PSHUFDri %90:vr128, -24
2144B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %91:vr128
2176B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
2192B	  %146:vr128 = PSHUFDri %84:vr128, -24
2208B	  %95:vr128 = PSHUFDri %86:vr128, -11
2240B	  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), %83:vr128
2256B	  %96:vr128 = PSHUFDri %95:vr128, -24
2288B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %96:vr128
2320B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %132:vr128
2352B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

2640B	  TEST32rr %144:gr32, %144:gr32, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

2912B	  %97:vr128 = COPY %143:vr128
2928B	  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
2944B	  %101:vr128 = PSHUFDri %136:vr128, -11
2976B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
2992B	  %136:vr128 = PSHUFDri %136:vr128, -24
3008B	  %102:vr128 = PSHUFDri %143:vr128, -11
3040B	  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), %101:vr128
3056B	  %103:vr128 = PSHUFDri %102:vr128, -24
3088B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %103:vr128
3104B	  %106:vr128 = PSHUFDri %146:vr128, -11
3136B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %97:vr128
3152B	  %146:vr128 = PSHUFDri %146:vr128, -24
3168B	  %108:vr128 = PSHUFDri %97:vr128, -11
3200B	  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), %106:vr128
3216B	  %109:vr128 = PSHUFDri %108:vr128, -24
3248B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %109:vr128
3280B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %134:vr128
3312B	  %144:gr32 = ADD32ri8 %144:gr32(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

3504B	  %110:vr128 = PSHUFDri %136:vr128, -11
3520B	  %112:vr128 = PSHUFDri %146:vr128, -11
3552B	  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), %110:vr128
3584B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %136:vr128
3600B	  %115:vr128 = PSHUFDri %146:vr128, -18
3632B	  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), %146:vr128
3648B	  %118:vr128 = PSHUFDri %112:vr128, -86
3680B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %112:vr128
3712B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %115:vr128
3728B	  %154:gr32 = MOVPDI2DIrr %118:vr128
3744B	  CMP32rr %1:gr32, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3856B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8_DB %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3968B	  %155.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %155.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

4080B	  %154:gr32 = nsw IMUL32rr %154:gr32(tied-def 0), %156.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
4112B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags
4128B	  CMP32rr %155.sub_32bit:gr64_with_sub_8bit, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15

4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4336B	  $esi = COPY %154:gr32
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
240B	  $rsi = COPY %46:gr64
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  undef %155.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  %154:gr32 = MOV32ri 1
336B	  CMP32ri8 %155.sub_32bit:gr64_with_sub_8bit, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

432B	  %1:gr32 = LEA64_32r %155:gr64_with_sub_8bit, 1, $noreg, -1, $noreg
448B	  CMP32ri8 %1:gr32, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

496B	  undef %156.sub_32bit:gr64_with_sub_8bit = MOV32ri 2
512B	  %154:gr32 = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

592B	  undef %156.sub_32bit:gr64_with_sub_8bit = COPY %1:gr32
608B	  %156.sub_32bit:gr64_with_sub_8bit = AND32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), -8, implicit-def dead $eflags
640B	  %55:gr32 = LEA64_32r %156:gr64_with_sub_8bit, 1, $noreg, -8, $noreg
656B	  %4:gr32 = COPY %55:gr32
672B	  %4:gr32 = exact SHR32ri %4:gr32(tied-def 0), 3, implicit-def dead $eflags
704B	  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  %144:gr32 = COPY %4:gr32
736B	  %144:gr32 = AND32ri8 %144:gr32(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 %55:gr32, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  %146:vr128 = COPY %136:vr128
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

960B	  %4:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
976B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1008B	  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1024B	  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  %146:vr128 = COPY %136:vr128

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

1280B	  %68:vr128 = COPY %143:vr128
1296B	  %68:vr128 = PADDDrr %68:vr128(tied-def 0), %125:vr128
1312B	  %61:vr128 = PSHUFDri %143:vr128, -11
1328B	  %63:vr128 = PSHUFDri %136:vr128, -11
1360B	  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), %61:vr128
1392B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
1408B	  %65:vr128 = PSHUFDri %146:vr128, -11
1424B	  %67:vr128 = PSHUFDri %68:vr128, -11
1456B	  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), %65:vr128
1488B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %146:vr128
1504B	  %69:vr128 = COPY %143:vr128
1520B	  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
1536B	  %70:vr128 = COPY %143:vr128
1552B	  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
1584B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %69:vr128
1600B	  %73:vr128 = PSHUFDri %69:vr128, -11
1632B	  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), %63:vr128
1664B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
1680B	  %76:vr128 = PSHUFDri %70:vr128, -11
1712B	  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), %67:vr128
1728B	  %81:vr128 = COPY %143:vr128
1744B	  %81:vr128 = PADDDrr %81:vr128(tied-def 0), %128:vr128
1760B	  %84:vr128 = COPY %143:vr128
1776B	  %84:vr128 = PADDDrr %84:vr128(tied-def 0), %129:vr128
1792B	  %80:vr128 = PSHUFDri %81:vr128, -11
1824B	  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), %73:vr128
1856B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %136:vr128
1872B	  %83:vr128 = PSHUFDri %84:vr128, -11
1904B	  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), %76:vr128
1936B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %68:vr128
1952B	  %85:vr128 = COPY %143:vr128
1968B	  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
1984B	  %86:vr128 = COPY %143:vr128
2000B	  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
2032B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
2048B	  %136:vr128 = PSHUFDri %81:vr128, -24
2064B	  %90:vr128 = PSHUFDri %85:vr128, -11
2096B	  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), %80:vr128
2112B	  %91:vr128 = PSHUFDri %90:vr128, -24
2144B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %91:vr128
2176B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
2192B	  %146:vr128 = PSHUFDri %84:vr128, -24
2208B	  %95:vr128 = PSHUFDri %86:vr128, -11
2240B	  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), %83:vr128
2256B	  %96:vr128 = PSHUFDri %95:vr128, -24
2288B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %96:vr128
2320B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %132:vr128
2352B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

2640B	  TEST32rr %144:gr32, %144:gr32, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

2912B	  %97:vr128 = COPY %143:vr128
2928B	  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
2944B	  %101:vr128 = PSHUFDri %136:vr128, -11
2976B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
2992B	  %136:vr128 = PSHUFDri %136:vr128, -24
3008B	  %102:vr128 = PSHUFDri %143:vr128, -11
3040B	  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), %101:vr128
3056B	  %103:vr128 = PSHUFDri %102:vr128, -24
3088B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %103:vr128
3104B	  %106:vr128 = PSHUFDri %146:vr128, -11
3136B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %97:vr128
3152B	  %146:vr128 = PSHUFDri %146:vr128, -24
3168B	  %108:vr128 = PSHUFDri %97:vr128, -11
3200B	  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), %106:vr128
3216B	  %109:vr128 = PSHUFDri %108:vr128, -24
3248B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %109:vr128
3280B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %134:vr128
3312B	  %144:gr32 = ADD32ri8 %144:gr32(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

3504B	  %110:vr128 = PSHUFDri %136:vr128, -11
3520B	  %112:vr128 = PSHUFDri %146:vr128, -11
3552B	  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), %110:vr128
3584B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %136:vr128
3600B	  %115:vr128 = PSHUFDri %146:vr128, -18
3632B	  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), %146:vr128
3648B	  %118:vr128 = PSHUFDri %112:vr128, -86
3680B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %112:vr128
3712B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %115:vr128
3728B	  %154:gr32 = MOVPDI2DIrr %118:vr128
3744B	  CMP32rr %1:gr32, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3856B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8_DB %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3968B	  %155.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %155.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

4080B	  %154:gr32 = nsw IMUL32rr %154:gr32(tied-def 0), %156.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
4112B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags
4128B	  CMP32rr %155.sub_32bit:gr64_with_sub_8bit, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15

4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4336B	  $esi = COPY %154:gr32
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
240B	  $rsi = COPY %46:gr64
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  undef %155.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  %154:gr32 = MOV32ri 1
336B	  CMP32ri8 %155.sub_32bit:gr64_with_sub_8bit, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

432B	  %1:gr32 = LEA64_32r %155:gr64_with_sub_8bit, 1, $noreg, -1, $noreg
448B	  CMP32ri8 %1:gr32, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

496B	  undef %156.sub_32bit:gr64_with_sub_8bit = MOV32ri 2
512B	  %154:gr32 = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

592B	  undef %156.sub_32bit:gr64_with_sub_8bit = COPY %1:gr32
608B	  %156.sub_32bit:gr64_with_sub_8bit = AND32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), -8, implicit-def dead $eflags
640B	  %55:gr32 = LEA64_32r %156:gr64_with_sub_8bit, 1, $noreg, -8, $noreg
656B	  %4:gr32 = COPY %55:gr32
672B	  %4:gr32 = exact SHR32ri %4:gr32(tied-def 0), 3, implicit-def dead $eflags
704B	  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  %144:gr32 = COPY %4:gr32
736B	  %144:gr32 = AND32ri8 %144:gr32(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 %55:gr32, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  %146:vr128 = COPY %136:vr128
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

960B	  %4:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
976B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1008B	  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1024B	  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  %146:vr128 = COPY %136:vr128

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

1280B	  %68:vr128 = COPY %143:vr128
1296B	  %68:vr128 = PADDDrr %68:vr128(tied-def 0), %125:vr128
1312B	  %61:vr128 = PSHUFDri %143:vr128, -11
1328B	  %63:vr128 = PSHUFDri %136:vr128, -11
1360B	  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), %61:vr128
1392B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
1408B	  %65:vr128 = PSHUFDri %146:vr128, -11
1424B	  %67:vr128 = PSHUFDri %68:vr128, -11
1456B	  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), %65:vr128
1488B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %146:vr128
1504B	  %69:vr128 = COPY %143:vr128
1520B	  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
1536B	  %70:vr128 = COPY %143:vr128
1552B	  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
1584B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %69:vr128
1600B	  %73:vr128 = PSHUFDri %69:vr128, -11
1632B	  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), %63:vr128
1664B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
1680B	  %76:vr128 = PSHUFDri %70:vr128, -11
1712B	  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), %67:vr128
1728B	  %81:vr128 = COPY %143:vr128
1744B	  %81:vr128 = PADDDrr %81:vr128(tied-def 0), %128:vr128
1760B	  %84:vr128 = COPY %143:vr128
1776B	  %84:vr128 = PADDDrr %84:vr128(tied-def 0), %129:vr128
1792B	  %80:vr128 = PSHUFDri %81:vr128, -11
1824B	  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), %73:vr128
1856B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %136:vr128
1872B	  %83:vr128 = PSHUFDri %84:vr128, -11
1904B	  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), %76:vr128
1936B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %68:vr128
1952B	  %85:vr128 = COPY %143:vr128
1968B	  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
1984B	  %86:vr128 = COPY %143:vr128
2000B	  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
2032B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
2048B	  %136:vr128 = PSHUFDri %81:vr128, -24
2064B	  %90:vr128 = PSHUFDri %85:vr128, -11
2096B	  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), %80:vr128
2112B	  %91:vr128 = PSHUFDri %90:vr128, -24
2144B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %91:vr128
2176B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
2192B	  %146:vr128 = PSHUFDri %84:vr128, -24
2208B	  %95:vr128 = PSHUFDri %86:vr128, -11
2240B	  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), %83:vr128
2256B	  %96:vr128 = PSHUFDri %95:vr128, -24
2288B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %96:vr128
2320B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %132:vr128
2352B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

2640B	  TEST32rr %144:gr32, %144:gr32, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

2912B	  %97:vr128 = COPY %143:vr128
2928B	  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
2944B	  %101:vr128 = PSHUFDri %136:vr128, -11
2976B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
2992B	  %136:vr128 = PSHUFDri %136:vr128, -24
3008B	  %102:vr128 = PSHUFDri %143:vr128, -11
3040B	  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), %101:vr128
3056B	  %103:vr128 = PSHUFDri %102:vr128, -24
3088B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %103:vr128
3104B	  %106:vr128 = PSHUFDri %146:vr128, -11
3136B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %97:vr128
3152B	  %146:vr128 = PSHUFDri %146:vr128, -24
3168B	  %108:vr128 = PSHUFDri %97:vr128, -11
3200B	  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), %106:vr128
3216B	  %109:vr128 = PSHUFDri %108:vr128, -24
3248B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %109:vr128
3280B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %134:vr128
3312B	  %144:gr32 = ADD32ri8 %144:gr32(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

3504B	  %110:vr128 = PSHUFDri %136:vr128, -11
3520B	  %112:vr128 = PSHUFDri %146:vr128, -11
3552B	  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), %110:vr128
3584B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %136:vr128
3600B	  %115:vr128 = PSHUFDri %146:vr128, -18
3632B	  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), %146:vr128
3648B	  %118:vr128 = PSHUFDri %112:vr128, -86
3680B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %112:vr128
3712B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %115:vr128
3728B	  %154:gr32 = MOVPDI2DIrr %118:vr128
3744B	  CMP32rr %1:gr32, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3856B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8_DB %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3968B	  %155.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %155.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

4080B	  %154:gr32 = nsw IMUL32rr %154:gr32(tied-def 0), %156.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
4112B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags
4128B	  CMP32rr %155.sub_32bit:gr64_with_sub_8bit, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15

4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4336B	  $esi = COPY %154:gr32
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
240B	  $rsi = COPY %46:gr64
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  undef %155.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  %154:gr32 = MOV32ri 1
336B	  CMP32ri8 %155.sub_32bit:gr64_with_sub_8bit, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

432B	  %1:gr32 = LEA64_32r %155:gr64_with_sub_8bit, 1, $noreg, -1, $noreg
448B	  CMP32ri8 %1:gr32, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

496B	  undef %156.sub_32bit:gr64_with_sub_8bit = MOV32ri 2
512B	  %154:gr32 = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

592B	  undef %156.sub_32bit:gr64_with_sub_8bit = COPY %1:gr32
608B	  %156.sub_32bit:gr64_with_sub_8bit = AND32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), -8, implicit-def dead $eflags
640B	  %55:gr32 = LEA64_32r %156:gr64_with_sub_8bit, 1, $noreg, -8, $noreg
656B	  %4:gr32 = COPY %55:gr32
672B	  %4:gr32 = exact SHR32ri %4:gr32(tied-def 0), 3, implicit-def dead $eflags
704B	  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  %144:gr32 = COPY %4:gr32
736B	  %144:gr32 = AND32ri8 %144:gr32(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 %55:gr32, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  %146:vr128 = COPY %136:vr128
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

960B	  %4:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
976B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1008B	  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1024B	  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  %146:vr128 = COPY %136:vr128

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

1280B	  %68:vr128 = COPY %143:vr128
1296B	  %68:vr128 = PADDDrr %68:vr128(tied-def 0), %125:vr128
1312B	  %61:vr128 = PSHUFDri %143:vr128, -11
1328B	  %63:vr128 = PSHUFDri %136:vr128, -11
1360B	  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), %61:vr128
1392B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
1408B	  %65:vr128 = PSHUFDri %146:vr128, -11
1424B	  %67:vr128 = PSHUFDri %68:vr128, -11
1456B	  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), %65:vr128
1488B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %146:vr128
1504B	  %69:vr128 = COPY %143:vr128
1520B	  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
1536B	  %70:vr128 = COPY %143:vr128
1552B	  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
1584B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %69:vr128
1600B	  %73:vr128 = PSHUFDri %69:vr128, -11
1632B	  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), %63:vr128
1664B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
1680B	  %76:vr128 = PSHUFDri %70:vr128, -11
1712B	  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), %67:vr128
1728B	  %81:vr128 = COPY %143:vr128
1744B	  %81:vr128 = PADDDrr %81:vr128(tied-def 0), %128:vr128
1760B	  %84:vr128 = COPY %143:vr128
1776B	  %84:vr128 = PADDDrr %84:vr128(tied-def 0), %129:vr128
1792B	  %80:vr128 = PSHUFDri %81:vr128, -11
1824B	  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), %73:vr128
1856B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %136:vr128
1872B	  %83:vr128 = PSHUFDri %84:vr128, -11
1904B	  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), %76:vr128
1936B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %68:vr128
1952B	  %85:vr128 = COPY %143:vr128
1968B	  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
1984B	  %86:vr128 = COPY %143:vr128
2000B	  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
2032B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
2048B	  %136:vr128 = PSHUFDri %81:vr128, -24
2064B	  %90:vr128 = PSHUFDri %85:vr128, -11
2096B	  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), %80:vr128
2112B	  %91:vr128 = PSHUFDri %90:vr128, -24
2144B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %91:vr128
2176B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
2192B	  %146:vr128 = PSHUFDri %84:vr128, -24
2208B	  %95:vr128 = PSHUFDri %86:vr128, -11
2240B	  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), %83:vr128
2256B	  %96:vr128 = PSHUFDri %95:vr128, -24
2288B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %96:vr128
2320B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %132:vr128
2352B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

2640B	  TEST32rr %144:gr32, %144:gr32, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

2912B	  %97:vr128 = COPY %143:vr128
2928B	  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
2944B	  %101:vr128 = PSHUFDri %136:vr128, -11
2976B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
2992B	  %136:vr128 = PSHUFDri %136:vr128, -24
3008B	  %102:vr128 = PSHUFDri %143:vr128, -11
3040B	  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), %101:vr128
3056B	  %103:vr128 = PSHUFDri %102:vr128, -24
3088B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %103:vr128
3104B	  %106:vr128 = PSHUFDri %146:vr128, -11
3136B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %97:vr128
3152B	  %146:vr128 = PSHUFDri %146:vr128, -24
3168B	  %108:vr128 = PSHUFDri %97:vr128, -11
3200B	  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), %106:vr128
3216B	  %109:vr128 = PSHUFDri %108:vr128, -24
3248B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %109:vr128
3280B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %134:vr128
3312B	  %144:gr32 = ADD32ri8 %144:gr32(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

3504B	  %110:vr128 = PSHUFDri %136:vr128, -11
3520B	  %112:vr128 = PSHUFDri %146:vr128, -11
3552B	  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), %110:vr128
3584B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %136:vr128
3600B	  %115:vr128 = PSHUFDri %146:vr128, -18
3632B	  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), %146:vr128
3648B	  %118:vr128 = PSHUFDri %112:vr128, -86
3680B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %112:vr128
3712B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %115:vr128
3728B	  %154:gr32 = MOVPDI2DIrr %118:vr128
3744B	  CMP32rr %1:gr32, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3856B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8_DB %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3968B	  %155.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %155.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

4080B	  %154:gr32 = nsw IMUL32rr %154:gr32(tied-def 0), %156.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
4112B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags
4128B	  CMP32rr %155.sub_32bit:gr64_with_sub_8bit, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15

4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4336B	  $esi = COPY %154:gr32
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
240B	  $rsi = COPY %46:gr64
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  undef %155.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  %154:gr32 = MOV32ri 1
336B	  CMP32ri8 %155.sub_32bit:gr64_with_sub_8bit, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

432B	  %1:gr32 = LEA64_32r %155:gr64_with_sub_8bit, 1, $noreg, -1, $noreg
448B	  CMP32ri8 %1:gr32, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

496B	  undef %156.sub_32bit:gr64_with_sub_8bit = MOV32ri 2
512B	  %154:gr32 = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

592B	  undef %156.sub_32bit:gr64_with_sub_8bit = COPY %1:gr32
608B	  %156.sub_32bit:gr64_with_sub_8bit = AND32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), -8, implicit-def dead $eflags
640B	  %55:gr32 = LEA64_32r %156:gr64_with_sub_8bit, 1, $noreg, -8, $noreg
656B	  %4:gr32 = COPY %55:gr32
672B	  %4:gr32 = exact SHR32ri %4:gr32(tied-def 0), 3, implicit-def dead $eflags
704B	  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  %144:gr32 = COPY %4:gr32
736B	  %144:gr32 = AND32ri8 %144:gr32(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 %55:gr32, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  %146:vr128 = COPY %136:vr128
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

960B	  %4:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
976B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1008B	  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1024B	  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  %146:vr128 = COPY %136:vr128

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

1280B	  %68:vr128 = COPY %143:vr128
1296B	  %68:vr128 = PADDDrr %68:vr128(tied-def 0), %125:vr128
1312B	  %61:vr128 = PSHUFDri %143:vr128, -11
1328B	  %63:vr128 = PSHUFDri %136:vr128, -11
1360B	  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), %61:vr128
1392B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
1408B	  %65:vr128 = PSHUFDri %146:vr128, -11
1424B	  %67:vr128 = PSHUFDri %68:vr128, -11
1456B	  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), %65:vr128
1488B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %146:vr128
1504B	  %69:vr128 = COPY %143:vr128
1520B	  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
1536B	  %70:vr128 = COPY %143:vr128
1552B	  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
1584B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %69:vr128
1600B	  %73:vr128 = PSHUFDri %69:vr128, -11
1632B	  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), %63:vr128
1664B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
1680B	  %76:vr128 = PSHUFDri %70:vr128, -11
1712B	  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), %67:vr128
1728B	  %81:vr128 = COPY %143:vr128
1744B	  %81:vr128 = PADDDrr %81:vr128(tied-def 0), %128:vr128
1760B	  %84:vr128 = COPY %143:vr128
1776B	  %84:vr128 = PADDDrr %84:vr128(tied-def 0), %129:vr128
1792B	  %80:vr128 = PSHUFDri %81:vr128, -11
1824B	  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), %73:vr128
1856B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %136:vr128
1872B	  %83:vr128 = PSHUFDri %84:vr128, -11
1904B	  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), %76:vr128
1936B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %68:vr128
1952B	  %85:vr128 = COPY %143:vr128
1968B	  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
1984B	  %86:vr128 = COPY %143:vr128
2000B	  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
2032B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
2048B	  %136:vr128 = PSHUFDri %81:vr128, -24
2064B	  %90:vr128 = PSHUFDri %85:vr128, -11
2096B	  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), %80:vr128
2112B	  %91:vr128 = PSHUFDri %90:vr128, -24
2144B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %91:vr128
2176B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
2192B	  %146:vr128 = PSHUFDri %84:vr128, -24
2208B	  %95:vr128 = PSHUFDri %86:vr128, -11
2240B	  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), %83:vr128
2256B	  %96:vr128 = PSHUFDri %95:vr128, -24
2288B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %96:vr128
2320B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %132:vr128
2352B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

2640B	  TEST32rr %144:gr32, %144:gr32, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

2912B	  %97:vr128 = COPY %143:vr128
2928B	  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
2944B	  %101:vr128 = PSHUFDri %136:vr128, -11
2976B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
2992B	  %136:vr128 = PSHUFDri %136:vr128, -24
3008B	  %102:vr128 = PSHUFDri %143:vr128, -11
3040B	  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), %101:vr128
3056B	  %103:vr128 = PSHUFDri %102:vr128, -24
3088B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %103:vr128
3104B	  %106:vr128 = PSHUFDri %146:vr128, -11
3136B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %97:vr128
3152B	  %146:vr128 = PSHUFDri %146:vr128, -24
3168B	  %108:vr128 = PSHUFDri %97:vr128, -11
3200B	  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), %106:vr128
3216B	  %109:vr128 = PSHUFDri %108:vr128, -24
3248B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %109:vr128
3280B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %134:vr128
3312B	  %144:gr32 = ADD32ri8 %144:gr32(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

3504B	  %110:vr128 = PSHUFDri %136:vr128, -11
3520B	  %112:vr128 = PSHUFDri %146:vr128, -11
3552B	  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), %110:vr128
3584B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %136:vr128
3600B	  %115:vr128 = PSHUFDri %146:vr128, -18
3632B	  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), %146:vr128
3648B	  %118:vr128 = PSHUFDri %112:vr128, -86
3680B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %112:vr128
3712B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %115:vr128
3728B	  %154:gr32 = MOVPDI2DIrr %118:vr128
3744B	  CMP32rr %1:gr32, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3856B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8_DB %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3968B	  %155.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %155.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

4080B	  %154:gr32 = nsw IMUL32rr %154:gr32(tied-def 0), %156.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
4112B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags
4128B	  CMP32rr %155.sub_32bit:gr64_with_sub_8bit, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15

4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4336B	  $esi = COPY %154:gr32
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
240B	  $rsi = COPY %46:gr64
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  undef %155.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  %154:gr32 = MOV32ri 1
336B	  CMP32ri8 %155.sub_32bit:gr64_with_sub_8bit, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

432B	  %1:gr32 = LEA64_32r %155:gr64_with_sub_8bit, 1, $noreg, -1, $noreg
448B	  CMP32ri8 %1:gr32, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

496B	  undef %156.sub_32bit:gr64_with_sub_8bit = MOV32ri 2
512B	  %154:gr32 = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

592B	  undef %156.sub_32bit:gr64_with_sub_8bit = COPY %1:gr32
608B	  %156.sub_32bit:gr64_with_sub_8bit = AND32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), -8, implicit-def dead $eflags
640B	  %55:gr32 = LEA64_32r %156:gr64_with_sub_8bit, 1, $noreg, -8, $noreg
656B	  %4:gr32 = COPY %55:gr32
672B	  %4:gr32 = exact SHR32ri %4:gr32(tied-def 0), 3, implicit-def dead $eflags
704B	  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  %144:gr32 = COPY %4:gr32
736B	  %144:gr32 = AND32ri8 %144:gr32(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 %55:gr32, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  %146:vr128 = COPY %136:vr128
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

960B	  %4:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
976B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1008B	  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1024B	  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  %146:vr128 = COPY %136:vr128

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

1280B	  %68:vr128 = COPY %143:vr128
1296B	  %68:vr128 = PADDDrr %68:vr128(tied-def 0), %125:vr128
1312B	  %61:vr128 = PSHUFDri %143:vr128, -11
1328B	  %63:vr128 = PSHUFDri %136:vr128, -11
1360B	  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), %61:vr128
1392B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
1408B	  %65:vr128 = PSHUFDri %146:vr128, -11
1424B	  %67:vr128 = PSHUFDri %68:vr128, -11
1456B	  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), %65:vr128
1488B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %146:vr128
1504B	  %69:vr128 = COPY %143:vr128
1520B	  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
1536B	  %70:vr128 = COPY %143:vr128
1552B	  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
1584B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %69:vr128
1600B	  %73:vr128 = PSHUFDri %69:vr128, -11
1632B	  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), %63:vr128
1664B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
1680B	  %76:vr128 = PSHUFDri %70:vr128, -11
1712B	  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), %67:vr128
1728B	  %81:vr128 = COPY %143:vr128
1744B	  %81:vr128 = PADDDrr %81:vr128(tied-def 0), %128:vr128
1760B	  %84:vr128 = COPY %143:vr128
1776B	  %84:vr128 = PADDDrr %84:vr128(tied-def 0), %129:vr128
1792B	  %80:vr128 = PSHUFDri %81:vr128, -11
1824B	  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), %73:vr128
1856B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %136:vr128
1872B	  %83:vr128 = PSHUFDri %84:vr128, -11
1904B	  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), %76:vr128
1936B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %68:vr128
1952B	  %85:vr128 = COPY %143:vr128
1968B	  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
1984B	  %86:vr128 = COPY %143:vr128
2000B	  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
2032B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
2048B	  %136:vr128 = PSHUFDri %81:vr128, -24
2064B	  %90:vr128 = PSHUFDri %85:vr128, -11
2096B	  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), %80:vr128
2112B	  %91:vr128 = PSHUFDri %90:vr128, -24
2144B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %91:vr128
2176B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
2192B	  %146:vr128 = PSHUFDri %84:vr128, -24
2208B	  %95:vr128 = PSHUFDri %86:vr128, -11
2240B	  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), %83:vr128
2256B	  %96:vr128 = PSHUFDri %95:vr128, -24
2288B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %96:vr128
2320B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %132:vr128
2352B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

2640B	  TEST32rr %144:gr32, %144:gr32, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

2912B	  %97:vr128 = COPY %143:vr128
2928B	  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
2944B	  %101:vr128 = PSHUFDri %136:vr128, -11
2976B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
2992B	  %136:vr128 = PSHUFDri %136:vr128, -24
3008B	  %102:vr128 = PSHUFDri %143:vr128, -11
3040B	  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), %101:vr128
3056B	  %103:vr128 = PSHUFDri %102:vr128, -24
3088B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %103:vr128
3104B	  %106:vr128 = PSHUFDri %146:vr128, -11
3136B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %97:vr128
3152B	  %146:vr128 = PSHUFDri %146:vr128, -24
3168B	  %108:vr128 = PSHUFDri %97:vr128, -11
3200B	  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), %106:vr128
3216B	  %109:vr128 = PSHUFDri %108:vr128, -24
3248B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %109:vr128
3280B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %134:vr128
3312B	  %144:gr32 = ADD32ri8 %144:gr32(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

3504B	  %110:vr128 = PSHUFDri %136:vr128, -11
3520B	  %112:vr128 = PSHUFDri %146:vr128, -11
3552B	  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), %110:vr128
3584B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %136:vr128
3600B	  %115:vr128 = PSHUFDri %146:vr128, -18
3632B	  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), %146:vr128
3648B	  %118:vr128 = PSHUFDri %112:vr128, -86
3680B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %112:vr128
3712B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %115:vr128
3728B	  %154:gr32 = MOVPDI2DIrr %118:vr128
3744B	  CMP32rr %1:gr32, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3856B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8_DB %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3968B	  %155.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %155.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

4080B	  %154:gr32 = nsw IMUL32rr %154:gr32(tied-def 0), %156.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
4112B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags
4128B	  CMP32rr %155.sub_32bit:gr64_with_sub_8bit, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15

4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4336B	  $esi = COPY %154:gr32
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
240B	  $rsi = COPY %46:gr64
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  undef %155.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  %154:gr32 = MOV32ri 1
336B	  CMP32ri8 %155.sub_32bit:gr64_with_sub_8bit, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

432B	  %1:gr32 = LEA64_32r %155:gr64_with_sub_8bit, 1, $noreg, -1, $noreg
448B	  CMP32ri8 %1:gr32, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

496B	  undef %156.sub_32bit:gr64_with_sub_8bit = MOV32ri 2
512B	  %154:gr32 = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

592B	  undef %156.sub_32bit:gr64_with_sub_8bit = COPY %1:gr32
608B	  %156.sub_32bit:gr64_with_sub_8bit = AND32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), -8, implicit-def dead $eflags
640B	  %55:gr32 = LEA64_32r %156:gr64_with_sub_8bit, 1, $noreg, -8, $noreg
656B	  %4:gr32 = COPY %55:gr32
672B	  %4:gr32 = exact SHR32ri %4:gr32(tied-def 0), 3, implicit-def dead $eflags
704B	  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  %144:gr32 = COPY %4:gr32
736B	  %144:gr32 = AND32ri8 %144:gr32(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 %55:gr32, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  %146:vr128 = COPY %136:vr128
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

960B	  %4:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
976B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1008B	  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1024B	  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  %146:vr128 = COPY %136:vr128

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

1280B	  %68:vr128 = COPY %143:vr128
1296B	  %68:vr128 = PADDDrr %68:vr128(tied-def 0), %125:vr128
1312B	  %61:vr128 = PSHUFDri %143:vr128, -11
1328B	  %63:vr128 = PSHUFDri %136:vr128, -11
1360B	  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), %61:vr128
1392B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
1408B	  %65:vr128 = PSHUFDri %146:vr128, -11
1424B	  %67:vr128 = PSHUFDri %68:vr128, -11
1456B	  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), %65:vr128
1488B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %146:vr128
1504B	  %69:vr128 = COPY %143:vr128
1520B	  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
1536B	  %70:vr128 = COPY %143:vr128
1552B	  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
1584B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %69:vr128
1600B	  %73:vr128 = PSHUFDri %69:vr128, -11
1632B	  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), %63:vr128
1664B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
1680B	  %76:vr128 = PSHUFDri %70:vr128, -11
1712B	  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), %67:vr128
1728B	  %81:vr128 = COPY %143:vr128
1744B	  %81:vr128 = PADDDrr %81:vr128(tied-def 0), %128:vr128
1760B	  %84:vr128 = COPY %143:vr128
1776B	  %84:vr128 = PADDDrr %84:vr128(tied-def 0), %129:vr128
1792B	  %80:vr128 = PSHUFDri %81:vr128, -11
1824B	  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), %73:vr128
1856B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %136:vr128
1872B	  %83:vr128 = PSHUFDri %84:vr128, -11
1904B	  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), %76:vr128
1936B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %68:vr128
1952B	  %85:vr128 = COPY %143:vr128
1968B	  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
1984B	  %86:vr128 = COPY %143:vr128
2000B	  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
2032B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
2048B	  %136:vr128 = PSHUFDri %81:vr128, -24
2064B	  %90:vr128 = PSHUFDri %85:vr128, -11
2096B	  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), %80:vr128
2112B	  %91:vr128 = PSHUFDri %90:vr128, -24
2144B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %91:vr128
2176B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
2192B	  %146:vr128 = PSHUFDri %84:vr128, -24
2208B	  %95:vr128 = PSHUFDri %86:vr128, -11
2240B	  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), %83:vr128
2256B	  %96:vr128 = PSHUFDri %95:vr128, -24
2288B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %96:vr128
2320B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %132:vr128
2352B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

2640B	  TEST32rr %144:gr32, %144:gr32, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

2912B	  %97:vr128 = COPY %143:vr128
2928B	  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
2944B	  %101:vr128 = PSHUFDri %136:vr128, -11
2976B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
2992B	  %136:vr128 = PSHUFDri %136:vr128, -24
3008B	  %102:vr128 = PSHUFDri %143:vr128, -11
3040B	  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), %101:vr128
3056B	  %103:vr128 = PSHUFDri %102:vr128, -24
3088B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %103:vr128
3104B	  %106:vr128 = PSHUFDri %146:vr128, -11
3136B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %97:vr128
3152B	  %146:vr128 = PSHUFDri %146:vr128, -24
3168B	  %108:vr128 = PSHUFDri %97:vr128, -11
3200B	  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), %106:vr128
3216B	  %109:vr128 = PSHUFDri %108:vr128, -24
3248B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %109:vr128
3280B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %134:vr128
3312B	  %144:gr32 = ADD32ri8 %144:gr32(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

3504B	  %110:vr128 = PSHUFDri %136:vr128, -11
3520B	  %112:vr128 = PSHUFDri %146:vr128, -11
3552B	  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), %110:vr128
3584B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %136:vr128
3600B	  %115:vr128 = PSHUFDri %146:vr128, -18
3632B	  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), %146:vr128
3648B	  %118:vr128 = PSHUFDri %112:vr128, -86
3680B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %112:vr128
3712B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %115:vr128
3728B	  %154:gr32 = MOVPDI2DIrr %118:vr128
3744B	  CMP32rr %1:gr32, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3856B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8_DB %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3968B	  %155.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %155.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

4080B	  %154:gr32 = nsw IMUL32rr %154:gr32(tied-def 0), %156.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
4112B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags
4128B	  CMP32rr %155.sub_32bit:gr64_with_sub_8bit, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15

4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4336B	  $esi = COPY %154:gr32
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
240B	  $rsi = COPY %46:gr64
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  undef %155.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  %154:gr32 = MOV32ri 1
336B	  CMP32ri8 %155.sub_32bit:gr64_with_sub_8bit, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

432B	  %1:gr32 = LEA64_32r %155:gr64_with_sub_8bit, 1, $noreg, -1, $noreg
448B	  CMP32ri8 %1:gr32, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

496B	  undef %156.sub_32bit:gr64_with_sub_8bit = MOV32ri 2
512B	  %154:gr32 = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

592B	  undef %156.sub_32bit:gr64_with_sub_8bit = COPY %1:gr32
608B	  %156.sub_32bit:gr64_with_sub_8bit = AND32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), -8, implicit-def dead $eflags
640B	  %55:gr32 = LEA64_32r %156:gr64_with_sub_8bit, 1, $noreg, -8, $noreg
656B	  %4:gr32 = COPY %55:gr32
672B	  %4:gr32 = exact SHR32ri %4:gr32(tied-def 0), 3, implicit-def dead $eflags
704B	  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  %144:gr32 = COPY %4:gr32
736B	  %144:gr32 = AND32ri8 %144:gr32(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 %55:gr32, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  %146:vr128 = COPY %136:vr128
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

960B	  %4:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
976B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1008B	  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1024B	  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  %146:vr128 = COPY %136:vr128

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

1280B	  %68:vr128 = COPY %143:vr128
1296B	  %68:vr128 = PADDDrr %68:vr128(tied-def 0), %125:vr128
1312B	  %61:vr128 = PSHUFDri %143:vr128, -11
1328B	  %63:vr128 = PSHUFDri %136:vr128, -11
1360B	  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), %61:vr128
1392B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
1408B	  %65:vr128 = PSHUFDri %146:vr128, -11
1424B	  %67:vr128 = PSHUFDri %68:vr128, -11
1456B	  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), %65:vr128
1488B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %146:vr128
1504B	  %69:vr128 = COPY %143:vr128
1520B	  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
1536B	  %70:vr128 = COPY %143:vr128
1552B	  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
1584B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %69:vr128
1600B	  %73:vr128 = PSHUFDri %69:vr128, -11
1632B	  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), %63:vr128
1664B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
1680B	  %76:vr128 = PSHUFDri %70:vr128, -11
1712B	  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), %67:vr128
1728B	  %81:vr128 = COPY %143:vr128
1744B	  %81:vr128 = PADDDrr %81:vr128(tied-def 0), %128:vr128
1760B	  %84:vr128 = COPY %143:vr128
1776B	  %84:vr128 = PADDDrr %84:vr128(tied-def 0), %129:vr128
1792B	  %80:vr128 = PSHUFDri %81:vr128, -11
1824B	  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), %73:vr128
1856B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %136:vr128
1872B	  %83:vr128 = PSHUFDri %84:vr128, -11
1904B	  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), %76:vr128
1936B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %68:vr128
1952B	  %85:vr128 = COPY %143:vr128
1968B	  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
1984B	  %86:vr128 = COPY %143:vr128
2000B	  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
2032B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
2048B	  %136:vr128 = PSHUFDri %81:vr128, -24
2064B	  %90:vr128 = PSHUFDri %85:vr128, -11
2096B	  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), %80:vr128
2112B	  %91:vr128 = PSHUFDri %90:vr128, -24
2144B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %91:vr128
2176B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
2192B	  %146:vr128 = PSHUFDri %84:vr128, -24
2208B	  %95:vr128 = PSHUFDri %86:vr128, -11
2240B	  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), %83:vr128
2256B	  %96:vr128 = PSHUFDri %95:vr128, -24
2288B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %96:vr128
2320B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %132:vr128
2352B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

2640B	  TEST32rr %144:gr32, %144:gr32, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

2912B	  %97:vr128 = COPY %143:vr128
2928B	  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
2944B	  %101:vr128 = PSHUFDri %136:vr128, -11
2976B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
2992B	  %136:vr128 = PSHUFDri %136:vr128, -24
3008B	  %102:vr128 = PSHUFDri %143:vr128, -11
3040B	  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), %101:vr128
3056B	  %103:vr128 = PSHUFDri %102:vr128, -24
3088B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %103:vr128
3104B	  %106:vr128 = PSHUFDri %146:vr128, -11
3136B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %97:vr128
3152B	  %146:vr128 = PSHUFDri %146:vr128, -24
3168B	  %108:vr128 = PSHUFDri %97:vr128, -11
3200B	  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), %106:vr128
3216B	  %109:vr128 = PSHUFDri %108:vr128, -24
3248B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %109:vr128
3280B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %134:vr128
3312B	  %144:gr32 = ADD32ri8 %144:gr32(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

3504B	  %110:vr128 = PSHUFDri %136:vr128, -11
3520B	  %112:vr128 = PSHUFDri %146:vr128, -11
3552B	  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), %110:vr128
3584B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %136:vr128
3600B	  %115:vr128 = PSHUFDri %146:vr128, -18
3632B	  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), %146:vr128
3648B	  %118:vr128 = PSHUFDri %112:vr128, -86
3680B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %112:vr128
3712B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %115:vr128
3728B	  %154:gr32 = MOVPDI2DIrr %118:vr128
3744B	  CMP32rr %1:gr32, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3856B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8_DB %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3968B	  %155.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %155.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

4080B	  %154:gr32 = nsw IMUL32rr %154:gr32(tied-def 0), %156.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
4112B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags
4128B	  CMP32rr %155.sub_32bit:gr64_with_sub_8bit, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15

4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4336B	  $esi = COPY %154:gr32
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
240B	  $rsi = COPY %46:gr64
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  undef %155.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  %154:gr32 = MOV32ri 1
336B	  CMP32ri8 %155.sub_32bit:gr64_with_sub_8bit, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

432B	  %1:gr32 = LEA64_32r %155:gr64_with_sub_8bit, 1, $noreg, -1, $noreg
448B	  CMP32ri8 %1:gr32, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

496B	  undef %156.sub_32bit:gr64_with_sub_8bit = MOV32ri 2
512B	  %154:gr32 = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

592B	  undef %156.sub_32bit:gr64_with_sub_8bit = COPY %1:gr32
608B	  %156.sub_32bit:gr64_with_sub_8bit = AND32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), -8, implicit-def dead $eflags
640B	  %55:gr32 = LEA64_32r %156:gr64_with_sub_8bit, 1, $noreg, -8, $noreg
656B	  %4:gr32 = COPY %55:gr32
672B	  %4:gr32 = exact SHR32ri %4:gr32(tied-def 0), 3, implicit-def dead $eflags
704B	  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  %144:gr32 = COPY %4:gr32
736B	  %144:gr32 = AND32ri8 %144:gr32(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 %55:gr32, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  %146:vr128 = COPY %136:vr128
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

960B	  %4:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
976B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1008B	  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1024B	  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  %146:vr128 = COPY %136:vr128

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

1280B	  %68:vr128 = COPY %143:vr128
1296B	  %68:vr128 = PADDDrr %68:vr128(tied-def 0), %125:vr128
1312B	  %61:vr128 = PSHUFDri %143:vr128, -11
1328B	  %63:vr128 = PSHUFDri %136:vr128, -11
1360B	  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), %61:vr128
1392B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
1408B	  %65:vr128 = PSHUFDri %146:vr128, -11
1424B	  %67:vr128 = PSHUFDri %68:vr128, -11
1456B	  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), %65:vr128
1488B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %146:vr128
1504B	  %69:vr128 = COPY %143:vr128
1520B	  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
1536B	  %70:vr128 = COPY %143:vr128
1552B	  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
1584B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %69:vr128
1600B	  %73:vr128 = PSHUFDri %69:vr128, -11
1632B	  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), %63:vr128
1664B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
1680B	  %76:vr128 = PSHUFDri %70:vr128, -11
1712B	  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), %67:vr128
1728B	  %81:vr128 = COPY %143:vr128
1744B	  %81:vr128 = PADDDrr %81:vr128(tied-def 0), %128:vr128
1760B	  %84:vr128 = COPY %143:vr128
1776B	  %84:vr128 = PADDDrr %84:vr128(tied-def 0), %129:vr128
1792B	  %80:vr128 = PSHUFDri %81:vr128, -11
1824B	  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), %73:vr128
1856B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %136:vr128
1872B	  %83:vr128 = PSHUFDri %84:vr128, -11
1904B	  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), %76:vr128
1936B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %68:vr128
1952B	  %85:vr128 = COPY %143:vr128
1968B	  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
1984B	  %86:vr128 = COPY %143:vr128
2000B	  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
2032B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
2048B	  %136:vr128 = PSHUFDri %81:vr128, -24
2064B	  %90:vr128 = PSHUFDri %85:vr128, -11
2096B	  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), %80:vr128
2112B	  %91:vr128 = PSHUFDri %90:vr128, -24
2144B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %91:vr128
2176B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
2192B	  %146:vr128 = PSHUFDri %84:vr128, -24
2208B	  %95:vr128 = PSHUFDri %86:vr128, -11
2240B	  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), %83:vr128
2256B	  %96:vr128 = PSHUFDri %95:vr128, -24
2288B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %96:vr128
2320B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %132:vr128
2352B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

2640B	  TEST32rr %144:gr32, %144:gr32, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

2912B	  %97:vr128 = COPY %143:vr128
2928B	  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
2944B	  %101:vr128 = PSHUFDri %136:vr128, -11
2976B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
2992B	  %136:vr128 = PSHUFDri %136:vr128, -24
3008B	  %102:vr128 = PSHUFDri %143:vr128, -11
3040B	  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), %101:vr128
3056B	  %103:vr128 = PSHUFDri %102:vr128, -24
3088B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %103:vr128
3104B	  %106:vr128 = PSHUFDri %146:vr128, -11
3136B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %97:vr128
3152B	  %146:vr128 = PSHUFDri %146:vr128, -24
3168B	  %108:vr128 = PSHUFDri %97:vr128, -11
3200B	  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), %106:vr128
3216B	  %109:vr128 = PSHUFDri %108:vr128, -24
3248B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %109:vr128
3280B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %134:vr128
3312B	  %144:gr32 = ADD32ri8 %144:gr32(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

3504B	  %110:vr128 = PSHUFDri %136:vr128, -11
3520B	  %112:vr128 = PSHUFDri %146:vr128, -11
3552B	  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), %110:vr128
3584B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %136:vr128
3600B	  %115:vr128 = PSHUFDri %146:vr128, -18
3632B	  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), %146:vr128
3648B	  %118:vr128 = PSHUFDri %112:vr128, -86
3680B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %112:vr128
3712B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %115:vr128
3728B	  %154:gr32 = MOVPDI2DIrr %118:vr128
3744B	  CMP32rr %1:gr32, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3856B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8_DB %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3968B	  %155.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %155.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

4080B	  %154:gr32 = nsw IMUL32rr %154:gr32(tied-def 0), %156.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
4112B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags
4128B	  CMP32rr %155.sub_32bit:gr64_with_sub_8bit, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15

4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4336B	  $esi = COPY %154:gr32
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
240B	  $rsi = COPY %46:gr64
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  undef %155.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  %154:gr32 = MOV32ri 1
336B	  CMP32ri8 %155.sub_32bit:gr64_with_sub_8bit, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

432B	  %1:gr32 = LEA64_32r %155:gr64_with_sub_8bit, 1, $noreg, -1, $noreg
448B	  CMP32ri8 %1:gr32, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

496B	  undef %156.sub_32bit:gr64_with_sub_8bit = MOV32ri 2
512B	  %154:gr32 = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

592B	  undef %156.sub_32bit:gr64_with_sub_8bit = COPY %1:gr32
608B	  %156.sub_32bit:gr64_with_sub_8bit = AND32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), -8, implicit-def dead $eflags
640B	  %55:gr32 = LEA64_32r %156:gr64_with_sub_8bit, 1, $noreg, -8, $noreg
656B	  %4:gr32 = COPY %55:gr32
672B	  %4:gr32 = exact SHR32ri %4:gr32(tied-def 0), 3, implicit-def dead $eflags
704B	  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  %144:gr32 = COPY %4:gr32
736B	  %144:gr32 = AND32ri8 %144:gr32(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 %55:gr32, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  %146:vr128 = COPY %136:vr128
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

960B	  %4:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
976B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1008B	  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1024B	  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  %146:vr128 = COPY %136:vr128

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

1280B	  %68:vr128 = COPY %143:vr128
1296B	  %68:vr128 = PADDDrr %68:vr128(tied-def 0), %125:vr128
1312B	  %61:vr128 = PSHUFDri %143:vr128, -11
1328B	  %63:vr128 = PSHUFDri %136:vr128, -11
1360B	  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), %61:vr128
1392B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
1408B	  %65:vr128 = PSHUFDri %146:vr128, -11
1424B	  %67:vr128 = PSHUFDri %68:vr128, -11
1456B	  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), %65:vr128
1488B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %146:vr128
1504B	  %69:vr128 = COPY %143:vr128
1520B	  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
1536B	  %70:vr128 = COPY %143:vr128
1552B	  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
1584B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %69:vr128
1600B	  %73:vr128 = PSHUFDri %69:vr128, -11
1632B	  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), %63:vr128
1664B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
1680B	  %76:vr128 = PSHUFDri %70:vr128, -11
1712B	  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), %67:vr128
1728B	  %81:vr128 = COPY %143:vr128
1744B	  %81:vr128 = PADDDrr %81:vr128(tied-def 0), %128:vr128
1760B	  %84:vr128 = COPY %143:vr128
1776B	  %84:vr128 = PADDDrr %84:vr128(tied-def 0), %129:vr128
1792B	  %80:vr128 = PSHUFDri %81:vr128, -11
1824B	  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), %73:vr128
1856B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %136:vr128
1872B	  %83:vr128 = PSHUFDri %84:vr128, -11
1904B	  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), %76:vr128
1936B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %68:vr128
1952B	  %85:vr128 = COPY %143:vr128
1968B	  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
1984B	  %86:vr128 = COPY %143:vr128
2000B	  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
2032B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
2048B	  %136:vr128 = PSHUFDri %81:vr128, -24
2064B	  %90:vr128 = PSHUFDri %85:vr128, -11
2096B	  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), %80:vr128
2112B	  %91:vr128 = PSHUFDri %90:vr128, -24
2144B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %91:vr128
2176B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
2192B	  %146:vr128 = PSHUFDri %84:vr128, -24
2208B	  %95:vr128 = PSHUFDri %86:vr128, -11
2240B	  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), %83:vr128
2256B	  %96:vr128 = PSHUFDri %95:vr128, -24
2288B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %96:vr128
2320B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %132:vr128
2352B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

2640B	  TEST32rr %144:gr32, %144:gr32, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

2912B	  %97:vr128 = COPY %143:vr128
2928B	  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
2944B	  %101:vr128 = PSHUFDri %136:vr128, -11
2976B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
2992B	  %136:vr128 = PSHUFDri %136:vr128, -24
3008B	  %102:vr128 = PSHUFDri %143:vr128, -11
3040B	  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), %101:vr128
3056B	  %103:vr128 = PSHUFDri %102:vr128, -24
3088B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %103:vr128
3104B	  %106:vr128 = PSHUFDri %146:vr128, -11
3136B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %97:vr128
3152B	  %146:vr128 = PSHUFDri %146:vr128, -24
3168B	  %108:vr128 = PSHUFDri %97:vr128, -11
3200B	  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), %106:vr128
3216B	  %109:vr128 = PSHUFDri %108:vr128, -24
3248B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %109:vr128
3280B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %134:vr128
3312B	  %144:gr32 = ADD32ri8 %144:gr32(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

3504B	  %110:vr128 = PSHUFDri %136:vr128, -11
3520B	  %112:vr128 = PSHUFDri %146:vr128, -11
3552B	  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), %110:vr128
3584B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %136:vr128
3600B	  %115:vr128 = PSHUFDri %146:vr128, -18
3632B	  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), %146:vr128
3648B	  %118:vr128 = PSHUFDri %112:vr128, -86
3680B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %112:vr128
3712B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %115:vr128
3728B	  %154:gr32 = MOVPDI2DIrr %118:vr128
3744B	  CMP32rr %1:gr32, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3856B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8_DB %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3968B	  %155.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %155.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

4080B	  %154:gr32 = nsw IMUL32rr %154:gr32(tied-def 0), %156.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
4112B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags
4128B	  CMP32rr %155.sub_32bit:gr64_with_sub_8bit, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15

4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4336B	  $esi = COPY %154:gr32
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
240B	  $rsi = COPY %46:gr64
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  undef %155.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  %154:gr32 = MOV32ri 1
336B	  CMP32ri8 %155.sub_32bit:gr64_with_sub_8bit, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

432B	  %1:gr32 = LEA64_32r %155:gr64_with_sub_8bit, 1, $noreg, -1, $noreg
448B	  CMP32ri8 %1:gr32, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

496B	  undef %156.sub_32bit:gr64_with_sub_8bit = MOV32ri 2
512B	  %154:gr32 = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

592B	  undef %156.sub_32bit:gr64_with_sub_8bit = COPY %1:gr32
608B	  %156.sub_32bit:gr64_with_sub_8bit = AND32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), -8, implicit-def dead $eflags
640B	  %55:gr32 = LEA64_32r %156:gr64_with_sub_8bit, 1, $noreg, -8, $noreg
656B	  %4:gr32 = COPY %55:gr32
672B	  %4:gr32 = exact SHR32ri %4:gr32(tied-def 0), 3, implicit-def dead $eflags
704B	  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  %144:gr32 = COPY %4:gr32
736B	  %144:gr32 = AND32ri8 %144:gr32(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 %55:gr32, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  %146:vr128 = COPY %136:vr128
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

960B	  %4:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
976B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1008B	  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1024B	  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  %146:vr128 = COPY %136:vr128

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

1280B	  %68:vr128 = COPY %143:vr128
1296B	  %68:vr128 = PADDDrr %68:vr128(tied-def 0), %125:vr128
1312B	  %61:vr128 = PSHUFDri %143:vr128, -11
1328B	  %63:vr128 = PSHUFDri %136:vr128, -11
1360B	  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), %61:vr128
1392B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
1408B	  %65:vr128 = PSHUFDri %146:vr128, -11
1424B	  %67:vr128 = PSHUFDri %68:vr128, -11
1456B	  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), %65:vr128
1488B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %146:vr128
1504B	  %69:vr128 = COPY %143:vr128
1520B	  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
1536B	  %70:vr128 = COPY %143:vr128
1552B	  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
1584B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %69:vr128
1600B	  %73:vr128 = PSHUFDri %69:vr128, -11
1632B	  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), %63:vr128
1664B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
1680B	  %76:vr128 = PSHUFDri %70:vr128, -11
1712B	  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), %67:vr128
1728B	  %81:vr128 = COPY %143:vr128
1744B	  %81:vr128 = PADDDrr %81:vr128(tied-def 0), %128:vr128
1760B	  %84:vr128 = COPY %143:vr128
1776B	  %84:vr128 = PADDDrr %84:vr128(tied-def 0), %129:vr128
1792B	  %80:vr128 = PSHUFDri %81:vr128, -11
1824B	  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), %73:vr128
1856B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %136:vr128
1872B	  %83:vr128 = PSHUFDri %84:vr128, -11
1904B	  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), %76:vr128
1936B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %68:vr128
1952B	  %85:vr128 = COPY %143:vr128
1968B	  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
1984B	  %86:vr128 = COPY %143:vr128
2000B	  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
2032B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
2048B	  %136:vr128 = PSHUFDri %81:vr128, -24
2064B	  %90:vr128 = PSHUFDri %85:vr128, -11
2096B	  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), %80:vr128
2112B	  %91:vr128 = PSHUFDri %90:vr128, -24
2144B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %91:vr128
2176B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
2192B	  %146:vr128 = PSHUFDri %84:vr128, -24
2208B	  %95:vr128 = PSHUFDri %86:vr128, -11
2240B	  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), %83:vr128
2256B	  %96:vr128 = PSHUFDri %95:vr128, -24
2288B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %96:vr128
2320B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %132:vr128
2352B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

2640B	  TEST32rr %144:gr32, %144:gr32, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

2912B	  %97:vr128 = COPY %143:vr128
2928B	  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
2944B	  %101:vr128 = PSHUFDri %136:vr128, -11
2976B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
2992B	  %136:vr128 = PSHUFDri %136:vr128, -24
3008B	  %102:vr128 = PSHUFDri %143:vr128, -11
3040B	  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), %101:vr128
3056B	  %103:vr128 = PSHUFDri %102:vr128, -24
3088B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %103:vr128
3104B	  %106:vr128 = PSHUFDri %146:vr128, -11
3136B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %97:vr128
3152B	  %146:vr128 = PSHUFDri %146:vr128, -24
3168B	  %108:vr128 = PSHUFDri %97:vr128, -11
3200B	  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), %106:vr128
3216B	  %109:vr128 = PSHUFDri %108:vr128, -24
3248B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %109:vr128
3280B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %134:vr128
3312B	  %144:gr32 = ADD32ri8 %144:gr32(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

3504B	  %110:vr128 = PSHUFDri %136:vr128, -11
3520B	  %112:vr128 = PSHUFDri %146:vr128, -11
3552B	  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), %110:vr128
3584B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %136:vr128
3600B	  %115:vr128 = PSHUFDri %146:vr128, -18
3632B	  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), %146:vr128
3648B	  %118:vr128 = PSHUFDri %112:vr128, -86
3680B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %112:vr128
3712B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %115:vr128
3728B	  %154:gr32 = MOVPDI2DIrr %118:vr128
3744B	  CMP32rr %1:gr32, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3856B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8_DB %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3968B	  %155.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %155.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

4080B	  %154:gr32 = nsw IMUL32rr %154:gr32(tied-def 0), %156.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
4112B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags
4128B	  CMP32rr %155.sub_32bit:gr64_with_sub_8bit, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15

4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4336B	  $esi = COPY %154:gr32
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
240B	  $rsi = COPY %46:gr64
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  undef %155.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  %154:gr32 = MOV32ri 1
336B	  CMP32ri8 %155.sub_32bit:gr64_with_sub_8bit, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

432B	  %1:gr32 = LEA64_32r %155:gr64_with_sub_8bit, 1, $noreg, -1, $noreg
448B	  CMP32ri8 %1:gr32, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

496B	  undef %156.sub_32bit:gr64_with_sub_8bit = MOV32ri 2
512B	  %154:gr32 = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

592B	  undef %156.sub_32bit:gr64_with_sub_8bit = COPY %1:gr32
608B	  %156.sub_32bit:gr64_with_sub_8bit = AND32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), -8, implicit-def dead $eflags
640B	  %55:gr32 = LEA64_32r %156:gr64_with_sub_8bit, 1, $noreg, -8, $noreg
656B	  %4:gr32 = COPY %55:gr32
672B	  %4:gr32 = exact SHR32ri %4:gr32(tied-def 0), 3, implicit-def dead $eflags
704B	  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  %144:gr32 = COPY %4:gr32
736B	  %144:gr32 = AND32ri8 %144:gr32(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 %55:gr32, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  %146:vr128 = COPY %136:vr128
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

960B	  %4:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
976B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1008B	  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1024B	  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  %146:vr128 = COPY %136:vr128

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

1280B	  %68:vr128 = COPY %143:vr128
1296B	  %68:vr128 = PADDDrr %68:vr128(tied-def 0), %125:vr128
1312B	  %61:vr128 = PSHUFDri %143:vr128, -11
1328B	  %63:vr128 = PSHUFDri %136:vr128, -11
1360B	  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), %61:vr128
1392B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
1408B	  %65:vr128 = PSHUFDri %146:vr128, -11
1424B	  %67:vr128 = PSHUFDri %68:vr128, -11
1456B	  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), %65:vr128
1488B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %146:vr128
1504B	  %69:vr128 = COPY %143:vr128
1520B	  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
1536B	  %70:vr128 = COPY %143:vr128
1552B	  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
1584B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %69:vr128
1600B	  %73:vr128 = PSHUFDri %69:vr128, -11
1632B	  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), %63:vr128
1664B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
1680B	  %76:vr128 = PSHUFDri %70:vr128, -11
1712B	  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), %67:vr128
1728B	  %81:vr128 = COPY %143:vr128
1744B	  %81:vr128 = PADDDrr %81:vr128(tied-def 0), %128:vr128
1760B	  %84:vr128 = COPY %143:vr128
1776B	  %84:vr128 = PADDDrr %84:vr128(tied-def 0), %129:vr128
1792B	  %80:vr128 = PSHUFDri %81:vr128, -11
1824B	  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), %73:vr128
1856B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %136:vr128
1872B	  %83:vr128 = PSHUFDri %84:vr128, -11
1904B	  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), %76:vr128
1936B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %68:vr128
1952B	  %85:vr128 = COPY %143:vr128
1968B	  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
1984B	  %86:vr128 = COPY %143:vr128
2000B	  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
2032B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
2048B	  %136:vr128 = PSHUFDri %81:vr128, -24
2064B	  %90:vr128 = PSHUFDri %85:vr128, -11
2096B	  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), %80:vr128
2112B	  %91:vr128 = PSHUFDri %90:vr128, -24
2144B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %91:vr128
2176B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
2192B	  %146:vr128 = PSHUFDri %84:vr128, -24
2208B	  %95:vr128 = PSHUFDri %86:vr128, -11
2240B	  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), %83:vr128
2256B	  %96:vr128 = PSHUFDri %95:vr128, -24
2288B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %96:vr128
2320B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %132:vr128
2352B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

2640B	  TEST32rr %144:gr32, %144:gr32, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

2912B	  %97:vr128 = COPY %143:vr128
2928B	  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
2944B	  %101:vr128 = PSHUFDri %136:vr128, -11
2976B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
2992B	  %136:vr128 = PSHUFDri %136:vr128, -24
3008B	  %102:vr128 = PSHUFDri %143:vr128, -11
3040B	  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), %101:vr128
3056B	  %103:vr128 = PSHUFDri %102:vr128, -24
3088B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %103:vr128
3104B	  %106:vr128 = PSHUFDri %146:vr128, -11
3136B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %97:vr128
3152B	  %146:vr128 = PSHUFDri %146:vr128, -24
3168B	  %108:vr128 = PSHUFDri %97:vr128, -11
3200B	  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), %106:vr128
3216B	  %109:vr128 = PSHUFDri %108:vr128, -24
3248B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %109:vr128
3280B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %134:vr128
3312B	  %144:gr32 = ADD32ri8 %144:gr32(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

3504B	  %110:vr128 = PSHUFDri %136:vr128, -11
3520B	  %112:vr128 = PSHUFDri %146:vr128, -11
3552B	  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), %110:vr128
3584B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %136:vr128
3600B	  %115:vr128 = PSHUFDri %146:vr128, -18
3632B	  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), %146:vr128
3648B	  %118:vr128 = PSHUFDri %112:vr128, -86
3680B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %112:vr128
3712B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %115:vr128
3728B	  %154:gr32 = MOVPDI2DIrr %118:vr128
3744B	  CMP32rr %1:gr32, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3856B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8_DB %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3968B	  %155.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %155.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

4080B	  %154:gr32 = nsw IMUL32rr %154:gr32(tied-def 0), %156.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
4112B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags
4128B	  CMP32rr %155.sub_32bit:gr64_with_sub_8bit, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15

4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4336B	  $esi = COPY %154:gr32
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
240B	  $rsi = COPY %46:gr64
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  undef %155.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  %154:gr32 = MOV32ri 1
336B	  CMP32ri8 %155.sub_32bit:gr64_with_sub_8bit, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

432B	  %1:gr32 = LEA64_32r %155:gr64_with_sub_8bit, 1, $noreg, -1, $noreg
448B	  CMP32ri8 %1:gr32, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

496B	  undef %156.sub_32bit:gr64_with_sub_8bit = MOV32ri 2
512B	  %154:gr32 = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

592B	  undef %156.sub_32bit:gr64_with_sub_8bit = COPY %1:gr32
608B	  %156.sub_32bit:gr64_with_sub_8bit = AND32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), -8, implicit-def dead $eflags
640B	  %55:gr32 = LEA64_32r %156:gr64_with_sub_8bit, 1, $noreg, -8, $noreg
656B	  %4:gr32 = COPY %55:gr32
672B	  %4:gr32 = exact SHR32ri %4:gr32(tied-def 0), 3, implicit-def dead $eflags
704B	  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  %144:gr32 = COPY %4:gr32
736B	  %144:gr32 = AND32ri8 %144:gr32(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 %55:gr32, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  %146:vr128 = COPY %136:vr128
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

960B	  %4:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
976B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1008B	  %125:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1024B	  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  %146:vr128 = COPY %136:vr128

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

1280B	  %68:vr128 = COPY %143:vr128
1296B	  %68:vr128 = PADDDrr %68:vr128(tied-def 0), %125:vr128
1312B	  %61:vr128 = PSHUFDri %143:vr128, -11
1328B	  %63:vr128 = PSHUFDri %136:vr128, -11
1360B	  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), %61:vr128
1392B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
1408B	  %65:vr128 = PSHUFDri %146:vr128, -11
1424B	  %67:vr128 = PSHUFDri %68:vr128, -11
1456B	  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), %65:vr128
1488B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %146:vr128
1504B	  %69:vr128 = COPY %143:vr128
1520B	  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
1536B	  %70:vr128 = COPY %143:vr128
1552B	  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
1584B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %69:vr128
1600B	  %73:vr128 = PSHUFDri %69:vr128, -11
1632B	  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), %63:vr128
1664B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
1680B	  %76:vr128 = PSHUFDri %70:vr128, -11
1712B	  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), %67:vr128
1728B	  %81:vr128 = COPY %143:vr128
1744B	  %81:vr128 = PADDDrr %81:vr128(tied-def 0), %128:vr128
1760B	  %84:vr128 = COPY %143:vr128
1776B	  %84:vr128 = PADDDrr %84:vr128(tied-def 0), %129:vr128
1792B	  %80:vr128 = PSHUFDri %81:vr128, -11
1824B	  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), %73:vr128
1856B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %136:vr128
1872B	  %83:vr128 = PSHUFDri %84:vr128, -11
1904B	  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), %76:vr128
1936B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %68:vr128
1952B	  %85:vr128 = COPY %143:vr128
1968B	  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
1984B	  %86:vr128 = COPY %143:vr128
2000B	  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
2032B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
2048B	  %136:vr128 = PSHUFDri %81:vr128, -24
2064B	  %90:vr128 = PSHUFDri %85:vr128, -11
2096B	  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), %80:vr128
2112B	  %91:vr128 = PSHUFDri %90:vr128, -24
2144B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %91:vr128
2176B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
2192B	  %146:vr128 = PSHUFDri %84:vr128, -24
2208B	  %95:vr128 = PSHUFDri %86:vr128, -11
2240B	  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), %83:vr128
2256B	  %96:vr128 = PSHUFDri %95:vr128, -24
2288B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %96:vr128
2320B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %132:vr128
2352B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

2640B	  TEST32rr %144:gr32, %144:gr32, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

2912B	  %97:vr128 = COPY %143:vr128
2928B	  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
2944B	  %101:vr128 = PSHUFDri %136:vr128, -11
2976B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
2992B	  %136:vr128 = PSHUFDri %136:vr128, -24
3008B	  %102:vr128 = PSHUFDri %143:vr128, -11
3040B	  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), %101:vr128
3056B	  %103:vr128 = PSHUFDri %102:vr128, -24
3088B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %103:vr128
3104B	  %106:vr128 = PSHUFDri %146:vr128, -11
3136B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %97:vr128
3152B	  %146:vr128 = PSHUFDri %146:vr128, -24
3168B	  %108:vr128 = PSHUFDri %97:vr128, -11
3200B	  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), %106:vr128
3216B	  %109:vr128 = PSHUFDri %108:vr128, -24
3248B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %109:vr128
3280B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %134:vr128
3312B	  %144:gr32 = ADD32ri8 %144:gr32(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

3504B	  %110:vr128 = PSHUFDri %136:vr128, -11
3520B	  %112:vr128 = PSHUFDri %146:vr128, -11
3552B	  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), %110:vr128
3584B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %136:vr128
3600B	  %115:vr128 = PSHUFDri %146:vr128, -18
3632B	  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), %146:vr128
3648B	  %118:vr128 = PSHUFDri %112:vr128, -86
3680B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %112:vr128
3712B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %115:vr128
3728B	  %154:gr32 = MOVPDI2DIrr %118:vr128
3744B	  CMP32rr %1:gr32, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3856B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8_DB %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3968B	  %155.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %155.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

4080B	  %154:gr32 = nsw IMUL32rr %154:gr32(tied-def 0), %156.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
4112B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags
4128B	  CMP32rr %155.sub_32bit:gr64_with_sub_8bit, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15

4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4336B	  $esi = COPY %154:gr32
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
240B	  $rsi = COPY %46:gr64
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  undef %155.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  %154:gr32 = MOV32ri 1
336B	  CMP32ri8 %155.sub_32bit:gr64_with_sub_8bit, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

432B	  %1:gr32 = LEA64_32r %155:gr64_with_sub_8bit, 1, $noreg, -1, $noreg
448B	  CMP32ri8 %1:gr32, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

496B	  undef %156.sub_32bit:gr64_with_sub_8bit = MOV32ri 2
512B	  %154:gr32 = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

592B	  undef %156.sub_32bit:gr64_with_sub_8bit = COPY %1:gr32
608B	  %156.sub_32bit:gr64_with_sub_8bit = AND32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), -8, implicit-def dead $eflags
640B	  %55:gr32 = LEA64_32r %156:gr64_with_sub_8bit, 1, $noreg, -8, $noreg
656B	  %4:gr32 = COPY %55:gr32
672B	  %4:gr32 = exact SHR32ri %4:gr32(tied-def 0), 3, implicit-def dead $eflags
704B	  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  %144:gr32 = COPY %4:gr32
736B	  %144:gr32 = AND32ri8 %144:gr32(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 %55:gr32, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  %146:vr128 = COPY %136:vr128
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

960B	  %4:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
976B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1024B	  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  %146:vr128 = COPY %136:vr128

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

1280B	  %68:vr128 = COPY %143:vr128
1296B	  %68:vr128 = PADDDrm %68:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1312B	  %61:vr128 = PSHUFDri %143:vr128, -11
1328B	  %63:vr128 = PSHUFDri %136:vr128, -11
1360B	  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), %61:vr128
1392B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
1408B	  %65:vr128 = PSHUFDri %146:vr128, -11
1424B	  %67:vr128 = PSHUFDri %68:vr128, -11
1456B	  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), %65:vr128
1488B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %146:vr128
1504B	  %69:vr128 = COPY %143:vr128
1520B	  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
1536B	  %70:vr128 = COPY %143:vr128
1552B	  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
1584B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %69:vr128
1600B	  %73:vr128 = PSHUFDri %69:vr128, -11
1632B	  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), %63:vr128
1664B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
1680B	  %76:vr128 = PSHUFDri %70:vr128, -11
1712B	  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), %67:vr128
1728B	  %81:vr128 = COPY %143:vr128
1744B	  %81:vr128 = PADDDrr %81:vr128(tied-def 0), %128:vr128
1760B	  %84:vr128 = COPY %143:vr128
1776B	  %84:vr128 = PADDDrr %84:vr128(tied-def 0), %129:vr128
1792B	  %80:vr128 = PSHUFDri %81:vr128, -11
1824B	  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), %73:vr128
1856B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %136:vr128
1872B	  %83:vr128 = PSHUFDri %84:vr128, -11
1904B	  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), %76:vr128
1936B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %68:vr128
1952B	  %85:vr128 = COPY %143:vr128
1968B	  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
1984B	  %86:vr128 = COPY %143:vr128
2000B	  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
2032B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
2048B	  %136:vr128 = PSHUFDri %81:vr128, -24
2064B	  %90:vr128 = PSHUFDri %85:vr128, -11
2096B	  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), %80:vr128
2112B	  %91:vr128 = PSHUFDri %90:vr128, -24
2144B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %91:vr128
2176B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
2192B	  %146:vr128 = PSHUFDri %84:vr128, -24
2208B	  %95:vr128 = PSHUFDri %86:vr128, -11
2240B	  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), %83:vr128
2256B	  %96:vr128 = PSHUFDri %95:vr128, -24
2288B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %96:vr128
2320B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %132:vr128
2352B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

2640B	  TEST32rr %144:gr32, %144:gr32, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

2912B	  %97:vr128 = COPY %143:vr128
2928B	  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
2944B	  %101:vr128 = PSHUFDri %136:vr128, -11
2976B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
2992B	  %136:vr128 = PSHUFDri %136:vr128, -24
3008B	  %102:vr128 = PSHUFDri %143:vr128, -11
3040B	  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), %101:vr128
3056B	  %103:vr128 = PSHUFDri %102:vr128, -24
3088B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %103:vr128
3104B	  %106:vr128 = PSHUFDri %146:vr128, -11
3136B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %97:vr128
3152B	  %146:vr128 = PSHUFDri %146:vr128, -24
3168B	  %108:vr128 = PSHUFDri %97:vr128, -11
3200B	  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), %106:vr128
3216B	  %109:vr128 = PSHUFDri %108:vr128, -24
3248B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %109:vr128
3280B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %134:vr128
3312B	  %144:gr32 = ADD32ri8 %144:gr32(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

3504B	  %110:vr128 = PSHUFDri %136:vr128, -11
3520B	  %112:vr128 = PSHUFDri %146:vr128, -11
3552B	  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), %110:vr128
3584B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %136:vr128
3600B	  %115:vr128 = PSHUFDri %146:vr128, -18
3632B	  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), %146:vr128
3648B	  %118:vr128 = PSHUFDri %112:vr128, -86
3680B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %112:vr128
3712B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %115:vr128
3728B	  %154:gr32 = MOVPDI2DIrr %118:vr128
3744B	  CMP32rr %1:gr32, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3856B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8_DB %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3968B	  %155.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %155.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

4080B	  %154:gr32 = nsw IMUL32rr %154:gr32(tied-def 0), %156.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
4112B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags
4128B	  CMP32rr %155.sub_32bit:gr64_with_sub_8bit, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15

4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4336B	  $esi = COPY %154:gr32
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
240B	  $rsi = COPY %46:gr64
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  undef %155.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  %154:gr32 = MOV32ri 1
336B	  CMP32ri8 %155.sub_32bit:gr64_with_sub_8bit, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

432B	  %1:gr32 = LEA64_32r %155:gr64_with_sub_8bit, 1, $noreg, -1, $noreg
448B	  CMP32ri8 %1:gr32, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

496B	  undef %156.sub_32bit:gr64_with_sub_8bit = MOV32ri 2
512B	  %154:gr32 = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

592B	  undef %156.sub_32bit:gr64_with_sub_8bit = COPY %1:gr32
608B	  %156.sub_32bit:gr64_with_sub_8bit = AND32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), -8, implicit-def dead $eflags
640B	  %55:gr32 = LEA64_32r %156:gr64_with_sub_8bit, 1, $noreg, -8, $noreg
656B	  %4:gr32 = COPY %55:gr32
672B	  %4:gr32 = exact SHR32ri %4:gr32(tied-def 0), 3, implicit-def dead $eflags
704B	  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  %144:gr32 = COPY %4:gr32
736B	  %144:gr32 = AND32ri8 %144:gr32(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 %55:gr32, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  %146:vr128 = COPY %136:vr128
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

960B	  %4:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
976B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1024B	  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  %146:vr128 = COPY %136:vr128

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

1280B	  %68:vr128 = COPY %143:vr128
1296B	  %68:vr128 = PADDDrm %68:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1312B	  %61:vr128 = PSHUFDri %143:vr128, -11
1328B	  %63:vr128 = PSHUFDri %136:vr128, -11
1360B	  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), %61:vr128
1392B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
1408B	  %65:vr128 = PSHUFDri %146:vr128, -11
1424B	  %67:vr128 = PSHUFDri %68:vr128, -11
1456B	  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), %65:vr128
1488B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %146:vr128
1504B	  %69:vr128 = COPY %143:vr128
1520B	  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
1536B	  %70:vr128 = COPY %143:vr128
1552B	  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
1584B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %69:vr128
1600B	  %73:vr128 = PSHUFDri %69:vr128, -11
1632B	  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), %63:vr128
1664B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
1680B	  %76:vr128 = PSHUFDri %70:vr128, -11
1712B	  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), %67:vr128
1728B	  %81:vr128 = COPY %143:vr128
1744B	  %81:vr128 = PADDDrr %81:vr128(tied-def 0), %128:vr128
1760B	  %84:vr128 = COPY %143:vr128
1776B	  %84:vr128 = PADDDrr %84:vr128(tied-def 0), %129:vr128
1792B	  %80:vr128 = PSHUFDri %81:vr128, -11
1824B	  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), %73:vr128
1856B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %136:vr128
1872B	  %83:vr128 = PSHUFDri %84:vr128, -11
1904B	  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), %76:vr128
1936B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %68:vr128
1952B	  %85:vr128 = COPY %143:vr128
1968B	  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
1984B	  %86:vr128 = COPY %143:vr128
2000B	  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
2032B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
2048B	  %136:vr128 = PSHUFDri %81:vr128, -24
2064B	  %90:vr128 = PSHUFDri %85:vr128, -11
2096B	  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), %80:vr128
2112B	  %91:vr128 = PSHUFDri %90:vr128, -24
2144B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %91:vr128
2176B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
2192B	  %146:vr128 = PSHUFDri %84:vr128, -24
2208B	  %95:vr128 = PSHUFDri %86:vr128, -11
2240B	  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), %83:vr128
2256B	  %96:vr128 = PSHUFDri %95:vr128, -24
2288B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %96:vr128
2320B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %132:vr128
2352B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

2640B	  TEST32rr %144:gr32, %144:gr32, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

2912B	  %97:vr128 = COPY %143:vr128
2928B	  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
2944B	  %101:vr128 = PSHUFDri %136:vr128, -11
2976B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
2992B	  %136:vr128 = PSHUFDri %136:vr128, -24
3008B	  %102:vr128 = PSHUFDri %143:vr128, -11
3040B	  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), %101:vr128
3056B	  %103:vr128 = PSHUFDri %102:vr128, -24
3088B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %103:vr128
3104B	  %106:vr128 = PSHUFDri %146:vr128, -11
3136B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %97:vr128
3152B	  %146:vr128 = PSHUFDri %146:vr128, -24
3168B	  %108:vr128 = PSHUFDri %97:vr128, -11
3200B	  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), %106:vr128
3216B	  %109:vr128 = PSHUFDri %108:vr128, -24
3248B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %109:vr128
3280B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %134:vr128
3312B	  %144:gr32 = ADD32ri8 %144:gr32(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

3504B	  %110:vr128 = PSHUFDri %136:vr128, -11
3520B	  %112:vr128 = PSHUFDri %146:vr128, -11
3552B	  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), %110:vr128
3584B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %136:vr128
3600B	  %115:vr128 = PSHUFDri %146:vr128, -18
3632B	  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), %146:vr128
3648B	  %118:vr128 = PSHUFDri %112:vr128, -86
3680B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %112:vr128
3712B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %115:vr128
3728B	  %154:gr32 = MOVPDI2DIrr %118:vr128
3744B	  CMP32rr %1:gr32, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3856B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8_DB %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3968B	  %155.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %155.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

4080B	  %154:gr32 = nsw IMUL32rr %154:gr32(tied-def 0), %156.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
4112B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags
4128B	  CMP32rr %155.sub_32bit:gr64_with_sub_8bit, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15

4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4336B	  $esi = COPY %154:gr32
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
240B	  $rsi = COPY %46:gr64
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  undef %155.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  %154:gr32 = MOV32ri 1
336B	  CMP32ri8 %155.sub_32bit:gr64_with_sub_8bit, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

432B	  %1:gr32 = LEA64_32r %155:gr64_with_sub_8bit, 1, $noreg, -1, $noreg
448B	  CMP32ri8 %1:gr32, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

496B	  undef %156.sub_32bit:gr64_with_sub_8bit = MOV32ri 2
512B	  %154:gr32 = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

592B	  undef %156.sub_32bit:gr64_with_sub_8bit = COPY %1:gr32
608B	  %156.sub_32bit:gr64_with_sub_8bit = AND32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), -8, implicit-def dead $eflags
640B	  %55:gr32 = LEA64_32r %156:gr64_with_sub_8bit, 1, $noreg, -8, $noreg
656B	  %4:gr32 = COPY %55:gr32
672B	  %4:gr32 = exact SHR32ri %4:gr32(tied-def 0), 3, implicit-def dead $eflags
704B	  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  %144:gr32 = COPY %4:gr32
736B	  %144:gr32 = AND32ri8 %144:gr32(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 %55:gr32, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  %146:vr128 = COPY %136:vr128
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

960B	  %4:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
976B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1024B	  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  %146:vr128 = COPY %136:vr128

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

1280B	  %68:vr128 = COPY %143:vr128
1296B	  %68:vr128 = PADDDrm %68:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1312B	  %61:vr128 = PSHUFDri %143:vr128, -11
1328B	  %63:vr128 = PSHUFDri %136:vr128, -11
1360B	  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), %61:vr128
1392B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
1408B	  %65:vr128 = PSHUFDri %146:vr128, -11
1424B	  %67:vr128 = PSHUFDri %68:vr128, -11
1456B	  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), %65:vr128
1488B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %146:vr128
1504B	  %69:vr128 = COPY %143:vr128
1520B	  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
1536B	  %70:vr128 = COPY %143:vr128
1552B	  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
1584B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %69:vr128
1600B	  %73:vr128 = PSHUFDri %69:vr128, -11
1632B	  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), %63:vr128
1664B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
1680B	  %76:vr128 = PSHUFDri %70:vr128, -11
1712B	  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), %67:vr128
1728B	  %81:vr128 = COPY %143:vr128
1744B	  %81:vr128 = PADDDrr %81:vr128(tied-def 0), %128:vr128
1760B	  %84:vr128 = COPY %143:vr128
1776B	  %84:vr128 = PADDDrr %84:vr128(tied-def 0), %129:vr128
1792B	  %80:vr128 = PSHUFDri %81:vr128, -11
1824B	  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), %73:vr128
1856B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %136:vr128
1872B	  %83:vr128 = PSHUFDri %84:vr128, -11
1904B	  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), %76:vr128
1936B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %68:vr128
1952B	  %85:vr128 = COPY %143:vr128
1968B	  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
1984B	  %86:vr128 = COPY %143:vr128
2000B	  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
2032B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
2048B	  %136:vr128 = PSHUFDri %81:vr128, -24
2064B	  %90:vr128 = PSHUFDri %85:vr128, -11
2096B	  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), %80:vr128
2112B	  %91:vr128 = PSHUFDri %90:vr128, -24
2144B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %91:vr128
2176B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
2192B	  %146:vr128 = PSHUFDri %84:vr128, -24
2208B	  %95:vr128 = PSHUFDri %86:vr128, -11
2240B	  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), %83:vr128
2256B	  %96:vr128 = PSHUFDri %95:vr128, -24
2288B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %96:vr128
2320B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %132:vr128
2352B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

2640B	  TEST32rr %144:gr32, %144:gr32, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

2912B	  %97:vr128 = COPY %143:vr128
2928B	  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
2944B	  %101:vr128 = PSHUFDri %136:vr128, -11
2976B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
2992B	  %136:vr128 = PSHUFDri %136:vr128, -24
3008B	  %102:vr128 = PSHUFDri %143:vr128, -11
3040B	  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), %101:vr128
3056B	  %103:vr128 = PSHUFDri %102:vr128, -24
3088B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %103:vr128
3104B	  %106:vr128 = PSHUFDri %146:vr128, -11
3136B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %97:vr128
3152B	  %146:vr128 = PSHUFDri %146:vr128, -24
3168B	  %108:vr128 = PSHUFDri %97:vr128, -11
3200B	  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), %106:vr128
3216B	  %109:vr128 = PSHUFDri %108:vr128, -24
3248B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %109:vr128
3280B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %134:vr128
3312B	  %144:gr32 = ADD32ri8 %144:gr32(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

3504B	  %110:vr128 = PSHUFDri %136:vr128, -11
3520B	  %112:vr128 = PSHUFDri %146:vr128, -11
3552B	  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), %110:vr128
3584B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %136:vr128
3600B	  %115:vr128 = PSHUFDri %146:vr128, -18
3632B	  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), %146:vr128
3648B	  %118:vr128 = PSHUFDri %112:vr128, -86
3680B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %112:vr128
3712B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %115:vr128
3728B	  %154:gr32 = MOVPDI2DIrr %118:vr128
3744B	  CMP32rr %1:gr32, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3856B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8_DB %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3968B	  %155.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %155.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

4080B	  %154:gr32 = nsw IMUL32rr %154:gr32(tied-def 0), %156.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
4112B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags
4128B	  CMP32rr %155.sub_32bit:gr64_with_sub_8bit, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15

4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4336B	  $esi = COPY %154:gr32
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  %46:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
240B	  $rsi = COPY %46:gr64
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  undef %155.sub_32bit:gr64_with_sub_8bit = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  %154:gr32 = MOV32ri 1
336B	  CMP32ri8 %155.sub_32bit:gr64_with_sub_8bit, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)

432B	  %1:gr32 = LEA64_32r %155:gr64_with_sub_8bit, 1, $noreg, -1, $noreg
448B	  CMP32ri8 %1:gr32, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

496B	  undef %156.sub_32bit:gr64_with_sub_8bit = MOV32ri 2
512B	  %154:gr32 = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)

592B	  undef %156.sub_32bit:gr64_with_sub_8bit = COPY %1:gr32
608B	  %156.sub_32bit:gr64_with_sub_8bit = AND32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), -8, implicit-def dead $eflags
640B	  %55:gr32 = LEA64_32r %156:gr64_with_sub_8bit, 1, $noreg, -8, $noreg
656B	  %4:gr32 = COPY %55:gr32
672B	  %4:gr32 = exact SHR32ri %4:gr32(tied-def 0), 3, implicit-def dead $eflags
704B	  %4:gr32 = nuw nsw ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
720B	  %144:gr32 = COPY %4:gr32
736B	  %144:gr32 = AND32ri8 %144:gr32(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 %55:gr32, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)

800B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  %146:vr128 = COPY %136:vr128
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)

960B	  %4:gr32 = AND32ri8 %4:gr32(tied-def 0), -4, implicit-def dead $eflags
976B	  %143:vr128 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  %136:vr128 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1024B	  %126:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  %127:vr128 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  %128:vr128 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  %129:vr128 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  %130:vr128 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  %131:vr128 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  %132:vr128 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  %146:vr128 = COPY %136:vr128

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)

1280B	  %68:vr128 = COPY %143:vr128
1296B	  %68:vr128 = PADDDrm %68:vr128(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1312B	  %61:vr128 = PSHUFDri %143:vr128, -11
1328B	  %63:vr128 = PSHUFDri %136:vr128, -11
1360B	  %63:vr128 = PMULUDQrr %63:vr128(tied-def 0), %61:vr128
1392B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
1408B	  %65:vr128 = PSHUFDri %146:vr128, -11
1424B	  %67:vr128 = PSHUFDri %68:vr128, -11
1456B	  %67:vr128 = PMULUDQrr %67:vr128(tied-def 0), %65:vr128
1488B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %146:vr128
1504B	  %69:vr128 = COPY %143:vr128
1520B	  %69:vr128 = PADDDrr %69:vr128(tied-def 0), %126:vr128
1536B	  %70:vr128 = COPY %143:vr128
1552B	  %70:vr128 = PADDDrr %70:vr128(tied-def 0), %127:vr128
1584B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %69:vr128
1600B	  %73:vr128 = PSHUFDri %69:vr128, -11
1632B	  %73:vr128 = PMULUDQrr %73:vr128(tied-def 0), %63:vr128
1664B	  %68:vr128 = PMULUDQrr %68:vr128(tied-def 0), %70:vr128
1680B	  %76:vr128 = PSHUFDri %70:vr128, -11
1712B	  %76:vr128 = PMULUDQrr %76:vr128(tied-def 0), %67:vr128
1728B	  %81:vr128 = COPY %143:vr128
1744B	  %81:vr128 = PADDDrr %81:vr128(tied-def 0), %128:vr128
1760B	  %84:vr128 = COPY %143:vr128
1776B	  %84:vr128 = PADDDrr %84:vr128(tied-def 0), %129:vr128
1792B	  %80:vr128 = PSHUFDri %81:vr128, -11
1824B	  %80:vr128 = PMULUDQrr %80:vr128(tied-def 0), %73:vr128
1856B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %136:vr128
1872B	  %83:vr128 = PSHUFDri %84:vr128, -11
1904B	  %83:vr128 = PMULUDQrr %83:vr128(tied-def 0), %76:vr128
1936B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %68:vr128
1952B	  %85:vr128 = COPY %143:vr128
1968B	  %85:vr128 = PADDDrr %85:vr128(tied-def 0), %130:vr128
1984B	  %86:vr128 = COPY %143:vr128
2000B	  %86:vr128 = PADDDrr %86:vr128(tied-def 0), %131:vr128
2032B	  %81:vr128 = PMULUDQrr %81:vr128(tied-def 0), %85:vr128
2048B	  %136:vr128 = PSHUFDri %81:vr128, -24
2064B	  %90:vr128 = PSHUFDri %85:vr128, -11
2096B	  %90:vr128 = PMULUDQrr %90:vr128(tied-def 0), %80:vr128
2112B	  %91:vr128 = PSHUFDri %90:vr128, -24
2144B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %91:vr128
2176B	  %84:vr128 = PMULUDQrr %84:vr128(tied-def 0), %86:vr128
2192B	  %146:vr128 = PSHUFDri %84:vr128, -24
2208B	  %95:vr128 = PSHUFDri %86:vr128, -11
2240B	  %95:vr128 = PMULUDQrr %95:vr128(tied-def 0), %83:vr128
2256B	  %96:vr128 = PSHUFDri %95:vr128, -24
2288B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %96:vr128
2320B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %132:vr128
2352B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)

2640B	  TEST32rr %144:gr32, %144:gr32, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)

2736B	  %133:vr128 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  %134:vr128 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)

2912B	  %97:vr128 = COPY %143:vr128
2928B	  %97:vr128 = PADDDrr %97:vr128(tied-def 0), %133:vr128
2944B	  %101:vr128 = PSHUFDri %136:vr128, -11
2976B	  %136:vr128 = PMULUDQrr %136:vr128(tied-def 0), %143:vr128
2992B	  %136:vr128 = PSHUFDri %136:vr128, -24
3008B	  %102:vr128 = PSHUFDri %143:vr128, -11
3040B	  %102:vr128 = PMULUDQrr %102:vr128(tied-def 0), %101:vr128
3056B	  %103:vr128 = PSHUFDri %102:vr128, -24
3088B	  %136:vr128 = PUNPCKLDQrr %136:vr128(tied-def 0), %103:vr128
3104B	  %106:vr128 = PSHUFDri %146:vr128, -11
3136B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %97:vr128
3152B	  %146:vr128 = PSHUFDri %146:vr128, -24
3168B	  %108:vr128 = PSHUFDri %97:vr128, -11
3200B	  %108:vr128 = PMULUDQrr %108:vr128(tied-def 0), %106:vr128
3216B	  %109:vr128 = PSHUFDri %108:vr128, -24
3248B	  %146:vr128 = PUNPCKLDQrr %146:vr128(tied-def 0), %109:vr128
3280B	  %143:vr128 = PADDDrr %143:vr128(tied-def 0), %134:vr128
3312B	  %144:gr32 = ADD32ri8 %144:gr32(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)

3504B	  %110:vr128 = PSHUFDri %136:vr128, -11
3520B	  %112:vr128 = PSHUFDri %146:vr128, -11
3552B	  %112:vr128 = PMULUDQrr %112:vr128(tied-def 0), %110:vr128
3584B	  %146:vr128 = PMULUDQrr %146:vr128(tied-def 0), %136:vr128
3600B	  %115:vr128 = PSHUFDri %146:vr128, -18
3632B	  %115:vr128 = PMULUDQrr %115:vr128(tied-def 0), %146:vr128
3648B	  %118:vr128 = PSHUFDri %112:vr128, -86
3680B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %112:vr128
3712B	  %118:vr128 = PMULUDQrr %118:vr128(tied-def 0), %115:vr128
3728B	  %154:gr32 = MOVPDI2DIrr %118:vr128
3744B	  CMP32rr %1:gr32, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)

3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

3856B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8_DB %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 2, implicit-def dead $eflags

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)

3968B	  %155.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %155.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)

4080B	  %154:gr32 = nsw IMUL32rr %154:gr32(tied-def 0), %156.sub_32bit:gr64_with_sub_8bit, implicit-def dead $eflags
4112B	  %156.sub_32bit:gr64_with_sub_8bit = ADD32ri8 %156.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags
4128B	  CMP32rr %155.sub_32bit:gr64_with_sub_8bit, %156.sub_32bit:gr64_with_sub_8bit, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15

4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4336B	  $esi = COPY %154:gr32
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  renamable $esi = MOV32ri 1
336B	  CMP32ri8 renamable $eax, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
	  liveins: $rax
432B	  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
448B	  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)
	  liveins: $rax
496B	  renamable $ecx = MOV32ri 2, implicit-def $rcx
512B	  renamable $esi = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
	  liveins: $rax, $r8d
592B	  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
608B	  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
640B	  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
656B	  renamable $edi = COPY renamable $edx
672B	  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
704B	  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
720B	  renamable $esi = COPY renamable $edi
736B	  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)
	  liveins: $esi, $rax, $rcx, $r8d
800B	  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  renamable $xmm2 = COPY renamable $xmm1
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)
	  liveins: $edi, $esi, $rax, $rcx, $r8d
960B	  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
976B	  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1024B	  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  renamable $xmm2 = COPY renamable $xmm1

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
	  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
1280B	  renamable $xmm6 = COPY renamable $xmm0
1296B	  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1312B	  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
1328B	  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
1360B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
1392B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
1408B	  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
1424B	  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
1456B	  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
1488B	  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
1504B	  renamable $xmm2 = COPY renamable $xmm0
1520B	  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
1536B	  renamable $xmm7 = COPY renamable $xmm0
1552B	  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
1584B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
1600B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
1632B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
1664B	  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
1680B	  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
1712B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
1728B	  renamable $xmm4 = COPY renamable $xmm0
1744B	  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
1760B	  renamable $xmm7 = COPY renamable $xmm0
1776B	  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
1792B	  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
1824B	  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
1856B	  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
1872B	  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
1904B	  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
1936B	  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
1952B	  renamable $xmm2 = COPY renamable $xmm0
1968B	  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
1984B	  renamable $xmm3 = COPY renamable $xmm0
2000B	  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
2032B	  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
2048B	  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
2064B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
2096B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
2112B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
2144B	  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
2176B	  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
2192B	  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
2208B	  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
2240B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
2256B	  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
2288B	  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
2320B	  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
2352B	  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
	  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
2640B	  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)
	  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
2736B	  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
	  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
2912B	  renamable $xmm5 = COPY renamable $xmm0
2928B	  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
2944B	  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
2976B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
2992B	  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
3008B	  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
3040B	  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
3056B	  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
3088B	  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
3104B	  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
3136B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
3152B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
3168B	  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
3200B	  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
3216B	  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
3248B	  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
3280B	  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
3312B	  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
	  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
3504B	  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
3520B	  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
3552B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
3584B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
3600B	  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
3632B	  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
3648B	  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
3680B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
3712B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
3728B	  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
3744B	  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)
	  liveins: $esi
3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)
	  liveins: $esi, $rax, $rcx
3856B	  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)
	  liveins: $esi, $rax, $rcx
3968B	  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
	  liveins: $esi, $rax, $rcx
4080B	  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
4112B	  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
4128B	  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15
	  liveins: $esi
4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  renamable $esi = MOV32ri 1
336B	  CMP32ri8 renamable $eax, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
	  liveins: $rax
432B	  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
448B	  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)
	  liveins: $rax
496B	  renamable $ecx = MOV32ri 2, implicit-def $rcx
512B	  renamable $esi = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
	  liveins: $rax, $r8d
592B	  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
608B	  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
640B	  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
656B	  renamable $edi = COPY renamable $edx
672B	  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
704B	  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
720B	  renamable $esi = COPY renamable $edi
736B	  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)
	  liveins: $esi, $rax, $rcx, $r8d
800B	  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  renamable $xmm2 = COPY renamable $xmm1
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)
	  liveins: $edi, $esi, $rax, $rcx, $r8d
960B	  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
976B	  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1024B	  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  renamable $xmm2 = COPY renamable $xmm1

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
	  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
1280B	  renamable $xmm6 = COPY renamable $xmm0
1296B	  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1312B	  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
1328B	  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
1360B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
1392B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
1408B	  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
1424B	  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
1456B	  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
1488B	  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
1504B	  renamable $xmm2 = COPY renamable $xmm0
1520B	  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
1536B	  renamable $xmm7 = COPY renamable $xmm0
1552B	  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
1584B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
1600B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
1632B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
1664B	  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
1680B	  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
1712B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
1728B	  renamable $xmm4 = COPY renamable $xmm0
1744B	  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
1760B	  renamable $xmm7 = COPY renamable $xmm0
1776B	  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
1792B	  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
1824B	  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
1856B	  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
1872B	  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
1904B	  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
1936B	  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
1952B	  renamable $xmm2 = COPY renamable $xmm0
1968B	  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
1984B	  renamable $xmm3 = COPY renamable $xmm0
2000B	  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
2032B	  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
2048B	  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
2064B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
2096B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
2112B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
2144B	  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
2176B	  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
2192B	  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
2208B	  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
2240B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
2256B	  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
2288B	  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
2320B	  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
2352B	  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
	  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
2640B	  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)
	  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
2736B	  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
	  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
2912B	  renamable $xmm5 = COPY renamable $xmm0
2928B	  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
2944B	  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
2976B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
2992B	  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
3008B	  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
3040B	  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
3056B	  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
3088B	  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
3104B	  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
3136B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
3152B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
3168B	  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
3200B	  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
3216B	  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
3248B	  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
3280B	  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
3312B	  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
	  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
3504B	  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
3520B	  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
3552B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
3584B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
3600B	  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
3632B	  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
3648B	  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
3680B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
3712B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
3728B	  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
3744B	  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)
	  liveins: $esi
3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)
	  liveins: $esi, $rax, $rcx
3856B	  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)
	  liveins: $esi, $rax, $rcx
3968B	  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
	  liveins: $esi, $rax, $rcx
4080B	  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
4112B	  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
4128B	  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15
	  liveins: $esi
4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  renamable $esi = MOV32ri 1
336B	  CMP32ri8 renamable $eax, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
	  liveins: $rax
432B	  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
448B	  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)
	  liveins: $rax
496B	  renamable $ecx = MOV32ri 2, implicit-def $rcx
512B	  renamable $esi = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
	  liveins: $rax, $r8d
592B	  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
608B	  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
640B	  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
656B	  renamable $edi = COPY renamable $edx
672B	  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
704B	  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
720B	  renamable $esi = COPY renamable $edi
736B	  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)
	  liveins: $esi, $rax, $rcx, $r8d
800B	  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  renamable $xmm2 = COPY renamable $xmm1
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)
	  liveins: $edi, $esi, $rax, $rcx, $r8d
960B	  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
976B	  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1024B	  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  renamable $xmm2 = COPY renamable $xmm1

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
	  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
1280B	  renamable $xmm6 = COPY renamable $xmm0
1296B	  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1312B	  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
1328B	  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
1360B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
1392B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
1408B	  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
1424B	  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
1456B	  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
1488B	  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
1504B	  renamable $xmm2 = COPY renamable $xmm0
1520B	  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
1536B	  renamable $xmm7 = COPY renamable $xmm0
1552B	  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
1584B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
1600B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
1632B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
1664B	  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
1680B	  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
1712B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
1728B	  renamable $xmm4 = COPY renamable $xmm0
1744B	  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
1760B	  renamable $xmm7 = COPY renamable $xmm0
1776B	  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
1792B	  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
1824B	  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
1856B	  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
1872B	  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
1904B	  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
1936B	  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
1952B	  renamable $xmm2 = COPY renamable $xmm0
1968B	  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
1984B	  renamable $xmm3 = COPY renamable $xmm0
2000B	  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
2032B	  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
2048B	  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
2064B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
2096B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
2112B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
2144B	  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
2176B	  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
2192B	  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
2208B	  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
2240B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
2256B	  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
2288B	  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
2320B	  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
2352B	  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
	  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
2640B	  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)
	  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
2736B	  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
	  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
2912B	  renamable $xmm5 = COPY renamable $xmm0
2928B	  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
2944B	  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
2976B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
2992B	  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
3008B	  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
3040B	  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
3056B	  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
3088B	  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
3104B	  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
3136B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
3152B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
3168B	  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
3200B	  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
3216B	  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
3248B	  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
3280B	  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
3312B	  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
	  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
3504B	  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
3520B	  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
3552B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
3584B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
3600B	  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
3632B	  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
3648B	  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
3680B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
3712B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
3728B	  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
3744B	  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)
	  liveins: $esi
3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)
	  liveins: $esi, $rax, $rcx
3856B	  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)
	  liveins: $esi, $rax, $rcx
3968B	  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
	  liveins: $esi, $rax, $rcx
4080B	  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
4112B	  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
4128B	  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15
	  liveins: $esi
4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  renamable $esi = MOV32ri 1
336B	  CMP32ri8 renamable $eax, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
	  liveins: $rax
432B	  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
448B	  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)
	  liveins: $rax
496B	  renamable $ecx = MOV32ri 2, implicit-def $rcx
512B	  renamable $esi = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
	  liveins: $rax, $r8d
592B	  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
608B	  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
640B	  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
656B	  renamable $edi = COPY renamable $edx
672B	  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
704B	  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
720B	  renamable $esi = COPY renamable $edi
736B	  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)
	  liveins: $esi, $rax, $rcx, $r8d
800B	  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  renamable $xmm2 = COPY renamable $xmm1
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)
	  liveins: $edi, $esi, $rax, $rcx, $r8d
960B	  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
976B	  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1024B	  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  renamable $xmm2 = COPY renamable $xmm1

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
	  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
1280B	  renamable $xmm6 = COPY renamable $xmm0
1296B	  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1312B	  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
1328B	  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
1360B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
1392B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
1408B	  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
1424B	  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
1456B	  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
1488B	  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
1504B	  renamable $xmm2 = COPY renamable $xmm0
1520B	  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
1536B	  renamable $xmm7 = COPY renamable $xmm0
1552B	  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
1584B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
1600B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
1632B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
1664B	  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
1680B	  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
1712B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
1728B	  renamable $xmm4 = COPY renamable $xmm0
1744B	  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
1760B	  renamable $xmm7 = COPY renamable $xmm0
1776B	  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
1792B	  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
1824B	  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
1856B	  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
1872B	  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
1904B	  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
1936B	  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
1952B	  renamable $xmm2 = COPY renamable $xmm0
1968B	  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
1984B	  renamable $xmm3 = COPY renamable $xmm0
2000B	  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
2032B	  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
2048B	  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
2064B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
2096B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
2112B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
2144B	  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
2176B	  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
2192B	  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
2208B	  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
2240B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
2256B	  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
2288B	  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
2320B	  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
2352B	  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
	  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
2640B	  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)
	  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
2736B	  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
	  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
2912B	  renamable $xmm5 = COPY renamable $xmm0
2928B	  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
2944B	  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
2976B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
2992B	  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
3008B	  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
3040B	  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
3056B	  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
3088B	  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
3104B	  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
3136B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
3152B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
3168B	  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
3200B	  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
3216B	  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
3248B	  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
3280B	  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
3312B	  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
	  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
3504B	  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
3520B	  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
3552B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
3584B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
3600B	  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
3632B	  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
3648B	  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
3680B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
3712B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
3728B	  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
3744B	  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)
	  liveins: $esi
3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)
	  liveins: $esi, $rax, $rcx
3856B	  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)
	  liveins: $esi, $rax, $rcx
3968B	  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
	  liveins: $esi, $rax, $rcx
4080B	  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
4112B	  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
4128B	  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15
	  liveins: $esi
4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  renamable $esi = MOV32ri 1
336B	  CMP32ri8 renamable $eax, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
	  liveins: $rax
432B	  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
448B	  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)
	  liveins: $rax
496B	  renamable $ecx = MOV32ri 2, implicit-def $rcx
512B	  renamable $esi = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
	  liveins: $rax, $r8d
592B	  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
608B	  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
640B	  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
656B	  renamable $edi = COPY renamable $edx
672B	  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
704B	  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
720B	  renamable $esi = COPY renamable $edi
736B	  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)
	  liveins: $esi, $rax, $rcx, $r8d
800B	  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  renamable $xmm2 = COPY renamable $xmm1
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)
	  liveins: $edi, $esi, $rax, $rcx, $r8d
960B	  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
976B	  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1024B	  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  renamable $xmm2 = COPY renamable $xmm1

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
	  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
1280B	  renamable $xmm6 = COPY renamable $xmm0
1296B	  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1312B	  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
1328B	  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
1360B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
1392B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
1408B	  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
1424B	  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
1456B	  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
1488B	  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
1504B	  renamable $xmm2 = COPY renamable $xmm0
1520B	  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
1536B	  renamable $xmm7 = COPY renamable $xmm0
1552B	  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
1584B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
1600B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
1632B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
1664B	  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
1680B	  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
1712B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
1728B	  renamable $xmm4 = COPY renamable $xmm0
1744B	  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
1760B	  renamable $xmm7 = COPY renamable $xmm0
1776B	  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
1792B	  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
1824B	  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
1856B	  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
1872B	  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
1904B	  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
1936B	  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
1952B	  renamable $xmm2 = COPY renamable $xmm0
1968B	  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
1984B	  renamable $xmm3 = COPY renamable $xmm0
2000B	  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
2032B	  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
2048B	  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
2064B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
2096B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
2112B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
2144B	  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
2176B	  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
2192B	  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
2208B	  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
2240B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
2256B	  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
2288B	  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
2320B	  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
2352B	  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
	  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
2640B	  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)
	  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
2736B	  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
	  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
2912B	  renamable $xmm5 = COPY renamable $xmm0
2928B	  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
2944B	  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
2976B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
2992B	  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
3008B	  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
3040B	  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
3056B	  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
3088B	  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
3104B	  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
3136B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
3152B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
3168B	  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
3200B	  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
3216B	  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
3248B	  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
3280B	  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
3312B	  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
	  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
3504B	  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
3520B	  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
3552B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
3584B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
3600B	  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
3632B	  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
3648B	  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
3680B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
3712B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
3728B	  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
3744B	  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)
	  liveins: $esi
3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)
	  liveins: $esi, $rax, $rcx
3856B	  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)
	  liveins: $esi, $rax, $rcx
3968B	  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
	  liveins: $esi, $rax, $rcx
4080B	  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
4112B	  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
4128B	  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15
	  liveins: $esi
4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

0B	bb.0 (%ir-block.0):
	  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
96B	  $rdi = MOV32ri64 @.str
112B	  $esi = MOV32ri 1000
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
224B	  $rdi = MOV32ri64 @.str.1
256B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
272B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
288B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
320B	  renamable $esi = MOV32ri 1
336B	  CMP32ri8 renamable $eax, 2, implicit-def $eflags
368B	  JCC_1 %bb.14, 12, implicit killed $eflags
384B	  JMP_1 %bb.1

400B	bb.1 (%ir-block.7):
	; predecessors: %bb.0
	  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
	  liveins: $rax
432B	  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
448B	  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
464B	  JCC_1 %bb.3, 3, implicit killed $eflags

480B	bb.2:
	; predecessors: %bb.1
	  successors: %bb.12(0x80000000); %bb.12(100.00%)
	  liveins: $rax
496B	  renamable $ecx = MOV32ri 2, implicit-def $rcx
512B	  renamable $esi = MOV32ri 1
560B	  JMP_1 %bb.12

576B	bb.3 (%ir-block.10):
	; predecessors: %bb.1
	  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
	  liveins: $rax, $r8d
592B	  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
608B	  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
640B	  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
656B	  renamable $edi = COPY renamable $edx
672B	  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
704B	  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
720B	  renamable $esi = COPY renamable $edi
736B	  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
752B	  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
768B	  JCC_1 %bb.5, 3, implicit killed $eflags

784B	bb.4:
	; predecessors: %bb.3
	  successors: %bb.7(0x80000000); %bb.7(100.00%)
	  liveins: $esi, $rax, $rcx, $r8d
800B	  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
816B	  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
880B	  renamable $xmm2 = COPY renamable $xmm1
912B	  JMP_1 %bb.7

928B	bb.5 (%ir-block.18):
	; predecessors: %bb.3
	  successors: %bb.6(0x80000000); %bb.6(100.00%)
	  liveins: $edi, $esi, $rax, $rcx, $r8d
960B	  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
976B	  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
992B	  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
1024B	  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
1040B	  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
1056B	  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
1072B	  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
1088B	  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
1104B	  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
1120B	  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
1168B	  renamable $xmm2 = COPY renamable $xmm1

1200B	bb.6 (%ir-block.20):
	; predecessors: %bb.5, %bb.6
	  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
	  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
1280B	  renamable $xmm6 = COPY renamable $xmm0
1296B	  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
1312B	  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
1328B	  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
1360B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
1392B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
1408B	  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
1424B	  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
1456B	  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
1488B	  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
1504B	  renamable $xmm2 = COPY renamable $xmm0
1520B	  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
1536B	  renamable $xmm7 = COPY renamable $xmm0
1552B	  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
1584B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
1600B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
1632B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
1664B	  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
1680B	  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
1712B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
1728B	  renamable $xmm4 = COPY renamable $xmm0
1744B	  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
1760B	  renamable $xmm7 = COPY renamable $xmm0
1776B	  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
1792B	  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
1824B	  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
1856B	  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
1872B	  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
1904B	  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
1936B	  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
1952B	  renamable $xmm2 = COPY renamable $xmm0
1968B	  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
1984B	  renamable $xmm3 = COPY renamable $xmm0
2000B	  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
2032B	  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
2048B	  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
2064B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
2096B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
2112B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
2144B	  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
2176B	  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
2192B	  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
2208B	  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
2240B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
2256B	  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
2288B	  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
2320B	  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
2352B	  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
2512B	  JCC_1 %bb.6, 5, implicit killed $eflags
2528B	  JMP_1 %bb.7

2544B	bb.7 (%ir-block.41):
	; predecessors: %bb.6, %bb.4
	  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
	  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
2640B	  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
2688B	  JCC_1 %bb.10, 4, implicit killed $eflags
2704B	  JMP_1 %bb.8

2720B	bb.8..preheader:
	; predecessors: %bb.7
	  successors: %bb.9(0x80000000); %bb.9(100.00%)
	  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
2736B	  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
2752B	  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

2832B	bb.9 (%ir-block.48):
	; predecessors: %bb.8, %bb.9
	  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
	  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
2912B	  renamable $xmm5 = COPY renamable $xmm0
2928B	  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
2944B	  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
2976B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
2992B	  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
3008B	  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
3040B	  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
3056B	  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
3088B	  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
3104B	  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
3136B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
3152B	  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
3168B	  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
3200B	  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
3216B	  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
3248B	  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
3280B	  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
3312B	  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
3424B	  JCC_1 %bb.9, 5, implicit killed $eflags
3440B	  JMP_1 %bb.10

3456B	bb.10 (%ir-block.57):
	; predecessors: %bb.7, %bb.9
	  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
	  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
3504B	  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
3520B	  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
3552B	  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
3584B	  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
3600B	  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
3632B	  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
3648B	  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
3680B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
3712B	  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
3728B	  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
3744B	  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
3760B	  JCC_1 %bb.11, 5, implicit killed $eflags

3776B	bb.15:
	; predecessors: %bb.10
	  successors: %bb.14(0x80000000); %bb.14(100.00%)
	  liveins: $esi
3808B	  JMP_1 %bb.14

3824B	bb.11:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)
	  liveins: $esi, $rax, $rcx
3856B	  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

3904B	bb.12 (%ir-block.63):
	; predecessors: %bb.2, %bb.11
	  successors: %bb.13(0x80000000); %bb.13(100.00%)
	  liveins: $esi, $rax, $rcx
3968B	  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

4016B	bb.13 (%ir-block.67):
	; predecessors: %bb.12, %bb.13
	  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
	  liveins: $esi, $rax, $rcx
4080B	  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
4112B	  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
4128B	  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
4192B	  JCC_1 %bb.13, 5, implicit killed $eflags
4208B	  JMP_1 %bb.14

4224B	bb.14 (%ir-block.73):
	; predecessors: %bb.0, %bb.13, %bb.15
	  liveins: $esi
4256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4320B	  $rdi = MOV32ri64 @.str
4352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
4368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
4384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
4400B	  $eax = MOV32r0 implicit-def dead $eflags
4416B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $esi
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15
  liveins: $esi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $esi
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15
  liveins: $esi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $esi
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15
  liveins: $esi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $esi
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15
  liveins: $esi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $esi
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15
  liveins: $esi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $esi
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15
  liveins: $esi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $esi
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15
  liveins: $esi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $esi
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15
  liveins: $esi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $esi
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15
  liveins: $esi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $esi
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15
  liveins: $esi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $esi
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15
  liveins: $esi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $esi
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15
  liveins: $esi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $esi
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15
  liveins: $esi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $esi
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15
  liveins: $esi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $esi
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15
  liveins: $esi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $esi
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15
  liveins: $esi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $esi
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15
  liveins: $esi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $esi
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15
  liveins: $esi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $esi
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15
  liveins: $esi
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags
  JMP_1 %bb.7

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit killed $eflags
  JMP_1 %bb.8

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags
  JMP_1 %bb.10

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.15(0x40000000), %bb.11(0x40000000); %bb.15(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.11, 5, implicit killed $eflags

bb.15:
; predecessors: %bb.10
  successors: %bb.14(0x80000000); %bb.14(100.00%)
  liveins: $esi
  JMP_1 %bb.14

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags
  JMP_1 %bb.14

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.15
  liveins: $esi
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $rdi = MOV32ri64 @.str
  $esi = MOV32ri 1000
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $rdi = MOV32ri64 @.str.1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  renamable $ecx = COPY renamable $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  renamable $edi = COPY renamable $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = COPY renamable $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  renamable $xmm2 = COPY renamable $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  renamable $xmm6 = COPY renamable $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  renamable $xmm4 = COPY renamable $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  renamable $xmm7 = COPY renamable $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm2 = COPY renamable $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  renamable $xmm3 = COPY renamable $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  renamable $xmm5 = COPY renamable $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = ADD32ri8_DB renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVAPSrr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVAPSrr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVAPSrr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVAPSrr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVAPSrr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVAPSrr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVAPSrr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVAPSrr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVAPSrr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVAPSrr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVAPSrr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVAPSrr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVAPSrr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVAPSrr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVAPSrr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVAPSrr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVAPSrr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVAPSrr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVAPSrr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVAPSrr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVAPSrr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVAPSrr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVAPSrr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVAPSrr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVAPSrr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVAPSrr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVAPSrr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVAPSrr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1

bb.6 (%ir-block.20):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVAPSrr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVAPSrr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVAPSrr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVAPSrr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVAPSrr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVAPSrr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVAPSrr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVAPSrr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVAPSrr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVAPSrr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVAPSrr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVAPSrr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVAPSrr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVAPSrr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVAPSrr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVAPSrr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVAPSrr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVAPSrr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVAPSrr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVAPSrr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVAPSrr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVAPSrr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVAPSrr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVAPSrr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVAPSrr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVAPSrr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVAPSrr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVAPSrr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVAPSrr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVAPSrr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVAPSrr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVAPSrr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVAPSrm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVAPSrm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVAPSrm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVAPSrm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVAPSrm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVAPSrm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVAPSrm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVAPSrm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVAPSrr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVAPSrr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVAPSrr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVAPSrr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVAPSrr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVAPSrr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVAPSrm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVAPSrm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVAPSrr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP-4]
Constant Pool:
  cp#0: <i32 2, i32 3, i32 4, i32 5>, align=16
  cp#1: <i32 1, i32 1, i32 1, i32 1>, align=16
  cp#2: <i32 4, i32 4, i32 4, i32 4>, align=16
  cp#3: <i32 8, i32 8, i32 8, i32 8>, align=16
  cp#4: <i32 12, i32 12, i32 12, i32 12>, align=16
  cp#5: <i32 16, i32 16, i32 16, i32 16>, align=16
  cp#6: <i32 20, i32 20, i32 20, i32 20>, align=16
  cp#7: <i32 24, i32 24, i32 24, i32 24>, align=16
  cp#8: <i32 28, i32 28, i32 28, i32 28>, align=16
  cp#9: <i32 32, i32 32, i32 32, i32 32>, align=16

bb.0 (%ir-block.0):
  successors: %bb.14(0x40000000), %bb.1(0x40000000); %bb.14(50.00%), %bb.1(50.00%)

  frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  $edi = MOV32ri @.str, implicit-def $rdi
  $esi = MOV32ri 1000
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $rsi = LEA64r $rsp, 1, $noreg, 4, $noreg
  $edi = MOV32ri @.str.1, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $eax = MOV32rm $rsp, 1, $noreg, 4, $noreg, implicit-def $rax :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  renamable $esi = MOV32ri 1
  CMP32ri8 renamable $eax, 2, implicit-def $eflags
  JCC_1 %bb.14, 12, implicit $eflags

bb.1 (%ir-block.7):
; predecessors: %bb.0
  successors: %bb.2(0x40000000), %bb.3(0x40000000); %bb.2(50.00%), %bb.3(50.00%)
  liveins: $rax
  renamable $r8d = LEA64_32r renamable $rax, 1, $noreg, -1, $noreg
  CMP32ri8 renamable $r8d, 8, implicit-def $eflags
  JCC_1 %bb.3, 3, implicit killed $eflags

bb.2:
; predecessors: %bb.1
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $rax
  renamable $ecx = MOV32ri 2, implicit-def $rcx
  renamable $esi = MOV32ri 1
  JMP_1 %bb.12

bb.3 (%ir-block.10):
; predecessors: %bb.1
  successors: %bb.4(0x40000000), %bb.5(0x40000000); %bb.4(50.00%), %bb.5(50.00%)
  liveins: $rax, $r8d
  $ecx = MOV32rr $r8d, implicit-def $rcx
  renamable $ecx = AND32ri8 renamable $ecx(tied-def 0), -8, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  renamable $edx = LEA64_32r renamable $rcx, 1, $noreg, -8, $noreg
  $edi = MOV32rr $edx
  renamable $edi = exact SHR32ri killed renamable $edi(tied-def 0), 3, implicit-def dead $eflags
  renamable $edi = nuw nsw ADD32ri8 killed renamable $edi(tied-def 0), 1, implicit-def dead $eflags
  $esi = MOV32rr $edi
  renamable $esi = AND32ri8 killed renamable $esi(tied-def 0), 3, implicit-def dead $eflags
  CMP32ri8 killed renamable $edx, 24, implicit-def $eflags
  JCC_1 %bb.5, 3, implicit killed $eflags

bb.4:
; predecessors: %bb.3
  successors: %bb.7(0x80000000); %bb.7(100.00%)
  liveins: $esi, $rax, $rcx, $r8d
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1
  JMP_1 %bb.7

bb.5 (%ir-block.18):
; predecessors: %bb.3
  successors: %bb.6(0x80000000); %bb.6(100.00%)
  liveins: $edi, $esi, $rax, $rcx, $r8d
  renamable $edi = AND32ri8 killed renamable $edi(tied-def 0), -4, implicit-def dead $eflags
  renamable $xmm0 = MOVDQArm $rip, 1, $noreg, %const.0, $noreg :: (load (s128) from constant-pool)
  renamable $xmm1 = MOVDQArm $rip, 1, $noreg, %const.1, $noreg :: (load (s128) from constant-pool)
  renamable $xmm9 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)
  renamable $xmm10 = MOVDQArm $rip, 1, $noreg, %const.4, $noreg :: (load (s128) from constant-pool)
  renamable $xmm11 = MOVDQArm $rip, 1, $noreg, %const.5, $noreg :: (load (s128) from constant-pool)
  renamable $xmm12 = MOVDQArm $rip, 1, $noreg, %const.6, $noreg :: (load (s128) from constant-pool)
  renamable $xmm13 = MOVDQArm $rip, 1, $noreg, %const.7, $noreg :: (load (s128) from constant-pool)
  renamable $xmm14 = MOVDQArm $rip, 1, $noreg, %const.8, $noreg :: (load (s128) from constant-pool)
  renamable $xmm15 = MOVDQArm $rip, 1, $noreg, %const.9, $noreg :: (load (s128) from constant-pool)
  $xmm2 = MOVDQArr $xmm1

bb.6 (%ir-block.20, align 16):
; predecessors: %bb.5, %bb.6
  successors: %bb.7(0x04000000), %bb.6(0x7c000000); %bb.7(3.12%), %bb.6(96.88%)
  liveins: $edi, $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm9, $xmm10, $xmm11, $xmm12, $xmm13, $xmm14, $xmm15, $r8d
  $xmm6 = MOVDQArr $xmm0
  renamable $xmm6 = PADDDrm killed renamable $xmm6(tied-def 0), $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm3 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm7
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm7 = PSHUFDri renamable $xmm2, -11
  renamable $xmm4 = PSHUFDri renamable $xmm6, -11
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm7
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), killed renamable $xmm2
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm9
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm10
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm2
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm6 = PMULUDQrr killed renamable $xmm6(tied-def 0), renamable $xmm7
  renamable $xmm3 = PSHUFDri killed renamable $xmm7, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm4
  $xmm4 = MOVDQArr $xmm0
  renamable $xmm4 = PADDDrr killed renamable $xmm4(tied-def 0), renamable $xmm11
  $xmm7 = MOVDQArr $xmm0
  renamable $xmm7 = PADDDrr killed renamable $xmm7(tied-def 0), renamable $xmm12
  renamable $xmm5 = PSHUFDri renamable $xmm4, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm2
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), killed renamable $xmm1
  renamable $xmm8 = PSHUFDri renamable $xmm7, -11
  renamable $xmm8 = PMULUDQrr killed renamable $xmm8(tied-def 0), killed renamable $xmm3
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  $xmm2 = MOVDQArr $xmm0
  renamable $xmm2 = PADDDrr killed renamable $xmm2(tied-def 0), renamable $xmm13
  $xmm3 = MOVDQArr $xmm0
  renamable $xmm3 = PADDDrr killed renamable $xmm3(tied-def 0), renamable $xmm14
  renamable $xmm4 = PMULUDQrr killed renamable $xmm4(tied-def 0), renamable $xmm2
  renamable $xmm1 = PSHUFDri killed renamable $xmm4, -24
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm2
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), renamable $xmm3
  renamable $xmm2 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm8
  renamable $xmm3 = PSHUFDri killed renamable $xmm3, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm3
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm15
  renamable $edi = ADD32ri8 killed renamable $edi(tied-def 0), -4, implicit-def $eflags
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.7 (%ir-block.41):
; predecessors: %bb.6, %bb.4
  successors: %bb.10(0x30000000), %bb.8(0x50000000); %bb.10(37.50%), %bb.8(62.50%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  TEST32rr renamable $esi, renamable $esi, implicit-def $eflags
  JCC_1 %bb.10, 4, implicit $eflags

bb.8..preheader:
; predecessors: %bb.7
  successors: %bb.9(0x80000000); %bb.9(100.00%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $r8d
  renamable $xmm3 = MOVDQArm $rip, 1, $noreg, %const.2, $noreg :: (load (s128) from constant-pool)
  renamable $xmm4 = MOVDQArm $rip, 1, $noreg, %const.3, $noreg :: (load (s128) from constant-pool)

bb.9 (%ir-block.48, align 16):
; predecessors: %bb.8, %bb.9
  successors: %bb.10(0x04000000), %bb.9(0x7c000000); %bb.10(3.12%), %bb.9(96.88%)
  liveins: $esi, $rax, $rcx, $xmm0, $xmm1, $xmm2, $xmm3, $xmm4, $r8d
  $xmm5 = MOVDQArr $xmm0
  renamable $xmm5 = PADDDrr killed renamable $xmm5(tied-def 0), renamable $xmm3
  renamable $xmm6 = PSHUFDri renamable $xmm1, -11
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), renamable $xmm0
  renamable $xmm1 = PSHUFDri killed renamable $xmm1, -24
  renamable $xmm7 = PSHUFDri renamable $xmm0, -11
  renamable $xmm7 = PMULUDQrr killed renamable $xmm7(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri killed renamable $xmm7, -24
  renamable $xmm1 = PUNPCKLDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm6
  renamable $xmm6 = PSHUFDri renamable $xmm2, -11
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), renamable $xmm5
  renamable $xmm2 = PSHUFDri killed renamable $xmm2, -24
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -11
  renamable $xmm5 = PMULUDQrr killed renamable $xmm5(tied-def 0), killed renamable $xmm6
  renamable $xmm5 = PSHUFDri killed renamable $xmm5, -24
  renamable $xmm2 = PUNPCKLDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm5
  renamable $xmm0 = PADDDrr killed renamable $xmm0(tied-def 0), renamable $xmm4
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), -1, implicit-def $eflags
  JCC_1 %bb.9, 5, implicit killed $eflags

bb.10 (%ir-block.57):
; predecessors: %bb.7, %bb.9
  successors: %bb.14(0x40000000), %bb.11(0x40000000); %bb.14(50.00%), %bb.11(50.00%)
  liveins: $rax, $rcx, $xmm1, $xmm2, $r8d
  renamable $xmm0 = PSHUFDri renamable $xmm1, -11
  renamable $xmm3 = PSHUFDri renamable $xmm2, -11
  renamable $xmm3 = PMULUDQrr killed renamable $xmm3(tied-def 0), killed renamable $xmm0
  renamable $xmm2 = PMULUDQrr killed renamable $xmm2(tied-def 0), killed renamable $xmm1
  renamable $xmm0 = PSHUFDri renamable $xmm2, -18
  renamable $xmm0 = PMULUDQrr killed renamable $xmm0(tied-def 0), killed renamable $xmm2
  renamable $xmm1 = PSHUFDri renamable $xmm3, -86
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm3
  renamable $xmm1 = PMULUDQrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0
  renamable $esi = MOVPDI2DIrr killed renamable $xmm1
  CMP32rr killed renamable $r8d, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.14, 4, implicit $eflags

bb.11:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $ecx = OR32ri8 renamable $ecx(tied-def 0), 2, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx

bb.12 (%ir-block.63):
; predecessors: %bb.2, %bb.11
  successors: %bb.13(0x80000000); %bb.13(100.00%)
  liveins: $esi, $rax, $rcx
  renamable $eax = ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax

bb.13 (%ir-block.67, align 16):
; predecessors: %bb.12, %bb.13
  successors: %bb.14(0x04000000), %bb.13(0x7c000000); %bb.14(3.12%), %bb.13(96.88%)
  liveins: $esi, $rax, $rcx
  renamable $esi = nsw IMUL32rr killed renamable $esi(tied-def 0), renamable $ecx, implicit-def dead $eflags
  renamable $ecx = ADD32ri8 renamable $ecx(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rcx, implicit-def $rcx
  CMP32rr renamable $eax, renamable $ecx, implicit-def $eflags
  JCC_1 %bb.13, 5, implicit killed $eflags

bb.14 (%ir-block.73):
; predecessors: %bb.0, %bb.13, %bb.10
  liveins: $esi
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

