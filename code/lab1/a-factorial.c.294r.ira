
;; Function main (main, funcdef_no=0, decl_uid=2344, cgraph_uid=1, symbol_order=0)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 8 count 8 (    1)
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 7 6 }
;; 6 succs { }
;; 7 succs { 1 }
Removing SCRATCH to p94 in insn #3 (nop 2)
rescanning insn with uid = 3.
Removing SCRATCH to p95 in insn #48 (nop 3)
rescanning insn with uid = 48.
Building IRA IR
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 50.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 8 count 8 (    1)

Pass 0 for finding pseudo/allocno costs

    r95: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a1 (r95,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a12 (r94,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a3 (r92,l0) best DIREG, allocno GENERAL_REGS
    r91: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a4 (r91,l0) best SIREG, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a7 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a6 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a8 (r88,l0) best DIREG, allocno GENERAL_REGS
    r87: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a9 (r87,l0) best SIREG, allocno GENERAL_REGS
    r86: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a10 (r86,l0) best DIREG, allocno GENERAL_REGS
    r85: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a11 (r85,l0) best SIREG, allocno GENERAL_REGS
    r84: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a0 (r84,l0) best AREG, allocno GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a2 (r83,l0) best GENERAL_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    a5 (r82,l0) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r84,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:7000
  a1(r95,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:13000 INT_SSE_REGS:13000 ALL_REGS:212000 MEM:6000
  a2(r83,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:19000 INT_SSE_REGS:19000 ALL_REGS:312000 MEM:6000
  a3(r92,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a4(r91,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a5(r82,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a6(r89,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a7(r90,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a8(r88,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a9(r87,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:26000 INT_SSE_REGS:26000 ALL_REGS:424000 MEM:12000
  a10(r86,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:23000 INT_SSE_REGS:23000 ALL_REGS:316000 MEM:11000
  a11(r85,l0) costs: AREG:2000 DREG:2000 CREG:2000 BREG:2000 SIREG:2000 DIREG:2000 AD_REGS:2000 CLOBBERED_REGS:2000 Q_REGS:2000 TLS_GOTBASE_REGS:2000 GENERAL_REGS:2000 SSE_FIRST_REG:12000 NO_REX_SSE_REGS:12000 SSE_REGS:12000 MMX_REGS:25000 INT_SSE_REGS:25000 ALL_REGS:318000 MEM:12000
  a12(r94,l0) costs: AREG:0 DREG:0 CREG:0 BREG:0 SIREG:0 DIREG:0 AD_REGS:0 CLOBBERED_REGS:0 Q_REGS:0 TLS_GOTBASE_REGS:0 GENERAL_REGS:0 SSE_FIRST_REG:6000 NO_REX_SSE_REGS:6000 SSE_REGS:6000 MMX_REGS:13000 INT_SSE_REGS:13000 ALL_REGS:212000 MEM:6000

   Insn 54(l0): point = 0
   Insn 53(l0): point = 2
   Insn 50(l0): point = 5
   Insn 49(l0): point = 8
   Insn 48(l0): point = 10
   Insn 44(l0): point = 12
   Insn 41(l0): point = 14
   Insn 40(l0): point = 16
   Insn 39(l0): point = 18
   Insn 38(l0): point = 20
   Insn 37(l0): point = 22
   Insn 36(l0): point = 24
   Insn 35(l0): point = 26
   Insn 27(l0): point = 29
   Insn 26(l0): point = 31
   Insn 25(l0): point = 33
   Insn 24(l0): point = 35
   Insn 33(l0): point = 38
   Insn 32(l0): point = 40
   Insn 30(l0): point = 42
   Insn 58(l0): point = 45
   Insn 20(l0): point = 47
   Insn 19(l0): point = 49
   Insn 18(l0): point = 51
   Insn 17(l0): point = 53
   Insn 16(l0): point = 55
   Insn 15(l0): point = 57
   Insn 14(l0): point = 59
   Insn 13(l0): point = 61
   Insn 12(l0): point = 63
   Insn 11(l0): point = 65
   Insn 10(l0): point = 67
   Insn 9(l0): point = 69
   Insn 8(l0): point = 71
   Insn 7(l0): point = 73
   Insn 6(l0): point = 75
   Insn 3(l0): point = 77
 a0(r84): [8..12] [3..4]
 a1(r95): [10..10]
 a2(r83): [13..14]
 a3(r92): [21..22]
 a4(r91): [25..26]
 a5(r82): [41..42]
 a6(r89): [32..33]
 a7(r90): [34..35]
 a8(r88): [56..57]
 a9(r87): [60..61]
 a10(r86): [68..69]
 a11(r85): [72..73]
 a12(r94): [77..77]
Compressing live ranges: from 80 to 26 - 32%
Ranges after the compression:
 a0(r84): [0..4]
 a1(r95): [3..3]
 a2(r83): [5..6]
 a3(r92): [7..8]
 a4(r91): [9..10]
 a5(r82): [15..16]
 a6(r89): [11..12]
 a7(r90): [13..14]
 a8(r88): [17..18]
 a9(r87): [19..20]
 a10(r86): [21..22]
 a11(r85): [23..24]
 a12(r94): [25..25]
  pref0:a3(r92)<-hr5@1500
  pref1:a4(r91)<-hr4@1500
  pref2:a8(r88)<-hr5@1500
  pref3:a9(r87)<-hr4@1500
  pref4:a10(r86)<-hr5@1500
  pref5:a11(r85)<-hr4@1500
  pref6:a0(r84)<-hr0@1500
  regions=1, blocks=8, points=26
    allocnos=13 (big 0), copies=0, conflicts=0, ranges=13
Disposition:
    5:r82  l0     0    2:r83  l0     0    0:r84  l0     0   11:r85  l0     0
   10:r86  l0     0    9:r87  l0     0    8:r88  l0     0    6:r89  l0     0
    7:r90  l0     0    4:r91  l0     0    3:r92  l0     0   12:r94  l0     0
    1:r95  l0     1
+++Costs: overall -7000, reg -7000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 4 [si] 5 [di] 6 [bp] 7 [sp] 17 [flags]
;;  ref usage 	r0={9d,5u} r1={5d} r2={5d} r4={8d,3u} r5={8d,3u} r6={1d,7u} r7={1d,11u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1d,6u} r17={10d,2u} r18={4d} r19={1d,22u} r20={5d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={5d} r37={5d} r38={4d} r39={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r82={1d,1u} r83={1d,1u} r84={1d,1u} r85={1d,1u} r86={1d,1u} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r94={1d} r95={1d} 
;;    total ref usage 386{316d,70u,0e} in 37{33 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 4 3 2 NOTE_INSN_FUNCTION_BEG)
(insn 3 2 6 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -8 [0xfffffffffffffff8])) [1 D.2360+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (reg:DI 94)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "factorial.c":7:11 1159 {stack_protect_set_1_di}
     (expr_list:REG_UNUSED (reg:DI 94)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 6 3 7 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 k+0 S4 A32])
        (const_int 1000 [0x3e8])) "factorial.c":8:9 75 {*movsi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:SI 85)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [2 k+0 S4 A32])) "factorial.c":9:5 75 {*movsi_internal}
     (nil))
(insn 8 7 9 2 (set (reg:SI 4 si)
        (reg:SI 85)) "factorial.c":9:5 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 85)
        (nil)))
(insn 9 8 10 2 (set (reg:DI 86)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f7c8cade3f0 *.LC0>)) "factorial.c":9:5 74 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 5 di)
        (reg:DI 86)) "factorial.c":9:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 86)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f7c8cade3f0 *.LC0>)
            (nil))))
(insn 11 10 12 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "factorial.c":9:5 77 {*movqi_internal}
     (nil))
(call_insn 12 11 13 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f7c8c9f4100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "factorial.c":9:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 87)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
        ]) "factorial.c":11:5 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 14 13 15 2 (set (reg:DI 4 si)
        (reg:DI 87)) "factorial.c":11:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 87)
        (nil)))
(insn 15 14 16 2 (set (reg:DI 88)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f7c8cade480 *.LC1>)) "factorial.c":11:5 74 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:DI 5 di)
        (reg:DI 88)) "factorial.c":11:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 88)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7f7c8cade480 *.LC1>)
            (nil))))
(insn 17 16 18 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "factorial.c":11:5 77 {*movqi_internal}
     (nil))
(call_insn 18 17 19 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7f7c8c9f4d00 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) "factorial.c":11:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (nil)))))
(insn 19 18 20 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -20 [0xffffffffffffffec])) [2 i+0 S4 A32])
        (const_int 2 [0x2])) "factorial.c":12:7 75 {*movsi_internal}
     (nil))
(insn 20 19 58 2 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 f+0 S4 A64])
        (const_int 1 [0x1])) "factorial.c":13:7 75 {*movsi_internal}
     (nil))
(jump_insn 58 20 59 2 (set (pc)
        (label_ref 28)) "factorial.c":14:10 807 {jump}
     (nil)
 -> 28)
(barrier 59 58 31)
(code_label 31 59 23 3 3 (nil) [1 uses])
(note 23 31 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 3 (set (reg:SI 90)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 f+0 S4 A64])) "factorial.c":15:11 75 {*movsi_internal}
     (nil))
(insn 25 24 26 3 (parallel [
            (set (reg:SI 89)
                (mult:SI (reg:SI 90)
                    (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -20 [0xffffffffffffffec])) [2 i+0 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) "factorial.c":15:11 408 {*mulsi3_1}
     (expr_list:REG_DEAD (reg:SI 90)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 26 25 27 3 (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 f+0 S4 A64])
        (reg:SI 89)) "factorial.c":15:11 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 89)
        (nil)))
(insn 27 26 28 3 (parallel [
            (set (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                        (const_int -20 [0xffffffffffffffec])) [2 i+0 S4 A32])
                (plus:SI (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                            (const_int -20 [0xffffffffffffffec])) [2 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "factorial.c":16:11 209 {*addsi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(code_label 28 27 29 4 2 (nil) [1 uses])
(note 29 28 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 32 4 (set (reg:SI 82 [ n.0_1 ])
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -24 [0xffffffffffffffe8])) [2 n+0 S4 A64])) "factorial.c":14:13 75 {*movsi_internal}
     (nil))
(insn 32 30 33 4 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                    (const_int -20 [0xffffffffffffffec])) [2 i+0 S4 A32])
            (reg:SI 82 [ n.0_1 ]))) "factorial.c":14:13 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 82 [ n.0_1 ])
        (nil)))
(jump_insn 33 32 34 4 (set (pc)
        (if_then_else (le (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 31)
            (pc))) "factorial.c":14:13 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCGC 17 flags)
        (nil))
 -> 31)
(note 34 33 35 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 5 (set (reg:SI 91)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [2 f+0 S4 A64])) "factorial.c":21:5 75 {*movsi_internal}
     (nil))
(insn 36 35 37 5 (set (reg:SI 4 si)
        (reg:SI 91)) "factorial.c":21:5 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 91)
        (nil)))
(insn 37 36 38 5 (set (reg:DI 92)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f7c8cade3f0 *.LC0>)) "factorial.c":21:5 74 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:DI 5 di)
        (reg:DI 92)) "factorial.c":21:5 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 92)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7f7c8cade3f0 *.LC0>)
            (nil))))
(insn 39 38 40 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) "factorial.c":21:5 77 {*movqi_internal}
     (nil))
(call_insn 40 39 41 5 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("printf") [flags 0x41]  <function_decl 0x7f7c8c9f4100 printf>) [0 __builtin_printf S1 A8])
            (const_int 0 [0]))) "factorial.c":21:5 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_UNUSED (reg:SI 0 ax)
                (nil))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:SI (use (reg:SI 4 si))
                (nil)))))
(insn 41 40 44 5 (set (reg:SI 83 [ _11 ])
        (const_int 0 [0])) "factorial.c":22:12 75 {*movsi_internal}
     (nil))
(insn 44 41 48 5 (set (reg:SI 84 [ <retval> ])
        (reg:SI 83 [ _11 ])) "factorial.c":23:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 83 [ _11 ])
        (nil)))
(insn 48 44 49 5 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -8 [0xfffffffffffffff8])) [1 D.2360+0 S8 A64])
                        (mem/v/f:DI (const_int 40 [0x28]) [0 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (reg:DI 95))
        ]) "factorial.c":23:1 1164 {stack_protect_test_1_di}
     (expr_list:REG_UNUSED (reg:DI 95)
        (nil)))
(jump_insn 49 48 56 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) "factorial.c":23:1 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (nil))
 -> 52)
(note 56 49 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(call_insn 50 56 51 6 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f7c8cae3400 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "factorial.c":23:1 813 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
(barrier 51 50 52)
(code_label 52 51 57 7 5 (nil) [1 uses])
(note 57 52 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 53 57 54 7 (set (reg/i:SI 0 ax)
        (reg:SI 84 [ <retval> ])) "factorial.c":23:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 84 [ <retval> ])
        (nil)))
(insn 54 53 0 7 (use (reg/i:SI 0 ax)) "factorial.c":23:1 -1
     (nil))
